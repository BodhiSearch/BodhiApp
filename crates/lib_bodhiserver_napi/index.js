/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

import { existsSync, readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { createRequire } from 'module';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const require = createRequire(import.meta.url);

const { platform, arch } = process;

let nativeBinding = null;
let localFileExisted = false;
let loadError = null;

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      const lddPath = require('child_process').execSync('which ldd').toString().trim();
      return readFileSync(lddPath, 'utf8').includes('musl');
    } catch (e) {
      return true;
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header;
    return !glibcVersionRuntime;
  }
}

switch (platform) {
  case 'android':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'bodhiapp-server-bindings.android-arm64.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require('./bodhiapp-server-bindings.android-arm64.node');
          } else {
            nativeBinding = require('bodhiapp-server-bindings-android-arm64');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case 'arm':
        localFileExisted = existsSync(join(__dirname, 'bodhiapp-server-bindings.android-arm-eabi.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require('./bodhiapp-server-bindings.android-arm-eabi.node');
          } else {
            nativeBinding = require('bodhiapp-server-bindings-android-arm-eabi');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`);
    }
    break;
  case 'win32':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(
          join(__dirname, 'bodhiapp-server-bindings.win32-x64-msvc.node')
        );
        try {
          if (localFileExisted) {
            nativeBinding = require('./bodhiapp-server-bindings.win32-x64-msvc.node');
          } else {
            nativeBinding = require('bodhiapp-server-bindings-win32-x64-msvc');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case 'ia32':
        localFileExisted = existsSync(
          join(__dirname, 'bodhiapp-server-bindings.win32-ia32-msvc.node')
        );
        try {
          if (localFileExisted) {
            nativeBinding = require('./bodhiapp-server-bindings.win32-ia32-msvc.node');
          } else {
            nativeBinding = require('bodhiapp-server-bindings-win32-ia32-msvc');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'bodhiapp-server-bindings.win32-arm64-msvc.node')
        );
        try {
          if (localFileExisted) {
            nativeBinding = require('./bodhiapp-server-bindings.win32-arm64-msvc.node');
          } else {
            nativeBinding = require('bodhiapp-server-bindings-win32-arm64-msvc');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`);
    }
    break;
  case 'darwin':
    localFileExisted = existsSync(join(__dirname, 'bodhiapp-server-bindings.darwin-universal.node'));
    try {
      if (localFileExisted) {
        nativeBinding = require('./bodhiapp-server-bindings.darwin-universal.node');
      } else {
        nativeBinding = require('bodhiapp-server-bindings-darwin-universal');
      }
      break;
    } catch {}
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'bodhiapp-server-bindings.darwin-x64.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require('./bodhiapp-server-bindings.darwin-x64.node');
          } else {
            nativeBinding = require('bodhiapp-server-bindings-darwin-x64');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'bodhiapp-server-bindings.darwin-arm64.node')
        );
        try {
          if (localFileExisted) {
            nativeBinding = require('./bodhiapp-server-bindings.darwin-arm64.node');
          } else {
            nativeBinding = require('bodhiapp-server-bindings-darwin-arm64');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`);
    }
    break;
  case 'freebsd':
    if (arch !== 'x64') {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);
    }
    localFileExisted = existsSync(join(__dirname, 'bodhiapp-server-bindings.freebsd-x64.node'));
    try {
      if (localFileExisted) {
        nativeBinding = require('./bodhiapp-server-bindings.freebsd-x64.node');
      } else {
        nativeBinding = require('bodhiapp-server-bindings-freebsd-x64');
      }
    } catch (e) {
      loadError = e;
    }
    break;
  case 'linux':
    switch (arch) {
      case 'x64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'bodhiapp-server-bindings.linux-x64-musl.node')
          );
          try {
            if (localFileExisted) {
              nativeBinding = require('./bodhiapp-server-bindings.linux-x64-musl.node');
            } else {
              nativeBinding = require('bodhiapp-server-bindings-linux-x64-musl');
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'bodhiapp-server-bindings.linux-x64-gnu.node')
          );
          try {
            if (localFileExisted) {
              nativeBinding = require('./bodhiapp-server-bindings.linux-x64-gnu.node');
            } else {
              nativeBinding = require('bodhiapp-server-bindings-linux-x64-gnu');
            }
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case 'arm64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'bodhiapp-server-bindings.linux-arm64-musl.node')
          );
          try {
            if (localFileExisted) {
              nativeBinding = require('./bodhiapp-server-bindings.linux-arm64-musl.node');
            } else {
              nativeBinding = require('bodhiapp-server-bindings-linux-arm64-musl');
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'bodhiapp-server-bindings.linux-arm64-gnu.node')
          );
          try {
            if (localFileExisted) {
              nativeBinding = require('./bodhiapp-server-bindings.linux-arm64-gnu.node');
            } else {
              nativeBinding = require('bodhiapp-server-bindings-linux-arm64-gnu');
            }
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case 'arm':
        localFileExisted = existsSync(join(__dirname, 'bodhiapp-server-bindings.linux-arm-gnueabihf.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require('./bodhiapp-server-bindings.linux-arm-gnueabihf.node');
          } else {
            nativeBinding = require('bodhiapp-server-bindings-linux-arm-gnueabihf');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case 'riscv64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'bodhiapp-server-bindings.linux-riscv64-musl.node')
          );
          try {
            if (localFileExisted) {
              nativeBinding = require('./bodhiapp-server-bindings.linux-riscv64-musl.node');
            } else {
              nativeBinding = require('bodhiapp-server-bindings-linux-riscv64-musl');
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'bodhiapp-server-bindings.linux-riscv64-gnu.node')
          );
          try {
            if (localFileExisted) {
              nativeBinding = require('./bodhiapp-server-bindings.linux-riscv64-gnu.node');
            } else {
              nativeBinding = require('bodhiapp-server-bindings-linux-riscv64-gnu');
            }
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case 's390x':
        localFileExisted = existsSync(join(__dirname, 'bodhiapp-server-bindings.linux-s390x-gnu.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require('./bodhiapp-server-bindings.linux-s390x-gnu.node');
          } else {
            nativeBinding = require('bodhiapp-server-bindings-linux-s390x-gnu');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`);
    }
    break;
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError;
  }
  throw new Error(`Failed to load native binding`);
}

// Extract named exports from nativeBinding
const {
  createNapiAppOptions,
  setEnvVar,
  setSystemSetting,
  setAppSetting,
  setClientCredentials,
  setAppStatus,
  BodhiServer,
  BODHI_HOME,
  BODHI_HOST,
  BODHI_PORT,
  BODHI_LOG_LEVEL,
  BODHI_LOG_STDOUT,
  BODHI_EXEC_LOOKUP_PATH,
  BODHI_ENV_TYPE,
  BODHI_APP_TYPE,
  BODHI_VERSION,
  BODHI_AUTH_URL,
  BODHI_AUTH_REALM,
  DEFAULT_HOST,
  DEFAULT_PORT
} = nativeBinding;

// Export all named exports
export {
  createNapiAppOptions,
  setEnvVar,
  setSystemSetting,
  setAppSetting,
  setClientCredentials,
  setAppStatus,
  BodhiServer,
  BODHI_HOME,
  BODHI_HOST,
  BODHI_PORT,
  BODHI_LOG_LEVEL,
  BODHI_LOG_STDOUT,
  BODHI_EXEC_LOOKUP_PATH,
  BODHI_ENV_TYPE,
  BODHI_APP_TYPE,
  BODHI_VERSION,
  BODHI_AUTH_URL,
  BODHI_AUTH_REALM,
  DEFAULT_HOST,
  DEFAULT_PORT
};

// Default export
export default nativeBinding;
