/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Application state enumeration for tracking lifecycle */
export const enum AppState {
  Uninitialized = 0,
  Ready = 1,
  Running = 2,
  Shutdown = 3
}
/** FFI-compatible configuration for BodhiApp initialization */
export interface AppConfig {
  /** Environment type (Development, Production, etc.) */
  envType: string
  /** Application type (Container, Native, etc.) */
  appType: string
  /** Application version string */
  appVersion: string
  /** Authentication server URL */
  authUrl: string
  /** Authentication realm */
  authRealm: string
  /** Optional custom Bodhi home directory */
  bodhiHome?: string
  /** Optional encryption key for testing (bypasses keyring) */
  encryptionKey?: string
  /** Optional exec lookup path for testing */
  execLookupPath?: string
  /** Optional port configuration for testing */
  port?: number
}
/** Main NAPI wrapper for BodhiApp server functionality */
export declare class BodhiApp {
  /** Creates a new uninitialized BodhiApp instance */
  constructor()
  /**
   * Initializes the BodhiApp with the provided configuration
   *
   * This function sets up application directories, loads settings,
   * and builds all required services using the isolated lib_bodhiserver interface.
   */
  initialize(config: AppConfig): Promise<void>
  /**
   * Starts the HTTP server with the specified configuration
   *
   * # Arguments
   * * `host` - The host address to bind to (e.g., "127.0.0.1")
   * * `port` - The port number to bind to (0 for automatic port selection)
   * * `assets_path` - Optional path to static assets directory
   *
   * # Returns
   * The server URL (e.g., "http://127.0.0.1:3000")
   */
  startServer(host: string, port: number, assetsPath?: string | undefined | null): Promise<string>
  /** Shuts down the server and cleans up resources */
  shutdown(): Promise<void>
  /** Gets the current application state */
  getStatus(): number
}
