/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chat with Model (Ollama Compatible)
         * @description Creates a chat completion using Ollama API format. Supports both streaming and non-streaming responses with Ollama-specific options and response format.
         */
        post: operations["chatOllamaModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/show": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Show Model Details (Ollama Compatible)
         * @description Retrieves detailed information about a specific model in Ollama API compatible format. Includes model parameters, template, license, and configuration details.
         */
        post: operations["showOllamaModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Available Models (Ollama Compatible)
         * @description Returns a list of all available models in Ollama API compatible format. Includes model metadata such as size, modification time, and format details.
         */
        get: operations["listOllamaModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/access-requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List All Access Requests
         * @description List all access requests regardless of status. Requires manager or admin role.
         */
        get: operations["listAllAccessRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/access-requests/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Pending Access Requests
         * @description List all pending access requests. Requires manager or admin role.
         */
        get: operations["listPendingAccessRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/access-requests/{id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve Access Request
         * @description Approve an access request and assign a role. Requires manager or admin role.
         */
        post: operations["approveAccessRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/access-requests/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reject Access Request
         * @description Reject an access request. Requires manager or admin role.
         */
        post: operations["rejectAccessRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/api-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List API Model Configurations
         * @description Retrieves paginated list of all configured API model aliases including external API formats like OpenAI, etc. API keys are masked in list view for security.
         */
        get: operations["listApiModels"];
        put?: never;
        /** Create a new API model configuration */
        post: operations["createApiModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/api-models/api-formats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available API Formats
         * @description Retrieves list of supported API formats/protocols (e.g., OpenAI).
         */
        get: operations["getApiFormats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/api-models/fetch-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fetch available models from the API */
        post: operations["fetchApiModels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/api-models/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test API connectivity with a prompt */
        post: operations["testApiModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/api-models/{alias}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing API model configuration */
        put: operations["updateApiModel"];
        post?: never;
        /** Delete an API model configuration */
        delete: operations["deleteApiModel"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/api-models/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API Model Configuration
         * @description Retrieves detailed configuration for a specific API model alias by ID. API keys are masked for security unless explicitly requested.
         */
        get: operations["getApiModel"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/apps/request-access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request Resource Access
         * @description Requests access permissions for an application client to access this resource server's protected resources.
         */
        post: operations["requestAccess"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/auth/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete OAuth Authentication
         * @description Completes the OAuth authentication flow by exchanging authorization code for tokens and establishing user session.
         */
        post: operations["completeOAuthFlow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/auth/initiate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Initiate OAuth Authentication
         * @description Initiates OAuth authentication flow. Returns OAuth authorization URL for unauthenticated users or home page URL for already authenticated users.
         */
        post: operations["initiateOAuthFlow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Application Information
         * @description Retrieves current application version and status information including setup state
         */
        get: operations["getAppInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout User
         * @description Logs out the current user by destroying their session and returns redirect URL to login page
         */
        post: operations["logoutUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Local Model Files
         * @description Retrieves paginated list of GGUF model files available in the local HuggingFace cache directory with metadata including repository, filename, snapshot ID, and file size.
         */
        get: operations["listModelFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles/pull": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Model Download Requests
         * @description Retrieves paginated list of all model download requests with their current status, progress, and metadata. Includes both active downloads and completed/failed requests.
         */
        get: operations["listDownloads"];
        put?: never;
        /**
         * Start Model File Download
         * @description Initiates a new model file download from HuggingFace repository. Creates a download request that can be tracked for progress. Returns existing request if download is already in progress.
         */
        post: operations["pullModelFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles/pull/{alias}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Download Model by Alias
         * @description Initiates a model download using a predefined alias that maps to specific repository and file combinations. This provides a convenient way to download popular models without specifying exact repository details.
         */
        post: operations["pullModelByAlias"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles/pull/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Download Request Status
         * @description Retrieves the current status and progress information for a specific model download request. Includes download progress, error details, and completion status.
         */
        get: operations["getDownloadStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List All Model Aliases
         * @description Retrieves paginated list of all configured model aliases including user-defined aliases, model aliases, and API provider aliases with filtering and sorting options.
         */
        get: operations["listAllModels"];
        put?: never;
        /** Create Alias */
        post: operations["createAlias"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/models/{alias}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details for a specific model alias */
        get: operations["getAlias"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/models/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Alias */
        put: operations["updateAlias"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Application Settings
         * @description Retrieves all configurable application settings with their current values, default values, sources, and metadata including validation constraints.
         */
        get: operations["listSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/settings/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Application Setting
         * @description Updates the value of a specific application setting. The new value is validated against the setting's constraints and persisted to the settings file.
         */
        put: operations["updateSetting"];
        post?: never;
        /**
         * Reset Setting to Default
         * @description Resets a specific application setting to its default value by removing any custom overrides. Some critical settings like BODHI_HOME cannot be reset.
         */
        delete: operations["deleteSetting"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup Application
         * @description Initializes the application with authentication configuration and registers with the auth server
         */
        post: operations["setupApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List API Tokens
         * @description Retrieves paginated list of API tokens owned by the current user. Includes token metadata but not the actual token values for security.
         */
        get: operations["listApiTokens"];
        put?: never;
        /**
         * Create API Token
         * @description Creates a new API token for programmatic access to the API. The token can be used for bearer authentication in API requests. This feature is currently not available.
         */
        post: operations["createApiToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update API Token
         * @description Updates the name and status of an existing API token. Only the token owner can update their tokens. Token values cannot be changed after creation.
         */
        put: operations["updateApiToken"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Information
         * @description Retrieves information about the currently authenticated user including email, roles, token type, and authentication source.
         */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/user/request-access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request User Access
         * @description Authenticated users without roles can request access to the system. Only one pending request is allowed per user.
         */
        post: operations["requestUserAccess"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/user/request-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Access Request Status
         * @description Check the status of the current user's access request.
         */
        get: operations["getUserAccessStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description List all users with roles and status information. Available to managers and admins.
         */
        get: operations["listUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove user access
         * @description Remove a user's access to the application. Only admins can remove users.
         */
        delete: operations["removeUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/users/{user_id}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change user role
         * @description Assign a new role to a user. Admins can assign any role, managers can assign user/power_user/manager roles.
         */
        put: operations["changeUserRole"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Comprehensive health check to verify all application components are operational
         */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping Server
         * @description Simple connectivity check to verify the server is responding
         */
        get: operations["pingServer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Chat Completion (OpenAI Compatible)
         * @description Creates a chat completion response using the specified model. Supports both streaming and non-streaming responses. Fully compatible with OpenAI's chat completions API format.
         */
        post: operations["createChatCompletion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Available Models (OpenAI Compatible)
         * @description Returns a list of all available models in OpenAI API compatible format. Includes user aliases, model aliases, and API provider aliases that can be used with the chat completions endpoint.
         */
        get: operations["listModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Model Details (OpenAI Compatible)
         * @description Retrieves details for a specific model by ID in OpenAI API compatible format. The model ID can be a user alias, model alias, or API provider alias.
         */
        get: operations["getModel"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Flat enum representing all types of model aliases
         *     Each variant is identified by the source field */
        Alias: (components["schemas"]["UserAlias"] & {
            /** @enum {string} */
            source: "user";
        }) | (components["schemas"]["ModelAlias"] & {
            /** @enum {string} */
            source: "model";
        }) | (components["schemas"]["ApiAlias"] & {
            /** @enum {string} */
            source: "api";
        });
        ApiAlias: {
            api_format: components["schemas"]["ApiFormat"];
            base_url: string;
            /** Format: date-time */
            created_at: string;
            id: string;
            models: string[];
            prefix?: string | null;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * @description API format/protocol specification
         * @enum {string}
         */
        ApiFormat: "openai" | "placeholder";
        /**
         * @description Response containing available API formats
         * @example {
         *       "data": [
         *         "openai"
         *       ]
         *     }
         */
        ApiFormatsResponse: {
            data: components["schemas"]["ApiFormat"][];
        };
        /**
         * @description Response containing API model configuration
         * @example {
         *       "api_format": "openai",
         *       "api_key_masked": "sk-...abc123",
         *       "base_url": "https://api.openai.com/v1",
         *       "created_at": "2024-01-01T00:00:00Z",
         *       "id": "openai-gpt4",
         *       "models": [
         *         "gpt-4",
         *         "gpt-3.5-turbo"
         *       ],
         *       "prefix": "openai",
         *       "updated_at": "2024-01-01T00:00:00Z"
         *     }
         */
        ApiModelResponse: {
            api_format: components["schemas"]["ApiFormat"];
            api_key_masked: string;
            base_url: string;
            /** Format: date-time */
            created_at: string;
            id: string;
            models: string[];
            prefix?: string | null;
            /** Format: date-time */
            updated_at: string;
        };
        ApiToken: {
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            created_at: string;
            id: string;
            name: string;
            status: components["schemas"]["TokenStatus"];
            token_hash: string;
            token_id: string;
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            updated_at: string;
            user_id: string;
        };
        /** @example {
         *       "offline_token": "bapp_1234567890abcdef"
         *     } */
        ApiTokenResponse: {
            /**
             * @description API token with bapp_ prefix for programmatic access
             * @example bapp_1234567890abcdef
             */
            offline_token: string;
        };
        AppAccessRequest: {
            app_client_id: string;
        };
        AppAccessResponse: {
            scope: string;
        };
        /**
         * @description Application information and status
         * @example {
         *       "status": "ready",
         *       "version": "0.1.0"
         *     }
         */
        AppInfo: {
            /** @description Current application setup and operational status */
            status: components["schemas"]["AppStatus"];
            /**
             * @description Application version number (semantic versioning)
             * @example 0.1.0
             */
            version: string;
        };
        AppRole: components["schemas"]["Role"] | components["schemas"]["TokenScope"] | components["schemas"]["UserScope"];
        /**
         * @example ready
         * @enum {string}
         */
        AppStatus: "setup" | "ready" | "resource-admin";
        /**
         * @description Request body for approving access with role assignment
         * @example {
         *       "role": "resource_user"
         *     }
         */
        ApproveUserAccessRequest: {
            /** @description Role to assign to the user */
            role: components["schemas"]["Role"];
        };
        /** @example {
         *       "code": "auth_code_123",
         *       "state": "random_state_456"
         *     } */
        AuthCallbackRequest: {
            /**
             * @description OAuth authorization code from successful authentication (required for success flow)
             * @example auth_code_123
             */
            code?: string | null;
            /**
             * @description OAuth error code if authentication failed (e.g., "access_denied")
             * @example access_denied
             */
            error?: string | null;
            /**
             * @description Human-readable OAuth error description if authentication failed
             * @example The user denied the request
             */
            error_description?: string | null;
            /**
             * @description OAuth state parameter for CSRF protection (must match initiated request)
             * @example random_state_456
             */
            state?: string | null;
        } & {
            [key: string]: string;
        };
        /** @description Change user role request */
        ChangeRoleRequest: {
            /**
             * @description Role to assign to the user
             * @example resource_manager
             */
            role: string;
        };
        ChatRequest: {
            format?: string | null;
            keep_alive?: null | components["schemas"]["Duration"];
            messages: components["schemas"]["Message"][];
            model: string;
            options?: null | components["schemas"]["Options"];
            stream?: boolean | null;
        };
        CreateAliasRequest: {
            alias: string;
            context_params?: string[] | null;
            filename: string;
            repo: string;
            request_params?: null | components["schemas"]["OAIRequestParams"];
            snapshot?: string | null;
        };
        /**
         * @description Request to create a new API model configuration
         * @example {
         *       "api_format": "openai",
         *       "api_key": "sk-...",
         *       "base_url": "https://api.openai.com/v1",
         *       "models": [
         *         "gpt-4",
         *         "gpt-3.5-turbo"
         *       ],
         *       "prefix": "openai"
         *     }
         */
        CreateApiModelRequest: {
            /** @description API format/protocol (e.g., "openai") */
            api_format: components["schemas"]["ApiFormat"];
            /** @description API key for authentication */
            api_key: string;
            /** @description API base URL */
            base_url: string;
            /** @description List of available models */
            models: string[];
            /** @description Optional prefix for model namespacing (e.g., "azure/" for "azure/gpt-4", "openai:" for "openai:gpt-4") */
            prefix?: string | null;
        };
        /**
         * @description Request to create a new API token
         * @example {
         *       "name": "My Integration Token"
         *     }
         */
        CreateApiTokenRequest: {
            /**
             * @description Descriptive name for the API token (minimum 3 characters)
             * @example My Integration Token
             */
            name?: string | null;
        };
        DownloadRequest: {
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            created_at: string;
            /** Format: int64 */
            downloaded_bytes?: number;
            error?: string | null;
            filename: string;
            id: string;
            repo: string;
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            started_at: string;
            status: components["schemas"]["DownloadStatus"];
            /** Format: int64 */
            total_bytes?: number | null;
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            updated_at: string;
        };
        /** @enum {string} */
        DownloadStatus: "pending" | "completed" | "error";
        Duration: string;
        /** @example {
         *       "code": "validation_error",
         *       "message": "Validation failed: name is required",
         *       "param": "name",
         *       "type": "invalid_request_error"
         *     } */
        ErrorBody: {
            /**
             * @description Specific error code for programmatic error handling
             * @example validation_error
             */
            code?: string | null;
            /**
             * @description Human-readable error message describing what went wrong
             * @example Validation failed: name is required
             */
            message: string;
            /**
             * @description Parameter name that caused the error (for validation errors)
             * @example name
             */
            param?: string | null;
            /**
             * @description Error type categorizing the kind of error that occurred
             * @example invalid_request_error
             */
            type: string;
        };
        /**
         * @description Request to fetch available models from provider
         * @example {
         *       "api_key": "sk-...",
         *       "base_url": "https://api.openai.com/v1"
         *     }
         */
        FetchModelsRequest: {
            /** @description API key for authentication (provide either api_key OR id, api_key takes preference if both provided) */
            api_key?: string;
            /** @description API base URL (optional when using id) */
            base_url: string;
            /** @description API model ID to look up stored credentials (provide either api_key OR id, api_key takes preference if both provided) */
            id?: string;
        };
        /**
         * @description Response containing available models from provider
         * @example {
         *       "models": [
         *         "gpt-4",
         *         "gpt-3.5-turbo",
         *         "gpt-4-turbo"
         *       ]
         *     }
         */
        FetchModelsResponse: {
            models: string[];
        };
        ListModelResponse: {
            data: {
                /**
                 * Format: int32
                 * @description The Unix timestamp (in seconds) when the model was created.
                 */
                created: number;
                /** @description The model identifier, which can be referenced in the API endpoints. */
                id: string;
                /** @description The object type, which is always "model". */
                object: string;
                /** @description The organization that owns the model. */
                owned_by: string;
            }[];
            object: string;
        };
        /** @description List users query parameters */
        ListUsersParams: {
            /**
             * Format: int32
             * @example 1
             */
            page?: number | null;
            /**
             * Format: int32
             * @example 10
             */
            page_size?: number | null;
        };
        LocalModelResponse: {
            filename: string;
            model_params: {
                [key: string]: unknown;
            };
            repo: string;
            /** Format: int64 */
            size?: number | null;
            snapshot: string;
        };
        Message: {
            content: string;
            images?: string[] | null;
            role: string;
        };
        Model: {
            details: components["schemas"]["ModelDetails"];
            digest: string;
            model: string;
            /** Format: int32 */
            modified_at: number;
            /** Format: int64 */
            size: number;
        };
        ModelAlias: {
            alias: string;
            filename: string;
            /** Format: string */
            repo: string;
            snapshot: string;
        };
        ModelDetails: {
            families?: string[] | null;
            family: string;
            format: string;
            parameter_size: string;
            parent_model?: string | null;
            quantization_level: string;
        };
        /** @description Describes an OpenAI model offering that can be used with the API. */
        ModelResponse: {
            /**
             * Format: int32
             * @description The Unix timestamp (in seconds) when the model was created.
             */
            created: number;
            /** @description The model identifier, which can be referenced in the API endpoints. */
            id: string;
            /** @description The object type, which is always "model". */
            object: string;
            /** @description The organization that owns the model. */
            owned_by: string;
        };
        ModelsResponse: {
            models: components["schemas"]["Model"][];
        };
        /**
         * @description Request to pull a model file from HuggingFace
         * @example {
         *       "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
         *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF"
         *     }
         */
        NewDownloadRequest: {
            /**
             * @description Model file name to download (typically .gguf format)
             * @example mistral-7b-instruct-v0.1.Q4_K_M.gguf
             */
            filename: string;
            /**
             * @description HuggingFace repository name in format 'username/repository-name'
             * @example TheBloke/Mistral-7B-Instruct-v0.1-GGUF
             */
            repo: string;
        };
        OAIRequestParams: {
            /** Format: float */
            frequency_penalty?: number | null;
            /** Format: int32 */
            max_tokens?: number | null;
            /** Format: float */
            presence_penalty?: number | null;
            /** Format: int64 */
            seed?: number | null;
            stop?: string[];
            /** Format: float */
            temperature?: number | null;
            /** Format: float */
            top_p?: number | null;
            user?: string | null;
        };
        OllamaError: {
            error: string;
        };
        /** @example {
         *       "error": {
         *         "code": "validation_error",
         *         "message": "Validation failed: name is required",
         *         "param": "name",
         *         "type": "invalid_request_error"
         *       }
         *     } */
        OpenAIApiError: {
            /** @description Error details following OpenAI API error format */
            error: components["schemas"]["ErrorBody"];
        };
        Options: {
            f16_kv?: boolean | null;
            /** Format: float */
            frequency_penalty?: number | null;
            logits_all?: boolean | null;
            low_vram?: boolean | null;
            /** Format: int32 */
            main_gpu?: number | null;
            /** Format: float */
            mirostat?: number | null;
            /** Format: float */
            mirostat_eta?: number | null;
            /** Format: float */
            mirostat_tau?: number | null;
            /** Format: int32 */
            num_batch?: number | null;
            /** Format: int32 */
            num_ctx?: number | null;
            /** Format: int32 */
            num_gpu?: number | null;
            /** Format: int32 */
            num_keep?: number | null;
            /** Format: int32 */
            num_predict?: number | null;
            /** Format: int32 */
            num_thread?: number | null;
            numa?: boolean | null;
            penalize_newline?: boolean | null;
            /** Format: float */
            presence_penalty?: number | null;
            /** Format: int32 */
            repeat_last_n?: number | null;
            /** Format: float */
            repeat_penalty?: number | null;
            /** Format: int64 */
            seed?: number | null;
            stop?: string[] | null;
            /** Format: float */
            temperature?: number | null;
            /** Format: float */
            tfs_z?: number | null;
            /** Format: int32 */
            top_k?: number | null;
            /** Format: float */
            top_p?: number | null;
            /** Format: float */
            typical_p?: number | null;
            use_mlock?: boolean | null;
            use_mmap?: boolean | null;
            vocab_only?: boolean | null;
        };
        PaginatedAliasResponse: {
            data: components["schemas"]["Alias"][];
            page: number;
            page_size: number;
            total: number;
        };
        /** @description Paginated response for API model listings */
        PaginatedApiModelResponse: {
            data: components["schemas"]["ApiModelResponse"][];
            page: number;
            page_size: number;
            total: number;
        };
        PaginatedApiTokenResponse: {
            data: components["schemas"]["ApiToken"][];
            page: number;
            page_size: number;
            total: number;
        };
        PaginatedDownloadResponse: {
            data: components["schemas"]["DownloadRequest"][];
            page: number;
            page_size: number;
            total: number;
        };
        PaginatedLocalModelResponse: {
            data: components["schemas"]["LocalModelResponse"][];
            page: number;
            page_size: number;
            total: number;
        };
        /**
         * @description Paginated response for access requests
         * @example {
         *       "page": 1,
         *       "page_size": 20,
         *       "requests": [
         *         {
         *           "created_at": "2024-01-01T12:00:00Z",
         *           "email": "user@example.com",
         *           "id": 1,
         *           "reviewer": null,
         *           "status": "pending",
         *           "updated_at": "2024-01-01T12:00:00Z"
         *         }
         *       ],
         *       "total": 1
         *     }
         */
        PaginatedUserAccessResponse: {
            /** @description Current page number */
            page: number;
            /** @description Number of items per page */
            page_size: number;
            /** @description List of access requests */
            requests: components["schemas"]["UserAccessRequest"][];
            /** @description Total number of requests */
            total: number;
        };
        PaginatedUserAliasResponse: {
            data: components["schemas"]["UserAliasResponse"][];
            page: number;
            page_size: number;
            total: number;
        };
        /** @description Query parameters for pagination and sorting */
        PaginationSortParams: {
            /**
             * @description Page number (1-based indexing)
             * @example 1
             */
            page?: number;
            /**
             * @description Number of items to return per page (maximum 100)
             * @example 30
             */
            page_size?: number;
            /**
             * @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at
             * @example updated_at
             */
            sort?: string | null;
            /**
             * @description Sort order: 'asc' for ascending, 'desc' for descending
             * @example desc
             */
            sort_order?: string;
        };
        /**
         * @description Response to the ping endpoint
         * @example {
         *       "message": "pong"
         *     }
         */
        PingResponse: {
            /**
             * @description Simple ping response message
             * @example pong
             */
            message: string;
        };
        /** @example {
         *       "location": "https://oauth.example.com/auth?client_id=test&redirect_uri=..."
         *     } */
        RedirectResponse: {
            /**
             * @description The URL to redirect to (OAuth authorization URL or application home page)
             * @example https://oauth.example.com/auth?client_id=test&redirect_uri=...
             */
            location: string;
        };
        /** @enum {string} */
        Role: "resource_user" | "resource_power_user" | "resource_manager" | "resource_admin";
        SettingInfo: {
            current_value: unknown;
            default_value: unknown;
            key: string;
            metadata: components["schemas"]["SettingMetadata"];
            source: components["schemas"]["SettingSource"];
        };
        SettingMetadata: {
            /** @enum {string} */
            type: "string";
        } | {
            /** Format: int64 */
            max: number;
            /** Format: int64 */
            min: number;
            /** @enum {string} */
            type: "number";
        } | {
            /** @enum {string} */
            type: "boolean";
        } | {
            options: string[];
            /** @enum {string} */
            type: "option";
        };
        /** @enum {string} */
        SettingSource: "system" | "command_line" | "environment" | "settings_file" | "default";
        /**
         * @description Request to setup the application in authenticated mode
         * @example {
         *       "description": "My personal AI server",
         *       "name": "My Bodhi Server"
         *     }
         */
        SetupRequest: {
            /**
             * @description Optional description of the server's purpose
             * @example My personal AI server
             */
            description?: string | null;
            /**
             * @description Server name for identification (minimum 10 characters)
             * @example My Bodhi Server
             */
            name: string;
        };
        /**
         * @description Response containing the updated application status after setup
         * @example {
         *       "status": "resource-admin"
         *     }
         */
        SetupResponse: {
            /** @description New application status after successful setup */
            status: components["schemas"]["AppStatus"];
        };
        ShowRequest: {
            name: string;
        };
        ShowResponse: {
            details: components["schemas"]["ModelDetails"];
            license: string;
            model_info: {
                [key: string]: unknown;
            };
            modelfile: string;
            /** Format: int32 */
            modified_at: number;
            parameters: string;
            template: string;
        };
        /**
         * @description Request to test API connectivity with a prompt
         * @example {
         *       "api_key": "sk-...",
         *       "base_url": "https://api.openai.com/v1",
         *       "model": "gpt-4",
         *       "prompt": "Hello, how are you?"
         *     }
         */
        TestPromptRequest: {
            /** @description API key for authentication (provide either api_key OR id, api_key takes preference if both provided) */
            api_key?: string;
            /** @description API base URL (optional when using id) */
            base_url: string;
            /** @description API model ID to look up stored credentials (provide either api_key OR id, api_key takes preference if both provided) */
            id?: string;
            /** @description Model to use for testing */
            model: string;
            /** @description Test prompt (max 30 characters for cost control) */
            prompt: string;
        };
        /**
         * @description Response from testing API connectivity
         * @example {
         *       "error": null,
         *       "response": "Hello! I'm doing well, thank you.",
         *       "success": true
         *     }
         */
        TestPromptResponse: {
            error?: string | null;
            response?: string | null;
            success: boolean;
        };
        /** @enum {string} */
        TokenScope: "scope_token_user" | "scope_token_power_user" | "scope_token_manager" | "scope_token_admin";
        /** @enum {string} */
        TokenStatus: "active" | "inactive";
        UpdateAliasRequest: {
            context_params?: string[] | null;
            filename: string;
            repo: string;
            request_params?: null | components["schemas"]["OAIRequestParams"];
            snapshot?: string | null;
        };
        /**
         * @description Request to update an existing API model configuration
         * @example {
         *       "api_format": "openai",
         *       "api_key": "sk-new-key",
         *       "base_url": "https://api.openai.com/v1",
         *       "models": [
         *         "gpt-4-turbo",
         *         "gpt-3.5-turbo"
         *       ],
         *       "prefix": "openai"
         *     }
         */
        UpdateApiModelRequest: {
            /** @description API format/protocol (required) */
            api_format: components["schemas"]["ApiFormat"];
            /** @description API key for authentication (optional, only update if provided for security) */
            api_key?: string | null;
            /** @description API base URL (required) */
            base_url: string;
            /** @description List of available models (required) */
            models: string[];
            /** @description Optional prefix for model namespacing */
            prefix?: string | null;
        };
        /**
         * @description Request to update an existing API token
         * @example {
         *       "name": "Updated Token Name",
         *       "status": "inactive"
         *     }
         */
        UpdateApiTokenRequest: {
            /**
             * @description New descriptive name for the token (minimum 3 characters)
             * @example Updated Token Name
             */
            name: string;
            /** @description New status for the token (active/inactive) */
            status: components["schemas"]["TokenStatus"];
        };
        /**
         * @description Request to update a setting value
         * @example {
         *       "value": "debug"
         *     }
         */
        UpdateSettingRequest: {
            /** @description New value for the setting (type depends on setting metadata) */
            value: unknown;
        };
        UserAccessRequest: {
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Format: int64
             * @description Unique identifier for the request
             */
            id: number;
            reviewer?: string | null;
            /** @description Current status of the request */
            status: components["schemas"]["UserAccessRequestStatus"];
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
            /** @description User ID (UUID) of the requesting user */
            user_id: string;
            /** @description Username of the requesting user */
            username: string;
        };
        /** @enum {string} */
        UserAccessRequestStatus: "pending" | "approved" | "rejected";
        /**
         * @description Response for checking access request status
         * @example {
         *       "created_at": "2024-01-01T12:00:00Z",
         *       "status": "pending"
         *     }
         */
        UserAccessStatusResponse: {
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /** @description Current status of the request (pending, approved, rejected) */
            status: components["schemas"]["UserAccessRequestStatus"];
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
            /** @description Username of the requesting user */
            username: string;
        };
        UserAlias: {
            alias: string;
            context_params?: string[];
            filename: string;
            /** Format: string */
            repo: string;
            request_params?: components["schemas"]["OAIRequestParams"];
            snapshot: string;
        };
        UserAliasResponse: {
            alias: string;
            context_params: string[];
            filename: string;
            model_params: {
                [key: string]: unknown;
            };
            repo: string;
            request_params: components["schemas"]["OAIRequestParams"];
            snapshot: string;
            source: string;
        };
        UserInfo: {
            /** @example John */
            first_name?: string | null;
            /** @example Doe */
            last_name?: string | null;
            role?: null | components["schemas"]["AppRole"];
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            user_id: string;
            /** @example user@example.com */
            username: string;
        };
        UserListResponse: {
            /** @example resource-abc123def456 */
            client_id: string;
            /** @example true */
            has_next: boolean;
            /** @example false */
            has_previous: boolean;
            /**
             * Format: int32
             * @example 1
             */
            page: number;
            /**
             * Format: int32
             * @example 10
             */
            page_size: number;
            /**
             * Format: int32
             * @example 5
             */
            total_pages: number;
            /**
             * Format: int32
             * @example 45
             */
            total_users: number;
            users: components["schemas"]["UserInfo"][];
        };
        /**
         * @description User authentication response with discriminated union
         * @example {
         *       "auth_status": "logged_in",
         *       "role": "resource_user",
         *       "user_id": "550e8400-e29b-41d4-a716-446655440000",
         *       "username": "user@example.com"
         *     }
         */
        UserResponse: {
            /** @enum {string} */
            auth_status: "logged_out";
        } | (components["schemas"]["UserInfo"] & {
            /** @enum {string} */
            auth_status: "logged_in";
        });
        /** @enum {string} */
        UserScope: "scope_user_user" | "scope_user_power_user" | "scope_user_manager" | "scope_user_admin";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    chatOllamaModel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Chat request in Ollama format */
        requestBody: {
            content: {
                /** @example {
                 *       "messages": [
                 *         {
                 *           "content": "You are a helpful assistant.",
                 *           "role": "system"
                 *         },
                 *         {
                 *           "content": "Hello!",
                 *           "role": "user"
                 *         }
                 *       ],
                 *       "model": "llama2:chat",
                 *       "options": {
                 *         "num_predict": 100,
                 *         "temperature": 0.7
                 *       },
                 *       "stream": true
                 *     } */
                "application/json": components["schemas"]["ChatRequest"];
            };
        };
        responses: {
            /** @description Chat response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-01-20T12:00:00.000000000Z",
                     *       "done": true,
                     *       "done_reason": "stop",
                     *       "eval_count": 10,
                     *       "eval_duration": "-1",
                     *       "load_duration": "-1",
                     *       "message": {
                     *         "content": "Hello! How can I help you today?",
                     *         "images": null,
                     *         "role": "assistant"
                     *       },
                     *       "model": "llama2:chat",
                     *       "prompt_eval_count": 20,
                     *       "prompt_eval_duration": "-1",
                     *       "total_duration": 0
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": "invalid request parameters"
                     *     } */
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": "model not found"
                     *     } */
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": "chat completion error: failed to process request"
                     *     } */
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
        };
    };
    showOllamaModel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Model name to get details for */
        requestBody: {
            content: {
                /** @example {
                 *       "name": "llama2:chat"
                 *     } */
                "application/json": components["schemas"]["ShowRequest"];
            };
        };
        responses: {
            /** @description Model details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "details": {
                     *         "families": null,
                     *         "family": "unknown",
                     *         "format": "gguf",
                     *         "parameter_size": "",
                     *         "parent_model": null,
                     *         "quantization_level": ""
                     *       },
                     *       "license": "",
                     *       "model_info": {},
                     *       "modelfile": "",
                     *       "modified_at": "2024-01-20T12:00:00.000000000Z",
                     *       "parameters": "n_keep: 24\nstop:\n- <|start_header_id|>\n- <|end_header_id|>\n- <|eot_id|>\n",
                     *       "template": "llama2"
                     *     } */
                    "application/json": components["schemas"]["ShowResponse"];
                };
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": "model not found"
                     *     } */
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": "Failed to get model details"
                     *     } */
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
        };
    };
    listOllamaModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of available models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "models": [
                     *         {
                     *           "details": {
                     *             "families": null,
                     *             "family": "unknown",
                     *             "format": "gguf",
                     *             "parameter_size": "",
                     *             "parent_model": null,
                     *             "quantization_level": ""
                     *           },
                     *           "digest": "sha256:abc123",
                     *           "model": "llama2:chat",
                     *           "modified_at": "2024-01-20T12:00:00.000000000Z",
                     *           "size": 0
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["ModelsResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": "Failed to list models"
                     *     } */
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
        };
    };
    listAllAccessRequests: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All requests retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserAccessResponse"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listPendingAccessRequests: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pending requests retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserAccessResponse"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    approveAccessRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Access request ID */
                id: number;
            };
            cookie?: never;
        };
        /** @description Role to assign to the user */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApproveUserAccessRequest"];
            };
        };
        responses: {
            /** @description Request approved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Request not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    rejectAccessRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Access request ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request rejected successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Request not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listApiModels: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API model configurations retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "api_format": "openai",
                     *           "api_key": "sk-****",
                     *           "base_url": "https://api.openai.com/v1",
                     *           "id": "openai-gpt4"
                     *         }
                     *       ],
                     *       "page": 1,
                     *       "page_size": 10,
                     *       "total": 1
                     *     } */
                    "application/json": components["schemas"]["PaginatedApiModelResponse"];
                };
            };
            /** @description Internal server error during API model retrieval */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "database_error",
                     *         "message": "Database connection failed",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    createApiModel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApiModelRequest"];
            };
        };
        responses: {
            /** @description API model created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiModelResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Alias already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getApiFormats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API formats retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         "openai"
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["ApiFormatsResponse"];
                };
            };
            /** @description Internal server error during API format retrieval */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "service_error",
                     *         "message": "Service unavailable",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    fetchApiModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FetchModelsRequest"];
            };
        };
        responses: {
            /** @description Available models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FetchModelsResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    testApiModel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TestPromptRequest"];
            };
        };
        responses: {
            /** @description Test result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestPromptResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    updateApiModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API model alias */
                alias: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateApiModelRequest"];
            };
        };
        responses: {
            /** @description API model updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiModelResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description API model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    deleteApiModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API model alias */
                alias: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API model deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description API model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getApiModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Unique identifier for the API model alias
                 * @example openai-gpt4
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API model configuration retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "api_format": "openai",
                     *       "api_key": "sk-****",
                     *       "base_url": "https://api.openai.com/v1",
                     *       "id": "openai-gpt4",
                     *       "model": "gpt-4"
                     *     } */
                    "application/json": components["schemas"]["ApiModelResponse"];
                };
            };
            /** @description API model with specified ID not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "entity_not_found",
                     *         "message": "API model 'invalid-model' not found",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error during model retrieval */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "database_error",
                     *         "message": "Database query failed",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    requestAccess: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Application client requesting access */
        requestBody: {
            content: {
                /** @example {
                 *       "app_client_id": "my_app_client_123"
                 *     } */
                "application/json": components["schemas"]["AppAccessRequest"];
            };
        };
        responses: {
            /** @description Access granted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "scope": "scope_resource_bodhi-server"
                     *     } */
                    "application/json": components["schemas"]["AppAccessResponse"];
                };
            };
            /** @description Invalid request, application not registered, or incorrect app status */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "app_reg_info_not_found",
                     *         "message": "Application registration information not found",
                     *         "type": "invalid_app_state"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error during access request */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "auth_service_error",
                     *         "message": "Failed to communicate with authorization server",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    completeOAuthFlow: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OAuth callback parameters from authorization server */
        requestBody: {
            content: {
                /** @example {
                 *       "code": "auth_code_123",
                 *       "state": "random_state_456"
                 *     } */
                "application/json": components["schemas"]["AuthCallbackRequest"];
            };
        };
        responses: {
            /** @description OAuth flow completed successfully, user authenticated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "location": "https://app.example.com/dashboard"
                     *     } */
                    "application/json": components["schemas"]["RedirectResponse"];
                };
            };
            /** @description OAuth error, invalid request parameters, or state mismatch */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "oauth_state_mismatch",
                     *         "message": "State parameter mismatch",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error during token exchange */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "oauth_token_exchange_error",
                     *         "message": "Failed to exchange authorization code for tokens",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    initiateOAuthFlow: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": unknown;
            };
        };
        responses: {
            /** @description User already authenticated, home page URL provided */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "location": "https://app.example.com/dashboard"
                     *     } */
                    "application/json": components["schemas"]["RedirectResponse"];
                };
            };
            /** @description User not authenticated, OAuth authorization URL provided */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "location": "https://auth.example.com/auth?client_id=bodhi&redirect_uri=..."
                     *     } */
                    "application/json": components["schemas"]["RedirectResponse"];
                };
            };
            /** @description Internal server error during OAuth initialization */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "app_reg_info_missing",
                     *         "message": "Application not registered with auth server",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getAppInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "ready",
                     *       "version": "0.1.0"
                     *     } */
                    "application/json": components["schemas"]["AppInfo"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "system_error",
                     *         "message": "Failed to retrieve application status",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    logoutUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User logged out successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "location": "https://app.example.com/login"
                     *     } */
                    "application/json": components["schemas"]["RedirectResponse"];
                };
            };
            /** @description Session deletion failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "session_delete_error",
                     *         "message": "Failed to delete user session",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listModelFiles: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Local model files retrieved successfully from cache */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
                     *           "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                     *           "size": 4815162,
                     *           "snapshot_id": "ab12cd34"
                     *         }
                     *       ],
                     *       "page": 1,
                     *       "page_size": 10,
                     *       "total": 1
                     *     } */
                    "application/json": components["schemas"]["PaginatedLocalModelResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listDownloads: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Model download requests retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "created_at": "2024-01-15T10:30:00Z",
                     *           "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
                     *           "id": "download_123",
                     *           "progress": 45.5,
                     *           "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                     *           "status": "downloading",
                     *           "updated_at": "2024-01-15T10:35:00Z"
                     *         }
                     *       ],
                     *       "page": 1,
                     *       "page_size": 10,
                     *       "total": 1
                     *     } */
                    "application/json": components["schemas"]["PaginatedDownloadResponse"];
                };
            };
            /** @description Internal server error during download list retrieval */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "database_error",
                     *         "message": "Database connection failed",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    pullModelFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Model file download specification with repository and filename */
        requestBody: {
            content: {
                /** @example {
                 *       "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                 *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF"
                 *     } */
                "application/json": components["schemas"]["NewDownloadRequest"];
            };
        };
        responses: {
            /** @description Existing download request found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "error": null,
                     *       "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                     *       "status": "pending",
                     *       "updated_at": "2024-11-10T04:52:06.786Z"
                     *     } */
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description Download request created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "error": null,
                     *       "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                     *       "status": "pending",
                     *       "updated_at": "2024-11-10T04:52:06.786Z"
                     *     } */
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description File already exists or invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "pull_error-file_already_exists",
                     *         "message": "file 'mistral-7b-instruct-v0.1.Q8_0.gguf' already exists in repo 'TheBloke/Mistral-7B-Instruct-v0.1-GGUF' with snapshot 'main'",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "internal_error",
                     *         "message": "Internal server error occurred",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    pullModelByAlias: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Predefined model alias. Available aliases include popular models like llama2:chat, mistral:instruct, phi3:mini, etc. Use the /models endpoint to see all available aliases.
                 * @example llama2:chat
                 */
                alias: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Existing download request found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "error": null,
                     *       "filename": "llama-2-7b-chat.Q8_0.gguf",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                     *       "status": "pending",
                     *       "updated_at": "2024-11-10T04:52:06.786Z"
                     *     } */
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description Download request created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "error": null,
                     *       "filename": "llama-2-7b-chat.Q8_0.gguf",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                     *       "status": "pending",
                     *       "updated_at": "2024-11-10T04:52:06.786Z"
                     *     } */
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description File already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "pull_error-file_already_exists",
                     *         "message": "file 'llama-2-7b-chat.Q8_0.gguf' already exists in repo 'TheBloke/Llama-2-7B-Chat-GGUF' with snapshot 'main'",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Alias not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "remote_model_not_found_error",
                     *         "message": "remote model alias 'invalid:model' not found, check your alias and try again",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "internal_error",
                     *         "message": "Internal server error occurred",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getDownloadStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Unique identifier of the download request (UUID format)
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Download request found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "error": null,
                     *       "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                     *       "status": "completed",
                     *       "updated_at": "2024-01-20T12:00:10Z"
                     *     } */
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description Download request not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "item_not_found",
                     *         "message": "item '550e8400-e29b-41d4-a716-446655440000' of type 'download_requests' not found in db",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "internal_error",
                     *         "message": "Internal server error occurred",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listAllModels: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of model aliases retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "alias": "llama2:chat",
                     *           "context_params": [
                     *             "--ctx_size",
                     *             "4096"
                     *           ],
                     *           "filename": "llama-2-7b-chat.Q4_K_M.gguf",
                     *           "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                     *           "request_params": {
                     *             "temperature": 0.7,
                     *             "top_p": 0.95
                     *           },
                     *           "snapshot": "abc123",
                     *           "source": "user"
                     *         },
                     *         {
                     *           "alias": "TheBloke/Llama-2-7B-Chat-GGUF:Q4_K_M",
                     *           "filename": "llama-2-7b-chat.Q4_K_M.gguf",
                     *           "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                     *           "snapshot": "abc123",
                     *           "source": "model"
                     *         },
                     *         {
                     *           "api_format": "openai",
                     *           "base_url": "https://api.openai.com/v1",
                     *           "created_at": "2024-01-01T00:00:00Z",
                     *           "id": "openai-gpt4",
                     *           "models": [
                     *             "gpt-4",
                     *             "gpt-3.5-turbo"
                     *           ],
                     *           "source": "api",
                     *           "updated_at": "2024-01-01T00:00:00Z"
                     *         }
                     *       ],
                     *       "page": 1,
                     *       "page_size": 10,
                     *       "total": 3
                     *     } */
                    "application/json": components["schemas"]["PaginatedAliasResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    createAlias: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAliasRequest"];
            };
        };
        responses: {
            /** @description Alias created succesfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAliasResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getAlias: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Alias identifier for the model */
                alias: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Model alias details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "alias": "llama2:chat",
                     *       "chat_template": "llama2",
                     *       "context_params": {
                     *         "n_keep": 24,
                     *         "stop": [
                     *           "<|end_of_turn|>"
                     *         ]
                     *       },
                     *       "filename": "llama-2-7b-chat.Q8_0.gguf",
                     *       "model_params": {},
                     *       "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                     *       "request_params": {
                     *         "frequency_penalty": 0,
                     *         "presence_penalty": 0,
                     *         "temperature": 0.7,
                     *         "top_p": 1
                     *       },
                     *       "snapshot": "sha256:abc123",
                     *       "source": "config"
                     *     } */
                    "application/json": components["schemas"]["UserAliasResponse"];
                };
            };
            /** @description Alias not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "alias_not_found",
                     *         "message": "Alias 'unknown:model' not found",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    updateAlias: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Alias identifier
                 * @example llama--3
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAliasRequest"];
            };
        };
        responses: {
            /** @description Alias updated succesfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAliasResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application settings retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "current_value": "info",
                     *         "default_value": "warn",
                     *         "key": "BODHI_LOG_LEVEL",
                     *         "metadata": {
                     *           "options": [
                     *             "error",
                     *             "warn",
                     *             "info",
                     *             "debug",
                     *             "trace"
                     *           ],
                     *           "type": "option"
                     *         },
                     *         "source": "environment"
                     *       },
                     *       {
                     *         "current_value": 1135,
                     *         "default_value": 1135,
                     *         "key": "BODHI_PORT",
                     *         "metadata": {
                     *           "max": 65535,
                     *           "min": 1025,
                     *           "type": "number"
                     *         },
                     *         "source": "default"
                     *       }
                     *     ] */
                    "application/json": components["schemas"]["SettingInfo"][];
                };
            };
            /** @description Unauthorized - User is not an admin */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "settings_error-unauthorized",
                     *         "message": "Only administrators can view settings",
                     *         "type": "unauthorized_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    updateSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Setting key identifier (e.g., BODHI_LOG_LEVEL, BODHI_PORT)
                 * @example BODHI_LOG_LEVEL
                 */
                key: string;
            };
            cookie?: never;
        };
        /** @description New setting value */
        requestBody: {
            content: {
                /** @example {
                 *       "value": "debug"
                 *     } */
                "application/json": {
                    /** @description New value for the setting (type depends on setting metadata) */
                    value: unknown;
                };
            };
        };
        responses: {
            /** @description Setting updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "current_value": "debug",
                     *       "default_value": "warn",
                     *       "key": "BODHI_LOG_LEVEL",
                     *       "metadata": {
                     *         "options": [
                     *           "error",
                     *           "warn",
                     *           "info",
                     *           "debug",
                     *           "trace"
                     *         ],
                     *         "type": "option"
                     *       },
                     *       "source": "settings_file"
                     *     } */
                    "application/json": components["schemas"]["SettingInfo"];
                };
            };
            /** @description Invalid setting or value */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "settings_error-validation_error",
                     *         "message": "Invalid value for setting: value out of range",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Setting not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "settings_error-invalid_setting",
                     *         "message": "Setting not found: INVALID_KEY",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    deleteSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Setting key identifier to reset to default value
                 * @example BODHI_LOG_LEVEL
                 */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Setting reset to default successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "current_value": "warn",
                     *       "default_value": "warn",
                     *       "key": "BODHI_LOG_LEVEL",
                     *       "metadata": {
                     *         "options": [
                     *           "error",
                     *           "warn",
                     *           "info",
                     *           "debug",
                     *           "trace"
                     *         ],
                     *         "type": "option"
                     *       },
                     *       "source": "default"
                     *     } */
                    "application/json": components["schemas"]["SettingInfo"];
                };
            };
            /** @description Setting not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "settings_error-not_found",
                     *         "message": "Setting not found: INVALID_KEY",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    setupApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Application setup configuration */
        requestBody: {
            content: {
                /** @example {
                 *       "description": "My personal AI server",
                 *       "name": "My Bodhi Server"
                 *     } */
                "application/json": components["schemas"]["SetupRequest"];
            };
        };
        responses: {
            /** @description Application setup completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "resource-admin"
                     *     } */
                    "application/json": components["schemas"]["SetupResponse"];
                };
            };
            /** @description Invalid request or application already setup */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "validation_error",
                     *         "message": "Server name must be at least 10 characters long",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error during setup */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "auth_service_error",
                     *         "message": "Failed to register with auth server",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listApiTokens: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of API tokens */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "created_at": "2024-11-10T04:52:06.786Z",
                     *           "id": "550e8400-e29b-41d4-a716-446655440000",
                     *           "name": "Development Token",
                     *           "status": "active",
                     *           "token_id": "jwt-token-id-1",
                     *           "updated_at": "2024-11-10T04:52:06.786Z",
                     *           "user_id": "user@email.com"
                     *         },
                     *         {
                     *           "created_at": "2024-11-10T04:52:06.786Z",
                     *           "id": "660e8400-e29b-41d4-a716-446655440000",
                     *           "name": "Test Token",
                     *           "status": "inactive",
                     *           "token_id": "jwt-token-id-2",
                     *           "updated_at": "2024-11-10T04:52:06.786Z",
                     *           "user_id": "user@email.com"
                     *         }
                     *       ],
                     *       "page": 1,
                     *       "page_size": 10,
                     *       "total": 2
                     *     } */
                    "application/json": components["schemas"]["PaginatedApiTokenResponse"];
                };
            };
            /** @description Unauthorized - Token missing or invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "api_token_error-token_missing",
                     *         "message": "access token is not present in request",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "internal_error",
                     *         "message": "Internal server error occurred",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    createApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API token creation parameters */
        requestBody: {
            content: {
                /** @example {
                 *       "name": "My Integration Token",
                 *       "scopes": [
                 *         "scope_token_user"
                 *       ]
                 *     } */
                "application/json": components["schemas"]["CreateApiTokenRequest"];
            };
        };
        responses: {
            /** @description API token created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "offline_token": "bapp_1234567890abcdef"
                     *     } */
                    "application/json": components["schemas"]["ApiTokenResponse"];
                };
            };
            /** @description Invalid request parameters or token name already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "validation_error",
                     *         "message": "Token name must be at least 3 characters long",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error during token creation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "token_generation_error",
                     *         "message": "Failed to generate secure token",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    updateApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Unique identifier of the API token to update
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                id: string;
            };
            cookie?: never;
        };
        /** @description Token update request */
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Updated Token Name",
                 *       "status": "inactive"
                 *     } */
                "application/json": components["schemas"]["UpdateApiTokenRequest"];
            };
        };
        responses: {
            /** @description Token updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "name": "Updated Token Name",
                     *       "status": "inactive",
                     *       "token_id": "jwt-token-id-1",
                     *       "updated_at": "2024-11-10T04:52:06.786Z",
                     *       "user_id": "auth0|123456789"
                     *     } */
                    "application/json": components["schemas"]["ApiToken"];
                };
            };
            /** @description Unauthorized - Token missing or invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "api_token_error-token_missing",
                     *         "message": "access token is not present in request",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Token not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "entity_error-not_found",
                     *         "message": "Token not found",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "internal_error",
                     *         "message": "Internal server error occurred",
                     *         "type": "internal_server_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current user information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "auth_status": "logged_in",
                     *       "role": "resource_admin",
                     *       "user_id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "username": "user@example.com"
                     *     } */
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Authentication error or invalid token */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "token_error-invalid_token",
                     *         "message": "token is invalid",
                     *         "type": "authentication_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    requestUserAccess: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Access request created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Pending request already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description User already has role */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getUserAccessStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request status retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAccessStatusResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Request not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listUsers: {
        parameters: {
            query?: {
                /**
                 * @description Page number (1-based)
                 * @example 1
                 */
                page?: number;
                /**
                 * @description Number of users per page
                 * @example 10
                 */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    removeUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID to remove */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    changeUserRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID to change role for */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangeRoleRequest"];
            };
        };
        responses: {
            /** @description Role changed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application is healthy and fully operational */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "pong"
                     *     } */
                    "application/json": components["schemas"]["PingResponse"];
                };
            };
        };
    };
    pingServer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Server is responding normally */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "pong"
                     *     } */
                    "application/json": components["schemas"]["PingResponse"];
                };
            };
        };
    };
    createChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "max_tokens": 100,
                 *       "messages": [
                 *         {
                 *           "content": "You are a helpful assistant.",
                 *           "role": "system"
                 *         },
                 *         {
                 *           "content": "Hello!",
                 *           "role": "user"
                 *         }
                 *       ],
                 *       "model": "llama2:chat",
                 *       "stream": false,
                 *       "temperature": 0.7
                 *     } */
                "application/json": unknown;
            };
        };
        responses: {
            /** @description Chat completion response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "choices": [
                     *         {
                     *           "finish_reason": "stop",
                     *           "index": 0,
                     *           "message": {
                     *             "content": "Hello! How can I help you today?",
                     *             "role": "assistant"
                     *           }
                     *         }
                     *       ],
                     *       "created": 1677610602,
                     *       "id": "chatcmpl-123",
                     *       "model": "llama2:chat",
                     *       "object": "chat.completion",
                     *       "usage": {
                     *         "completion_tokens": 10,
                     *         "prompt_tokens": 20,
                     *         "total_tokens": 30
                     *       }
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Chat completion stream, the status is 200, using 201 to avoid OpenAPI format limitation. */
            201: {
                headers: {
                    /** @description No-cache directive */
                    "Cache-Control"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "choices": [
                     *         {
                     *           "delta": {
                     *             "content": "Hello"
                     *           },
                     *           "finish_reason": null,
                     *           "index": 0
                     *         }
                     *       ],
                     *       "created": 1694268190,
                     *       "id": "chatcmpl-123",
                     *       "model": "llama2:chat",
                     *       "object": "chat.completion.chunk"
                     *     } */
                    "text/event-stream": unknown;
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "model_not_found",
                     *         "message": "Invalid model specified",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Invalid authentication */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "invalid_api_key",
                     *         "message": "Invalid authentication token",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of available models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "created": 1677610602,
                     *           "id": "llama2:chat",
                     *           "object": "model",
                     *           "owned_by": "bodhi"
                     *         },
                     *         {
                     *           "created": 1677610602,
                     *           "id": "mistral:instruct",
                     *           "object": "model",
                     *           "owned_by": "bodhi"
                     *         }
                     *       ],
                     *       "object": "list"
                     *     } */
                    "application/json": components["schemas"]["ListModelResponse"];
                };
            };
            /** @description Invalid authentication */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "invalid_api_key",
                     *         "message": "Invalid authentication token",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Model identifier - can be user alias (e.g., 'llama2:chat'), model alias, or API provider alias
                 * @example llama2:chat
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Model details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created": 1677610602,
                     *       "id": "llama2:chat",
                     *       "object": "model",
                     *       "owned_by": "system"
                     *     } */
                    "application/json": components["schemas"]["ModelResponse"];
                };
            };
            /** @description Invalid authentication */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "invalid_api_key",
                     *         "message": "Invalid authentication token",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "model_not_found",
                     *         "message": "Model 'unknown:model' not found",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
}
