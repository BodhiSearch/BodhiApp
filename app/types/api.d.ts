/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/api/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Chat with a model using Ollama format */
        post: operations["chatOllamaModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/show": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get detailed information about a model in Ollama format */
        post: operations["showOllamaModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available models in Ollama format */
        get: operations["listOllamaModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/chat_templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available chat templates (both built-in and from repositories) */
        get: operations["listChatTemplates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAppInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout the current user by destroying their session */
        post: operations["logoutUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available model files in GGUF format from HuggingFace cache */
        get: operations["listModelFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles/pull": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all model download requests */
        get: operations["listDownloads"];
        put?: never;
        /** Start a new model file download */
        post: operations["pullModelFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles/pull/{alias}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start a model file download using a predefined alias */
        post: operations["pullModelByAlias"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles/pull/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the status of a specific download request */
        get: operations["getDownloadStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List configured model aliases */
        get: operations["listModelAliases"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/models/{alias}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details for a specific model alias */
        get: operations["getAlias"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all application settings */
        get: operations["listSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/settings/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a specific setting */
        put: operations["updateSetting"];
        post?: never;
        /** Reset a setting to its default value */
        delete: operations["deleteSetting"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["setupApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all API tokens for the current user */
        get: operations["listApiTokens"];
        put?: never;
        /** Create a new API token */
        post: operations["createApiToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing API token */
        put: operations["updateApiToken"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the currently logged in user */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Simple health check endpoint */
        get: operations["pingServer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a chat completion */
        post: operations["createChatCompletion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available models */
        get: operations["listModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        AliasResponse: {
            alias: string;
            chat_template: string;
            context_params: components["schemas"]["GptContextParams"];
            filename: string;
            model_params: {
                [key: string]: unknown;
            };
            repo: string;
            request_params: components["schemas"]["OAIRequestParams"];
            snapshot: string;
            source: string;
        };
        ApiToken: {
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            created_at: string;
            id: string;
            name: string;
            status: components["schemas"]["TokenStatus"];
            token_hash: string;
            token_id: string;
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            updated_at: string;
            user_id: string;
        };
        ApiTokenResponse: {
            /** @description Offline token that can be used as API Token */
            offline_token: string;
        };
        /**
         * @description Application information and status
         * @example {
         *       "authz": true,
         *       "status": "ready",
         *       "version": "0.1.0"
         *     }
         */
        AppInfo: {
            /** @description Whether authentication is enabled */
            authz: boolean;
            /** @description Current application status */
            status: components["schemas"]["AppStatus"];
            /** @description Application version */
            version: string;
        };
        /**
         * @example ready
         * @enum {string}
         */
        AppStatus: "setup" | "ready" | "resource-admin";
        ChatRequest: {
            format?: string | null;
            keep_alive?: null | components["schemas"]["Duration"];
            messages: components["schemas"]["Message"][];
            model: string;
            options?: null | components["schemas"]["Options"];
            stream?: boolean | null;
        };
        /**
         * @description Chat template identifier for built-in templates
         * @enum {string}
         */
        ChatTemplateId: "llama3" | "llama2" | "llama2-legacy" | "phi3" | "gemma" | "deepseek" | "command-r" | "openchat" | "tinyllama";
        /** @description Chat template type that can be either built-in or from a repository */
        ChatTemplateType: "Embedded" | {
            /** @description Built-in chat template using Id */
            Id: components["schemas"]["ChatTemplateId"];
        } | {
            /** @description Custom chat template from a repository */
            Repo: components["schemas"]["Repo"];
        };
        /**
         * @description Request to create a new API token
         * @example {
         *       "name": "My API Token"
         *     }
         */
        CreateApiTokenRequest: {
            /** @description Optional name for the API token */
            name?: string | null;
        };
        DownloadRequest: {
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            created_at: string;
            error?: string | null;
            filename: string;
            id: string;
            repo: string;
            status: components["schemas"]["DownloadStatus"];
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            updated_at: string;
        };
        /** @enum {string} */
        DownloadStatus: "pending" | "completed" | "error";
        Duration: string;
        ErrorBody: {
            code?: string | null;
            message: string;
            param?: string | null;
            type: string;
        };
        GptContextParams: {
            /** Format: int32 */
            n_ctx?: number | null;
            /** Format: int32 */
            n_keep?: number | null;
            /** Format: int32 */
            n_parallel?: number | null;
            /** Format: int32 */
            n_predict?: number | null;
            /** Format: int32 */
            n_seed?: number | null;
            /** Format: int32 */
            n_threads?: number | null;
        };
        ListModelResponseWrapper: {
            data: {
                /**
                 * Format: int32
                 * @description The Unix timestamp (in seconds) when the model was created.
                 */
                created: number;
                /** @description The model identifier, which can be referenced in the API endpoints. */
                id: string;
                /** @description The object type, which is always "model". */
                object: string;
                /** @description The organization that owns the model. */
                owned_by: string;
            }[];
            object: string;
        };
        LocalModelResponse: {
            filename: string;
            model_params: {
                [key: string]: unknown;
            };
            repo: string;
            /** Format: int64 */
            size?: number | null;
            snapshot: string;
        };
        Message: {
            content: string;
            images?: string[] | null;
            role: string;
        };
        Model: {
            details: components["schemas"]["ModelDetails"];
            digest: string;
            model: string;
            /** Format: int32 */
            modified_at: number;
            /** Format: int64 */
            size: number;
        };
        ModelDetails: {
            families?: string[] | null;
            family: string;
            format: string;
            parameter_size: string;
            parent_model?: string | null;
            quantization_level: string;
        };
        ModelsResponse: {
            models: components["schemas"]["Model"][];
        };
        /**
         * @description Request to pull a model file from HuggingFace
         * @example {
         *       "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
         *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF"
         *     }
         */
        NewDownloadRequest: {
            /** @description Model file name to pull */
            filename: string;
            /** @description HuggingFace repository name */
            repo: string;
        };
        OAIRequestParams: {
            /** Format: float */
            frequency_penalty?: number | null;
            /** Format: int32 */
            max_tokens?: number | null;
            /** Format: float */
            presence_penalty?: number | null;
            /** Format: int64 */
            seed?: number | null;
            stop?: string[];
            /** Format: float */
            temperature?: number | null;
            /** Format: float */
            top_p?: number | null;
            user?: string | null;
        };
        OllamaError: {
            error: string;
        };
        OpenAIApiError: {
            error: components["schemas"]["ErrorBody"];
        };
        Options: {
            f16_kv?: boolean | null;
            /** Format: float */
            frequency_penalty?: number | null;
            logits_all?: boolean | null;
            low_vram?: boolean | null;
            /** Format: int32 */
            main_gpu?: number | null;
            /** Format: float */
            mirostat?: number | null;
            /** Format: float */
            mirostat_eta?: number | null;
            /** Format: float */
            mirostat_tau?: number | null;
            /** Format: int32 */
            num_batch?: number | null;
            /** Format: int32 */
            num_ctx?: number | null;
            /** Format: int32 */
            num_gpu?: number | null;
            /** Format: int32 */
            num_keep?: number | null;
            /** Format: int32 */
            num_predict?: number | null;
            /** Format: int32 */
            num_thread?: number | null;
            numa?: boolean | null;
            penalize_newline?: boolean | null;
            /** Format: float */
            presence_penalty?: number | null;
            /** Format: int32 */
            repeat_last_n?: number | null;
            /** Format: float */
            repeat_penalty?: number | null;
            /** Format: int64 */
            seed?: number | null;
            stop?: string[] | null;
            /** Format: float */
            temperature?: number | null;
            /** Format: float */
            tfs_z?: number | null;
            /** Format: int32 */
            top_k?: number | null;
            /** Format: float */
            top_p?: number | null;
            /** Format: float */
            typical_p?: number | null;
            use_mlock?: boolean | null;
            use_mmap?: boolean | null;
            vocab_only?: boolean | null;
        };
        PaginatedResponse_AliasResponse: {
            data: {
                alias: string;
                chat_template: string;
                context_params: components["schemas"]["GptContextParams"];
                filename: string;
                model_params: {
                    [key: string]: unknown;
                };
                repo: string;
                request_params: components["schemas"]["OAIRequestParams"];
                snapshot: string;
                source: string;
            }[];
            page: number;
            page_size: number;
            total: number;
        };
        PaginatedResponse_ApiToken: {
            data: {
                /**
                 * Format: date-time
                 * @example 2024-11-10T04:52:06.786Z
                 */
                created_at: string;
                id: string;
                name: string;
                status: components["schemas"]["TokenStatus"];
                token_hash: string;
                token_id: string;
                /**
                 * Format: date-time
                 * @example 2024-11-10T04:52:06.786Z
                 */
                updated_at: string;
                user_id: string;
            }[];
            page: number;
            page_size: number;
            total: number;
        };
        PaginatedResponse_DownloadRequest: {
            data: {
                /**
                 * Format: date-time
                 * @example 2024-11-10T04:52:06.786Z
                 */
                created_at: string;
                error?: string | null;
                filename: string;
                id: string;
                repo: string;
                status: components["schemas"]["DownloadStatus"];
                /**
                 * Format: date-time
                 * @example 2024-11-10T04:52:06.786Z
                 */
                updated_at: string;
            }[];
            page: number;
            page_size: number;
            total: number;
        };
        PaginatedResponse_LocalModelResponse: {
            data: {
                filename: string;
                model_params: {
                    [key: string]: unknown;
                };
                repo: string;
                /** Format: int64 */
                size?: number | null;
                snapshot: string;
            }[];
            page: number;
            page_size: number;
            total: number;
        };
        /** @description Response to the ping endpoint */
        PingResponse: {
            /** @description always returns "pong" */
            message: string;
        };
        Repo: {
            name: string;
            user: string;
        };
        SettingInfo: {
            current_value: unknown;
            default_value: unknown;
            key: string;
            metadata: components["schemas"]["SettingMetadata"];
            source: components["schemas"]["SettingSource"];
        };
        SettingMetadata: {
            /** @enum {string} */
            type: "string";
        } | {
            /** Format: int64 */
            max: number;
            /** Format: int64 */
            min: number;
            /** @enum {string} */
            type: "number";
        } | {
            /** @enum {string} */
            type: "boolean";
        } | {
            options: string[];
            /** @enum {string} */
            type: "option";
        };
        /** @enum {string} */
        SettingSource: "system" | "command_line" | "environment" | "settings_file" | "default";
        /**
         * @description Request to setup the application in authenticated or non-authenticated mode
         * @example {
         *       "authz": true
         *     }
         */
        SetupRequest: {
            /** @description Whether to enable authentication
             *     - true: Setup app in authenticated mode with role-based access
             *     - false: Setup app in non-authenticated mode for open access */
            authz: boolean;
        };
        /**
         * @description Response containing the updated application status after setup
         * @example {
         *       "status": "resource-admin"
         *     }
         */
        SetupResponse: {
            /** @description New application status after setup
             *     - resource-admin: When setup in authenticated mode
             *     - ready: When setup in non-authenticated mode */
            status: components["schemas"]["AppStatus"];
        };
        ShowRequest: {
            name: string;
        };
        ShowResponse: {
            details: components["schemas"]["ModelDetails"];
            license: string;
            model_info: {
                [key: string]: unknown;
            };
            modelfile: string;
            /** Format: int32 */
            modified_at: number;
            parameters: string;
            template: string;
        };
        /** @enum {string} */
        TokenStatus: "active" | "inactive";
        /**
         * @description Request to update an existing API token
         * @example {
         *       "name": "Updated Token Name",
         *       "status": "inactive"
         *     }
         */
        UpdateApiTokenRequest: {
            /** @description New name for the token */
            name: string;
            /** @description New status for the token (active/inactive) */
            status: components["schemas"]["TokenStatus"];
        };
        /**
         * @description Request to update a setting value
         * @example {
         *       "value": "debug"
         *     }
         */
        UpdateSettingRequest: {
            value: unknown;
        };
        /**
         * @description Information about the currently logged in user
         * @example {
         *       "email": "user@example.com",
         *       "logged_in": true,
         *       "roles": [
         *         "admin",
         *         "user"
         *       ]
         *     }
         */
        UserInfo: {
            /** @description User's email address */
            email?: string | null;
            /** @description If user is logged in */
            logged_in: boolean;
            /** @description List of roles assigned to the user */
            roles: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    chatOllamaModel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Chat request in Ollama format */
        requestBody: {
            content: {
                /** @example {
                 *       "messages": [
                 *         {
                 *           "content": "You are a helpful assistant.",
                 *           "role": "system"
                 *         },
                 *         {
                 *           "content": "Hello!",
                 *           "role": "user"
                 *         }
                 *       ],
                 *       "model": "llama2:chat",
                 *       "options": {
                 *         "num_predict": 100,
                 *         "temperature": 0.7
                 *       },
                 *       "stream": true
                 *     } */
                "application/json": components["schemas"]["ChatRequest"];
            };
        };
        responses: {
            /** @description Chat response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
        };
    };
    showOllamaModel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Model name to get details for */
        requestBody: {
            content: {
                /** @example {
                 *       "name": "llama2:chat"
                 *     } */
                "application/json": components["schemas"]["ShowRequest"];
            };
        };
        responses: {
            /** @description Model details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShowResponse"];
                };
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
        };
    };
    listOllamaModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of available models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelsResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
        };
    };
    listChatTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of available chat templates */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatTemplateType"][];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getAppInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the status information about the Application */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppInfo"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    logoutUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Logout successful, redirects to login page */
            200: {
                headers: {
                    /** @description Frontend login page URL */
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Session deletion failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listModelFiles: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: number;
                /** @description Number of items per page (max 100) */
                page_size?: number;
                /** @description Field to sort by (repo, filename, size, updated_at, snapshot) */
                sort?: string | null;
                /** @description Sort order (asc or desc) */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of supported model files from local HuggingFace cache folder */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_LocalModelResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listDownloads: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: number;
                /** @description Number of items per page (max 100) */
                page_size?: number;
                /** @description Field to sort by (repo, filename, size, updated_at, snapshot) */
                sort?: string | null;
                /** @description Sort order (asc or desc) */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of download requests */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_DownloadRequest"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    pullModelFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Model file download request */
        requestBody: {
            content: {
                /** @example {
                 *       "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                 *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF"
                 *     } */
                "application/json": components["schemas"]["NewDownloadRequest"];
            };
        };
        responses: {
            /** @description Existing download request found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description Download request created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description File already exists or invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    pullModelByAlias: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Available model aliases:
                 *     - llama3:instruct - Meta Llama 3 8B Instruct
                 *     - llama3:70b-instruct - Meta Llama 3 70B Instruct
                 *     - llama2:chat - Llama 2 7B Chat
                 *     - llama2:13b-chat - Llama 2 13B Chat
                 *     - llama2:70b-chat - Llama 2 70B Chat
                 *     - phi3:mini - Phi 3 Mini
                 *     - mistral:instruct - Mistral 7B Instruct
                 *     - mixtral:instruct - Mixtral 8x7B Instruct
                 *     - gemma:instruct - Gemma 7B Instruct
                 *     - gemma:7b-instruct-v1.1-q8_0 - Gemma 1.1 7B Instruct
                 * @example llama2:chat
                 */
                alias: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Existing download request found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description Download request created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description File already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Alias not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getDownloadStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Download request identifier
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Download request found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description Download request not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listModelAliases: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: number;
                /** @description Number of items per page (max 100) */
                page_size?: number;
                /** @description Field to sort by (repo, filename, size, updated_at, snapshot) */
                sort?: string | null;
                /** @description Sort order (asc or desc) */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of configured model aliases */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_AliasResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getAlias: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Alias identifier for the model */
                alias: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Model alias details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AliasResponse"];
                };
            };
            /** @description Alias not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of application settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingInfo"][];
                };
            };
            /** @description Unauthorized - User is not an admin */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    updateSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Setting key to update */
                key: string;
            };
            cookie?: never;
        };
        /** @description New setting value */
        requestBody: {
            content: {
                /** @example {
                 *       "value": "debug"
                 *     } */
                "application/json": {
                    value: unknown;
                };
            };
        };
        responses: {
            /** @description Setting updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingInfo"];
                };
            };
            /** @description Invalid setting or value */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Setting not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    deleteSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Setting key to reset */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Setting reset to default successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingInfo"];
                };
            };
            /** @description Setting not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    setupApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetupRequest"];
            };
        };
        responses: {
            /** @description Application setup successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetupResponse"];
                };
            };
            /** @description Application is already setup */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listApiTokens: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: number;
                /** @description Number of items per page (max 100) */
                page_size?: number;
                /** @description Field to sort by (repo, filename, size, updated_at, snapshot) */
                sort?: string | null;
                /** @description Sort order (asc or desc) */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of API tokens */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_ApiToken"];
                };
            };
            /** @description Unauthorized - Token missing or invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    createApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApiTokenRequest"];
            };
        };
        responses: {
            /** @description API token created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiTokenResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    updateApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Token identifier
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                id: string;
            };
            cookie?: never;
        };
        /** @description Token update request */
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Updated Token Name",
                 *       "status": "inactive"
                 *     } */
                "application/json": components["schemas"]["UpdateApiTokenRequest"];
            };
        };
        responses: {
            /** @description Token updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiToken"];
                };
            };
            /** @description Unauthorized - Token missing or invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Token not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns current user information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfo"];
                };
            };
            /** @description Error in extracting user info from token */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    pingServer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Server is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PingResponse"];
                };
            };
        };
    };
    createChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "max_tokens": 100,
                 *       "messages": [
                 *         {
                 *           "content": "You are a helpful assistant.",
                 *           "role": "system"
                 *         },
                 *         {
                 *           "content": "Hello!",
                 *           "role": "user"
                 *         }
                 *       ],
                 *       "model": "llama2:chat",
                 *       "stream": false,
                 *       "temperature": 0.7
                 *     } */
                "application/json": unknown;
            };
        };
        responses: {
            /** @description Chat completion response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Chat completion stream, the status is 200, using 201 to avoid OpenAPI format limitation. */
            201: {
                headers: {
                    /** @description No-cache directive */
                    "Cache-Control"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": unknown;
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Invalid authentication */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of available models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListModelResponseWrapper"];
                };
            };
            /** @description Invalid authentication */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
}
