/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chat with Model (Ollama Compatible)
         * @description Creates a chat completion using Ollama API format. Supports both streaming and non-streaming responses with Ollama-specific options and response format.
         */
        post: operations["chatOllamaModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/show": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Show Model Details (Ollama Compatible)
         * @description Retrieves detailed information about a specific model in Ollama API compatible format. Includes model parameters, template, license, and configuration details.
         */
        post: operations["showOllamaModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Available Models (Ollama Compatible)
         * @description Returns a list of all available models in Ollama API compatible format. Includes model metadata such as size, modification time, and format details.
         */
        get: operations["listOllamaModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/access-requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List All Access Requests
         * @description List all access requests regardless of status. Requires manager or admin role.
         */
        get: operations["listAllAccessRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/access-requests/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Pending Access Requests
         * @description List all pending access requests. Requires manager or admin role.
         */
        get: operations["listPendingAccessRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/access-requests/{id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve Access Request
         * @description Approve an access request and assign a role. Requires manager or admin role.
         */
        post: operations["approveAccessRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/access-requests/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reject Access Request
         * @description Reject an access request. Requires manager or admin role.
         */
        post: operations["rejectAccessRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/api-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List API Model Configurations
         * @description Retrieves paginated list of all configured API model aliases including external API formats like OpenAI, etc. API keys are masked in list view for security.
         */
        get: operations["listApiModels"];
        put?: never;
        /** Create a new API model configuration */
        post: operations["createApiModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/api-models/api-formats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available API Formats
         * @description Retrieves list of supported API formats/protocols (e.g., OpenAI).
         */
        get: operations["getApiFormats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/api-models/fetch-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fetch available models from the API */
        post: operations["fetchApiModels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/api-models/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test API connectivity with a prompt */
        post: operations["testApiModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/api-models/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API Model Configuration
         * @description Retrieves detailed configuration for a specific API model alias by ID. API keys are masked for security unless explicitly requested.
         */
        get: operations["getApiModel"];
        /** Update an existing API model configuration */
        put: operations["updateApiModel"];
        post?: never;
        /** Delete an API model configuration */
        delete: operations["deleteApiModel"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/apps/request-access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request Resource Access
         * @description Requests access permissions for an application client to access this resource server's protected resources.
         */
        post: operations["requestAccess"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/auth/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete OAuth Authentication
         * @description Completes the OAuth authentication flow by exchanging authorization code for tokens and establishing user session.
         */
        post: operations["completeOAuthFlow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/auth/initiate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Initiate OAuth Authentication
         * @description Initiates OAuth authentication flow. Returns OAuth authorization URL for unauthenticated users or home page URL for already authenticated users.
         */
        post: operations["initiateOAuthFlow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Application Information
         * @description Retrieves current application version and status information including setup state
         */
        get: operations["getAppInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout User
         * @description Logs out the current user by destroying their session and returns redirect URL to login page
         */
        post: operations["logoutUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Local Model Files
         * @description Retrieves paginated list of GGUF model files available in the local HuggingFace cache directory with metadata including repository, filename, snapshot ID, and file size.
         */
        get: operations["listModelFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles/pull": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Model Download Requests
         * @description Retrieves paginated list of all model download requests with their current status, progress, and metadata. Includes both active downloads and completed/failed requests.
         */
        get: operations["listDownloads"];
        put?: never;
        /**
         * Start Model File Download
         * @description Initiates a new model file download from HuggingFace repository. Creates a download request that can be tracked for progress. Returns existing request if download is already in progress.
         */
        post: operations["pullModelFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles/pull/{alias}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Download Model by Alias
         * @description Initiates a model download using a predefined alias that maps to specific repository and file combinations. This provides a convenient way to download popular models without specifying exact repository details.
         */
        post: operations["pullModelByAlias"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/modelfiles/pull/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Download Request Status
         * @description Retrieves the current status and progress information for a specific model download request. Includes download progress, error details, and completion status.
         */
        get: operations["getDownloadStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List All Model Aliases
         * @description Retrieves paginated list of all configured model aliases including user-defined aliases, model aliases, and API provider aliases with filtering and sorting options.
         */
        get: operations["listAllModels"];
        put?: never;
        /** Create Alias */
        post: operations["createAlias"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/models/{alias}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details for a specific model alias */
        get: operations["getAlias"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/models/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Alias */
        put: operations["updateAlias"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Application Settings
         * @description Retrieves all configurable application settings with their current values, default values, sources, and metadata including validation constraints.
         */
        get: operations["listSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/settings/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Application Setting
         * @description Updates the value of a specific application setting. The new value is validated against the setting's constraints and persisted to the settings file.
         */
        put: operations["updateSetting"];
        post?: never;
        /**
         * Reset Setting to Default
         * @description Resets a specific application setting to its default value by removing any custom overrides. Some critical settings like BODHI_HOME cannot be reset.
         */
        delete: operations["deleteSetting"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup Application
         * @description Initializes the application with authentication configuration and registers with the auth server
         */
        post: operations["setupApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List API Tokens
         * @description Retrieves paginated list of API tokens owned by the current user. Includes token metadata but not the actual token values for security.
         */
        get: operations["listApiTokens"];
        put?: never;
        /**
         * Create API Token
         * @description Creates a new API token for programmatic access to the API. The token can be used for bearer authentication in API requests. This feature is currently not available.
         */
        post: operations["createApiToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update API Token
         * @description Updates the name and status of an existing API token. Only the token owner can update their tokens. Token values cannot be changed after creation.
         */
        put: operations["updateApiToken"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Information
         * @description Retrieves information about the currently authenticated user including email, roles, token type, and authentication source.
         */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/user/request-access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request User Access
         * @description Authenticated users without roles can request access to the system. Only one pending request is allowed per user.
         */
        post: operations["requestUserAccess"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/user/request-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Access Request Status
         * @description Check the status of the current user's access request.
         */
        get: operations["getUserAccessStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description List all users with roles and status information. Available to managers and admins.
         */
        get: operations["listUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove user access
         * @description Remove a user's access to the application. Only admins can remove users.
         */
        delete: operations["removeUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bodhi/v1/users/{user_id}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change user role
         * @description Assign a new role to a user. Admins can assign any role, managers can assign user/power_user/manager roles.
         */
        put: operations["changeUserRole"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Comprehensive health check to verify all application components are operational
         */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping Server
         * @description Simple connectivity check to verify the server is responding
         */
        get: operations["pingServer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Chat Completion (OpenAI Compatible)
         * @description Creates a chat completion response using the specified model. Supports both streaming and non-streaming responses. Fully compatible with OpenAI's chat completions API format.
         */
        post: operations["createChatCompletion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Embeddings (OpenAI Compatible)
         * @description Creates embeddings for the input text using the specified model. Fully compatible with OpenAI's embeddings API format.
         */
        post: operations["createEmbedding"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Available Models (OpenAI Compatible)
         * @description Returns a list of all available models in OpenAI API compatible format. Includes user aliases, model aliases, and API provider aliases that can be used with the chat completions endpoint.
         */
        get: operations["listModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Model Details (OpenAI Compatible)
         * @description Retrieves details for a specific model by ID in OpenAI API compatible format. The model ID can be a user alias, model alias, or API provider alias.
         */
        get: operations["getModel"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Flat enum representing all types of model aliases
         *     Each variant is identified by the source field */
        Alias: (components["schemas"]["UserAlias"] & {
            /** @enum {string} */
            source: "user";
        }) | (components["schemas"]["ModelAlias"] & {
            /** @enum {string} */
            source: "model";
        }) | (components["schemas"]["ApiAlias"] & {
            /** @enum {string} */
            source: "api";
        });
        ApiAlias: {
            id: string;
            api_format: components["schemas"]["ApiFormat"];
            base_url: string;
            models: string[];
            prefix?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * @description API format/protocol specification
         * @enum {string}
         */
        ApiFormat: "openai" | "placeholder";
        /**
         * @description Response containing available API formats
         * @example {
         *       "data": [
         *         "openai"
         *       ]
         *     }
         */
        ApiFormatsResponse: {
            data: components["schemas"]["ApiFormat"][];
        };
        /**
         * @description Response containing API model configuration
         * @example {
         *       "api_format": "openai",
         *       "api_key_masked": "sk-...abc123",
         *       "base_url": "https://api.openai.com/v1",
         *       "created_at": "2024-01-01T00:00:00Z",
         *       "id": "openai-gpt4",
         *       "models": [
         *         "gpt-4",
         *         "gpt-3.5-turbo"
         *       ],
         *       "prefix": "openai",
         *       "updated_at": "2024-01-01T00:00:00Z"
         *     }
         */
        ApiModelResponse: {
            id: string;
            api_format: components["schemas"]["ApiFormat"];
            base_url: string;
            api_key_masked: string;
            models: string[];
            prefix?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        ApiToken: {
            id: string;
            user_id: string;
            name: string;
            token_id: string;
            token_hash: string;
            status: components["schemas"]["TokenStatus"];
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            updated_at: string;
        };
        /** @example {
         *       "offline_token": "bapp_1234567890abcdef"
         *     } */
        ApiTokenResponse: {
            /**
             * @description API token with bapp_ prefix for programmatic access
             * @example bapp_1234567890abcdef
             */
            offline_token: string;
        };
        AppAccessRequest: {
            app_client_id: string;
        };
        AppAccessResponse: {
            scope: string;
        };
        /**
         * @description Application information and status
         * @example {
         *       "status": "ready",
         *       "version": "0.1.0"
         *     }
         */
        AppInfo: {
            /**
             * @description Application version number (semantic versioning)
             * @example 0.1.0
             */
            version: string;
            /** @description Current application setup and operational status */
            status: components["schemas"]["AppStatus"];
        };
        AppRole: components["schemas"]["ResourceRole"] | components["schemas"]["TokenScope"] | components["schemas"]["UserScope"];
        /**
         * @example ready
         * @enum {string}
         */
        AppStatus: "setup" | "ready" | "resource-admin";
        /**
         * @description Request body for approving access with role assignment
         * @example {
         *       "role": "resource_user"
         *     }
         */
        ApproveUserAccessRequest: {
            /** @description Role to assign to the user */
            role: components["schemas"]["ResourceRole"];
        };
        /** @example {
         *       "code": "auth_code_123",
         *       "state": "random_state_456"
         *     } */
        AuthCallbackRequest: {
            /**
             * @description OAuth authorization code from successful authentication (required for success flow)
             * @example auth_code_123
             */
            code?: string | null;
            /**
             * @description OAuth state parameter for CSRF protection (must match initiated request)
             * @example random_state_456
             */
            state?: string | null;
            /**
             * @description OAuth error code if authentication failed (e.g., "access_denied")
             * @example access_denied
             */
            error?: string | null;
            /**
             * @description Human-readable OAuth error description if authentication failed
             * @example The user denied the request
             */
            error_description?: string | null;
        } & {
            [key: string]: string;
        };
        /** @description Change user role request */
        ChangeRoleRequest: {
            /**
             * @description Role to assign to the user
             * @example resource_manager
             */
            role: string;
        };
        ChatChoice: {
            /**
             * Format: int32
             * @description The index of the choice in the list of choices.
             */
            index: number;
            message: components["schemas"]["ChatCompletionResponseMessage"];
            finish_reason?: null | components["schemas"]["FinishReason"];
            logprobs?: null | components["schemas"]["ChatChoiceLogprobs"];
        };
        ChatChoiceLogprobs: {
            /** @description A list of message content tokens with log probability information. */
            content?: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
            refusal?: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
        };
        ChatChoiceStream: {
            /**
             * Format: int32
             * @description The index of the choice in the list of choices.
             */
            index: number;
            delta: components["schemas"]["ChatCompletionStreamResponseDelta"];
            finish_reason?: null | components["schemas"]["FinishReason"];
            logprobs?: null | components["schemas"]["ChatChoiceLogprobs"];
        };
        ChatCompletionAudio: {
            /** @description The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive). */
            voice: components["schemas"]["ChatCompletionAudioVoice"];
            /** @description Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`, `opus`, or `pcm16`. */
            format: components["schemas"]["ChatCompletionAudioFormat"];
        };
        /** @enum {string} */
        ChatCompletionAudioFormat: "wav" | "mp3" | "flac" | "opus" | "pcm16";
        /** @enum {string} */
        ChatCompletionAudioVoice: "alloy" | "ash" | "ballad" | "coral" | "echo" | "sage" | "shimmer" | "verse";
        ChatCompletionFunctionCall: "none" | "auto" | {
            /** @description Forces the model to call the specified function. */
            Function: {
                name: string;
            };
        };
        /** @deprecated */
        ChatCompletionFunctions: {
            /** @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
            name: string;
            /** @description A description of what the function does, used by the model to choose when and how to call the function. */
            description?: string | null;
            /** @description The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
             *
             *     Omitting `parameters` defines a function with an empty parameter list. */
            parameters: unknown;
        };
        ChatCompletionMessageToolCall: {
            /** @description The ID of the tool call. */
            id: string;
            /** @description The type of the tool. Currently, only `function` is supported. */
            type: components["schemas"]["ChatCompletionToolType"];
            /** @description The function that the model called. */
            function: components["schemas"]["FunctionCall"];
        };
        ChatCompletionMessageToolCallChunk: {
            /** Format: int32 */
            index: number;
            /** @description The ID of the tool call. */
            id?: string | null;
            type?: null | components["schemas"]["ChatCompletionToolType"];
            function?: null | components["schemas"]["FunctionCallStream"];
        };
        /**
         * @description Output types that you would like the model to generate for this request.
         *
         *     Most models are capable of generating text, which is the default: `["text"]`
         *
         *     The `gpt-4o-audio-preview` model can also be used to [generate
         *     audio](https://platform.openai.com/docs/guides/audio). To request that this model generate both text and audio responses, you can use: `["text", "audio"]`
         * @enum {string}
         */
        ChatCompletionModalities: "text" | "audio";
        /** @description Specifies a tool the model should use. Use to force the model to call a specific function. */
        ChatCompletionNamedToolChoice: {
            /** @description The type of the tool. Currently, only `function` is supported. */
            type: components["schemas"]["ChatCompletionToolType"];
            function: components["schemas"]["FunctionName"];
        };
        ChatCompletionRequestAssistantMessage: {
            content?: null | components["schemas"]["ChatCompletionRequestAssistantMessageContent"];
            /** @description The refusal message by the assistant. */
            refusal?: string | null;
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string | null;
            audio?: null | components["schemas"]["ChatCompletionRequestAssistantMessageAudio"];
            tool_calls?: components["schemas"]["ChatCompletionMessageToolCall"][] | null;
            function_call?: null | components["schemas"]["FunctionCall"];
        };
        ChatCompletionRequestAssistantMessageAudio: {
            /** @description Unique identifier for a previous audio response from the model. */
            id: string;
        };
        ChatCompletionRequestAssistantMessageContent: string | components["schemas"]["ChatCompletionRequestAssistantMessageContentPart"][];
        ChatCompletionRequestAssistantMessageContentPart: (components["schemas"]["ChatCompletionRequestMessageContentPartText"] & {
            /** @enum {string} */
            type: "text";
        }) | (components["schemas"]["ChatCompletionRequestMessageContentPartRefusal"] & {
            /** @enum {string} */
            type: "refusal";
        });
        ChatCompletionRequestDeveloperMessage: {
            /** @description The contents of the developer message. */
            content: components["schemas"]["ChatCompletionRequestDeveloperMessageContent"];
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string | null;
        };
        ChatCompletionRequestDeveloperMessageContent: string | components["schemas"]["ChatCompletionRequestMessageContentPartText"][];
        ChatCompletionRequestFunctionMessage: {
            /** @description The return value from the function call, to return to the model. */
            content?: string | null;
            /** @description The name of the function to call. */
            name: string;
        };
        ChatCompletionRequestMessage: (components["schemas"]["ChatCompletionRequestDeveloperMessage"] & {
            /** @enum {string} */
            role: "developer";
        }) | (components["schemas"]["ChatCompletionRequestSystemMessage"] & {
            /** @enum {string} */
            role: "system";
        }) | (components["schemas"]["ChatCompletionRequestUserMessage"] & {
            /** @enum {string} */
            role: "user";
        }) | (components["schemas"]["ChatCompletionRequestAssistantMessage"] & {
            /** @enum {string} */
            role: "assistant";
        }) | (components["schemas"]["ChatCompletionRequestToolMessage"] & {
            /** @enum {string} */
            role: "tool";
        }) | (components["schemas"]["ChatCompletionRequestFunctionMessage"] & {
            /** @enum {string} */
            role: "function";
        });
        /** @description Learn about [audio inputs](https://platform.openai.com/docs/guides/audio). */
        ChatCompletionRequestMessageContentPartAudio: {
            input_audio: components["schemas"]["InputAudio"];
        };
        ChatCompletionRequestMessageContentPartImage: {
            image_url: components["schemas"]["ImageUrl"];
        };
        ChatCompletionRequestMessageContentPartRefusal: {
            /** @description The refusal message generated by the model. */
            refusal: string;
        };
        ChatCompletionRequestMessageContentPartText: {
            text: string;
        };
        ChatCompletionRequestSystemMessage: {
            /** @description The contents of the system message. */
            content: components["schemas"]["ChatCompletionRequestSystemMessageContent"];
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string | null;
        };
        ChatCompletionRequestSystemMessageContent: string | components["schemas"]["ChatCompletionRequestSystemMessageContentPart"][];
        ChatCompletionRequestSystemMessageContentPart: components["schemas"]["ChatCompletionRequestMessageContentPartText"] & {
            /** @enum {string} */
            type: "text";
        };
        /** @description Tool message */
        ChatCompletionRequestToolMessage: {
            /** @description The contents of the tool message. */
            content: components["schemas"]["ChatCompletionRequestToolMessageContent"];
            tool_call_id: string;
        };
        ChatCompletionRequestToolMessageContent: string | components["schemas"]["ChatCompletionRequestToolMessageContentPart"][];
        ChatCompletionRequestToolMessageContentPart: components["schemas"]["ChatCompletionRequestMessageContentPartText"] & {
            /** @enum {string} */
            type: "text";
        };
        ChatCompletionRequestUserMessage: {
            /** @description The contents of the user message. */
            content: components["schemas"]["ChatCompletionRequestUserMessageContent"];
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string | null;
        };
        ChatCompletionRequestUserMessageContent: string | components["schemas"]["ChatCompletionRequestUserMessageContentPart"][];
        ChatCompletionRequestUserMessageContentPart: (components["schemas"]["ChatCompletionRequestMessageContentPartText"] & {
            /** @enum {string} */
            type: "text";
        }) | (components["schemas"]["ChatCompletionRequestMessageContentPartImage"] & {
            /** @enum {string} */
            type: "image_url";
        }) | (components["schemas"]["ChatCompletionRequestMessageContentPartAudio"] & {
            /** @enum {string} */
            type: "input_audio";
        });
        /** @description A chat completion message generated by the model. */
        ChatCompletionResponseMessage: {
            /** @description The contents of the message. */
            content?: string | null;
            /** @description The refusal message generated by the model. */
            refusal?: string | null;
            /** @description The tool calls generated by the model, such as function calls. */
            tool_calls?: components["schemas"]["ChatCompletionMessageToolCall"][] | null;
            /** @description The role of the author of this message. */
            role: components["schemas"]["Role"];
            function_call?: null | components["schemas"]["FunctionCall"];
            audio?: null | components["schemas"]["ChatCompletionResponseMessageAudio"];
        };
        ChatCompletionResponseMessageAudio: {
            /** @description Unique identifier for this audio response. */
            id: string;
            /**
             * Format: int32
             * @description The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations.
             */
            expires_at: number;
            /** @description Base64 encoded audio bytes generated by the model, in the format specified in the request. */
            data: string;
            /** @description Transcript of the audio generated by the model. */
            transcript: string;
        };
        /** @description Options for streaming response. Only set this when you set `stream: true`. */
        ChatCompletionStreamOptions: {
            /** @description If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value. */
            include_usage: boolean;
        };
        /** @description A chat completion delta generated by streamed model responses. */
        ChatCompletionStreamResponseDelta: {
            /** @description The contents of the chunk message. */
            content?: string | null;
            function_call?: null | components["schemas"]["FunctionCallStream"];
            tool_calls?: components["schemas"]["ChatCompletionMessageToolCallChunk"][] | null;
            role?: null | components["schemas"]["Role"];
            /** @description The refusal message generated by the model. */
            refusal?: string | null;
        };
        ChatCompletionTokenLogprob: {
            /** @description The token. */
            token: string;
            /**
             * Format: float
             * @description The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
             */
            logprob: number;
            /** @description A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token. */
            bytes?: number[] | null;
            /** @description List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned. */
            top_logprobs: components["schemas"]["TopLogprobs"][];
        };
        ChatCompletionTool: {
            type: components["schemas"]["ChatCompletionToolType"];
            function: components["schemas"]["FunctionObject"];
        };
        /** @description Controls which (if any) tool is called by the model.
         *     `none` means the model will not call any tool and instead generates a message.
         *     `auto` means the model can pick between generating a message or calling one or more tools.
         *     `required` means the model must call one or more tools.
         *     Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
         *
         *     `none` is the default when no tools are present. `auto` is the default if tools are present. */
        ChatCompletionToolChoiceOption: "none" | "auto" | "required" | {
            named: components["schemas"]["ChatCompletionNamedToolChoice"];
        };
        /** @enum {string} */
        ChatCompletionToolType: "function";
        ChatRequest: {
            model: string;
            messages: components["schemas"]["Message"][];
            stream?: boolean | null;
            format?: string | null;
            keep_alive?: null | components["schemas"]["Duration"];
            options?: null | components["schemas"]["Options"];
        };
        /** @description Breakdown of tokens used in a completion. */
        CompletionTokensDetails: {
            /** Format: int32 */
            accepted_prediction_tokens?: number | null;
            /**
             * Format: int32
             * @description Audio input tokens generated by the model.
             */
            audio_tokens?: number | null;
            /**
             * Format: int32
             * @description Tokens generated by the model for reasoning.
             */
            reasoning_tokens?: number | null;
            /**
             * Format: int32
             * @description  When using Predicted Outputs, the number of tokens in the
             *     prediction that did not appear in the completion. However, like
             *     reasoning tokens, these tokens are still counted in the total
             *     completion tokens for purposes of billing, output, and context
             *     window limits.
             */
            rejected_prediction_tokens?: number | null;
        };
        /** @description Usage statistics for the completion request. */
        CompletionUsage: {
            /**
             * Format: int32
             * @description Number of tokens in the prompt.
             */
            prompt_tokens: number;
            /**
             * Format: int32
             * @description Number of tokens in the generated completion.
             */
            completion_tokens: number;
            /**
             * Format: int32
             * @description Total number of tokens used in the request (prompt + completion).
             */
            total_tokens: number;
            prompt_tokens_details?: null | components["schemas"]["PromptTokensDetails"];
            completion_tokens_details?: null | components["schemas"]["CompletionTokensDetails"];
        };
        CreateAliasRequest: {
            alias: string;
            repo: string;
            filename: string;
            snapshot?: string | null;
            request_params?: null | components["schemas"]["OAIRequestParams"];
            context_params?: string[] | null;
        };
        /**
         * @description Request to create a new API model configuration
         * @example {
         *       "api_format": "openai",
         *       "api_key": "sk-...",
         *       "base_url": "https://api.openai.com/v1",
         *       "models": [
         *         "gpt-4",
         *         "gpt-3.5-turbo"
         *       ],
         *       "prefix": "openai"
         *     }
         */
        CreateApiModelRequest: {
            /** @description API format/protocol (e.g., "openai") */
            api_format: components["schemas"]["ApiFormat"];
            /** @description API base URL */
            base_url: string;
            /** @description API key for authentication */
            api_key: string;
            /** @description List of available models */
            models: string[];
            /** @description Optional prefix for model namespacing (e.g., "azure/" for "azure/gpt-4", "openai:" for "openai:gpt-4") */
            prefix?: string | null;
        };
        /**
         * @description Request to create a new API token
         * @example {
         *       "name": "My Integration Token"
         *     }
         */
        CreateApiTokenRequest: {
            /**
             * @description Descriptive name for the API token (minimum 3 characters)
             * @example My Integration Token
             */
            name?: string | null;
        };
        CreateChatCompletionRequest: {
            /** @description A list of messages comprising the conversation so far. Depending on the [model](https://platform.openai.com/docs/models) you use, different message types (modalities) are supported, like [text](https://platform.openai.com/docs/guides/text-generation), [images](https://platform.openai.com/docs/guides/vision), and [audio](https://platform.openai.com/docs/guides/audio). */
            messages: components["schemas"]["ChatCompletionRequestMessage"][];
            /** @description ID of the model to use.
             *     See the [model endpoint compatibility](https://platform.openai.com/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API. */
            model: string;
            /** @description Whether or not to store the output of this chat completion request
             *
             *     for use in our [model distillation](https://platform.openai.com/docs/guides/distillation) or [evals](https://platform.openai.com/docs/guides/evals) products. */
            store?: boolean | null;
            reasoning_effort?: null | components["schemas"]["ReasoningEffort"];
            /** @description Developer-defined tags and values used for filtering completions in the [dashboard](https://platform.openai.com/chat-completions). */
            metadata?: unknown;
            /**
             * Format: float
             * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
             */
            frequency_penalty?: number | null;
            /** @description Modify the likelihood of specified tokens appearing in the completion.
             *
             *     Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100.
             *     Mathematically, the bias is added to the logits generated by the model prior to sampling.
             *     The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection;
             *     values like -100 or 100 should result in a ban or exclusive selection of the relevant token. */
            logit_bias?: {
                [key: string]: unknown;
            } | null;
            /** @description Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. */
            logprobs?: boolean | null;
            /**
             * Format: int32
             * @description An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
             */
            top_logprobs?: number | null;
            /**
             * Format: int32
             * @deprecated
             * @description The maximum number of [tokens](https://platform.openai.com/tokenizer) that can be generated in the chat completion.
             *
             *     This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.
             *     This value is now deprecated in favor of `max_completion_tokens`, and is
             *     not compatible with [o1 series models](https://platform.openai.com/docs/guides/reasoning).
             */
            max_tokens?: number | null;
            /**
             * Format: int32
             * @description An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).
             */
            max_completion_tokens?: number | null;
            /**
             * Format: int32
             * @description How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
             */
            n?: number | null;
            modalities?: components["schemas"]["ChatCompletionModalities"][] | null;
            prediction?: null | components["schemas"]["PredictionContent"];
            audio?: null | components["schemas"]["ChatCompletionAudio"];
            /**
             * Format: float
             * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
             */
            presence_penalty?: number | null;
            response_format?: null | components["schemas"]["ResponseFormat"];
            /**
             * Format: int64
             * @description  This feature is in Beta.
             *     If specified, our system will make a best effort to sample deterministically, such that repeated requests
             *     with the same `seed` and parameters should return the same result.
             *     Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
             */
            seed?: number | null;
            service_tier?: null | components["schemas"]["ServiceTier"];
            stop?: null | components["schemas"]["Stop"];
            /** @description If set, partial message deltas will be sent, like in ChatGPT.
             *     Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
             *     as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). */
            stream?: boolean | null;
            stream_options?: null | components["schemas"]["ChatCompletionStreamOptions"];
            /**
             * Format: float
             * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
             *     while lower values like 0.2 will make it more focused and deterministic.
             *
             *     We generally recommend altering this or `top_p` but not both.
             */
            temperature?: number | null;
            /**
             * Format: float
             * @description An alternative to sampling with temperature, called nucleus sampling,
             *     where the model considers the results of the tokens with top_p probability mass.
             *     So 0.1 means only the tokens comprising the top 10% probability mass are considered.
             *
             *      We generally recommend altering this or `temperature` but not both.
             */
            top_p?: number | null;
            /** @description A list of tools the model may call. Currently, only functions are supported as a tool.
             *     Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported. */
            tools?: components["schemas"]["ChatCompletionTool"][] | null;
            tool_choice?: null | components["schemas"]["ChatCompletionToolChoiceOption"];
            /** @description Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling) during tool use. */
            parallel_tool_calls?: boolean | null;
            /** @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids). */
            user?: string | null;
            web_search_options?: null | components["schemas"]["WebSearchOptions"];
            function_call?: null | components["schemas"]["ChatCompletionFunctionCall"];
            /**
             * @deprecated
             * @description Deprecated in favor of `tools`.
             *
             *     A list of functions the model may generate JSON inputs for.
             */
            functions?: components["schemas"]["ChatCompletionFunctions"][] | null;
        };
        /** @description Represents a chat completion response returned by model, based on the provided input. */
        CreateChatCompletionResponse: {
            /** @description A unique identifier for the chat completion. */
            id: string;
            /** @description A list of chat completion choices. Can be more than one if `n` is greater than 1. */
            choices: components["schemas"]["ChatChoice"][];
            /**
             * Format: int32
             * @description The Unix timestamp (in seconds) of when the chat completion was created.
             */
            created: number;
            /** @description The model used for the chat completion. */
            model: string;
            service_tier?: null | components["schemas"]["ServiceTierResponse"];
            /** @description This fingerprint represents the backend configuration that the model runs with.
             *
             *     Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism. */
            system_fingerprint?: string | null;
            /** @description The object type, which is always `chat.completion`. */
            object: string;
            usage?: null | components["schemas"]["CompletionUsage"];
        };
        /** @description Represents a streamed chunk of a chat completion response returned by model, based on the provided input. */
        CreateChatCompletionStreamResponse: {
            /** @description A unique identifier for the chat completion. Each chunk has the same ID. */
            id: string;
            /** @description A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the last chunk if you set `stream_options: {"include_usage": true}`. */
            choices: components["schemas"]["ChatChoiceStream"][];
            /**
             * Format: int32
             * @description The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
             */
            created: number;
            /** @description The model to generate the completion. */
            model: string;
            service_tier?: null | components["schemas"]["ServiceTierResponse"];
            /** @description This fingerprint represents the backend configuration that the model runs with.
             *     Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism. */
            system_fingerprint?: string | null;
            /** @description The object type, which is always `chat.completion.chunk`. */
            object: string;
            usage?: null | components["schemas"]["CompletionUsage"];
        };
        CreateEmbeddingRequest: {
            /** @description ID of the model to use. You can use the
             *     [List models](https://platform.openai.com/docs/api-reference/models/list)
             *     API to see all of your available models, or see our
             *     [Model overview](https://platform.openai.com/docs/models/overview)
             *     for descriptions of them. */
            model: string;
            /** @description Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. */
            input: components["schemas"]["EmbeddingInput"];
            encoding_format?: null | components["schemas"]["EncodingFormat"];
            /** @description A unique identifier representing your end-user, which will help OpenAI
             *      to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/usage-policies/end-user-ids). */
            user?: string | null;
            /**
             * Format: int32
             * @description The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
             */
            dimensions?: number | null;
        };
        CreateEmbeddingResponse: {
            object: string;
            /** @description The name of the model used to generate the embedding. */
            model: string;
            /** @description The list of embeddings generated by the model. */
            data: components["schemas"]["Embedding"][];
            /** @description The usage information for the request. */
            usage: components["schemas"]["EmbeddingUsage"];
        };
        DownloadRequest: {
            id: string;
            repo: string;
            filename: string;
            status: components["schemas"]["DownloadStatus"];
            error?: string | null;
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            updated_at: string;
            /** Format: int64 */
            total_bytes?: number | null;
            /** Format: int64 */
            downloaded_bytes?: number;
            /**
             * Format: date-time
             * @example 2024-11-10T04:52:06.786Z
             */
            started_at: string;
        };
        /** @enum {string} */
        DownloadStatus: "pending" | "completed" | "error";
        Duration: string;
        /** @description Represents an embedding vector returned by embedding endpoint. */
        Embedding: {
            /**
             * Format: int32
             * @description The index of the embedding in the list of embeddings.
             */
            index: number;
            /** @description The object type, which is always "embedding". */
            object: string;
            /** @description The embedding vector, which is a list of floats. The length of vector
             *     depends on the model as listed in the [embedding guide](https://platform.openai.com/docs/guides/embeddings). */
            embedding: number[];
        };
        EmbeddingInput: string | string[] | number[] | number[][];
        EmbeddingUsage: {
            /**
             * Format: int32
             * @description The number of tokens used by the prompt.
             */
            prompt_tokens: number;
            /**
             * Format: int32
             * @description The total number of tokens used by the request.
             */
            total_tokens: number;
        };
        /** @enum {string} */
        EncodingFormat: "float" | "base64";
        /** @example {
         *       "code": "validation_error",
         *       "message": "Validation failed: name is required",
         *       "param": "name",
         *       "type": "invalid_request_error"
         *     } */
        ErrorBody: {
            /**
             * @description Human-readable error message describing what went wrong
             * @example Validation failed: name is required
             */
            message: string;
            /**
             * @description Error type categorizing the kind of error that occurred
             * @example invalid_request_error
             */
            type: string;
            /**
             * @description Specific error code for programmatic error handling
             * @example validation_error
             */
            code?: string | null;
            /**
             * @description Parameter name that caused the error (for validation errors)
             * @example name
             */
            param?: string | null;
        };
        /**
         * @description Request to fetch available models from provider
         * @example {
         *       "api_key": "sk-...",
         *       "base_url": "https://api.openai.com/v1"
         *     }
         */
        FetchModelsRequest: {
            /** @description API key for authentication (provide either api_key OR id, api_key takes preference if both provided) */
            api_key?: string;
            /** @description API model ID to look up stored credentials (provide either api_key OR id, api_key takes preference if both provided) */
            id?: string;
            /** @description API base URL (optional when using id) */
            base_url: string;
        };
        /**
         * @description Response containing available models from provider
         * @example {
         *       "models": [
         *         "gpt-4",
         *         "gpt-3.5-turbo",
         *         "gpt-4-turbo"
         *       ]
         *     }
         */
        FetchModelsResponse: {
            models: string[];
        };
        /** @enum {string} */
        FinishReason: "stop" | "length" | "tool_calls" | "content_filter" | "function_call";
        /** @description The name and arguments of a function that should be called, as generated by the model. */
        FunctionCall: {
            /** @description The name of the function to call. */
            name: string;
            /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
            arguments: string;
        };
        FunctionCallStream: {
            /** @description The name of the function to call. */
            name?: string | null;
            /** @description The arguments to call the function with, as generated by the model in JSON format.
             *     Note that the model does not always generate valid JSON, and may hallucinate
             *     parameters not defined by your function schema. Validate the arguments in your
             *     code before calling your function. */
            arguments?: string | null;
        };
        FunctionName: {
            /** @description The name of the function to call. */
            name: string;
        };
        FunctionObject: {
            /** @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
            name: string;
            /** @description A description of what the function does, used by the model to choose when and how to call the function. */
            description?: string | null;
            /** @description The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
             *
             *     Omitting `parameters` defines a function with an empty parameter list. */
            parameters?: unknown;
            /** @description Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling). */
            strict?: boolean | null;
        };
        /** @enum {string} */
        ImageDetail: "auto" | "low" | "high";
        ImageUrl: {
            /** @description Either a URL of the image or the base64 encoded image data. */
            url: string;
            detail?: null | components["schemas"]["ImageDetail"];
        };
        InputAudio: {
            /** @description Base64 encoded audio data. */
            data: string;
            /** @description The format of the encoded audio data. Currently supports "wav" and "mp3". */
            format: components["schemas"]["InputAudioFormat"];
        };
        /** @enum {string} */
        InputAudioFormat: "wav" | "mp3";
        ListModelResponse: {
            object: string;
            data: {
                /** @description The model identifier, which can be referenced in the API endpoints. */
                id: string;
                /** @description The object type, which is always "model". */
                object: string;
                /**
                 * Format: int32
                 * @description The Unix timestamp (in seconds) when the model was created.
                 */
                created: number;
                /** @description The organization that owns the model. */
                owned_by: string;
            }[];
        };
        /** @description List users query parameters */
        ListUsersParams: {
            /**
             * Format: int32
             * @example 1
             */
            page?: number | null;
            /**
             * Format: int32
             * @example 10
             */
            page_size?: number | null;
        };
        LocalModelResponse: {
            repo: string;
            filename: string;
            snapshot: string;
            /** Format: int64 */
            size?: number | null;
            model_params: {
                [key: string]: unknown;
            };
        };
        Message: {
            role: string;
            content: string;
            images?: string[] | null;
        };
        Model: {
            model: string;
            /** Format: int32 */
            modified_at: number;
            /** Format: int64 */
            size: number;
            digest: string;
            details: components["schemas"]["ModelDetails"];
        };
        ModelAlias: {
            alias: string;
            /** Format: string */
            repo: string;
            filename: string;
            snapshot: string;
        };
        ModelDetails: {
            parent_model?: string | null;
            format: string;
            family: string;
            families?: string[] | null;
            parameter_size: string;
            quantization_level: string;
        };
        /** @description Describes an OpenAI model offering that can be used with the API. */
        ModelResponse: {
            /** @description The model identifier, which can be referenced in the API endpoints. */
            id: string;
            /** @description The object type, which is always "model". */
            object: string;
            /**
             * Format: int32
             * @description The Unix timestamp (in seconds) when the model was created.
             */
            created: number;
            /** @description The organization that owns the model. */
            owned_by: string;
        };
        ModelsResponse: {
            models: components["schemas"]["Model"][];
        };
        /**
         * @description Request to pull a model file from HuggingFace
         * @example {
         *       "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
         *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF"
         *     }
         */
        NewDownloadRequest: {
            /**
             * @description HuggingFace repository name in format 'username/repository-name'
             * @example TheBloke/Mistral-7B-Instruct-v0.1-GGUF
             */
            repo: string;
            /**
             * @description Model file name to download (typically .gguf format)
             * @example mistral-7b-instruct-v0.1.Q4_K_M.gguf
             */
            filename: string;
        };
        OAIRequestParams: {
            /** Format: float */
            frequency_penalty?: number | null;
            /** Format: int32 */
            max_tokens?: number | null;
            /** Format: float */
            presence_penalty?: number | null;
            /** Format: int64 */
            seed?: number | null;
            stop?: string[];
            /** Format: float */
            temperature?: number | null;
            /** Format: float */
            top_p?: number | null;
            user?: string | null;
        };
        OllamaError: {
            error: string;
        };
        /** @example {
         *       "error": {
         *         "code": "validation_error",
         *         "message": "Validation failed: name is required",
         *         "param": "name",
         *         "type": "invalid_request_error"
         *       }
         *     } */
        OpenAIApiError: {
            /** @description Error details following OpenAI API error format */
            error: components["schemas"]["ErrorBody"];
        };
        Options: {
            /** Format: int32 */
            num_keep?: number | null;
            /** Format: int64 */
            seed?: number | null;
            /** Format: int32 */
            num_predict?: number | null;
            /** Format: int32 */
            top_k?: number | null;
            /** Format: float */
            top_p?: number | null;
            /** Format: float */
            tfs_z?: number | null;
            /** Format: float */
            typical_p?: number | null;
            /** Format: int32 */
            repeat_last_n?: number | null;
            /** Format: float */
            temperature?: number | null;
            /** Format: float */
            repeat_penalty?: number | null;
            /** Format: float */
            presence_penalty?: number | null;
            /** Format: float */
            frequency_penalty?: number | null;
            /** Format: float */
            mirostat?: number | null;
            /** Format: float */
            mirostat_tau?: number | null;
            /** Format: float */
            mirostat_eta?: number | null;
            penalize_newline?: boolean | null;
            stop?: string[] | null;
            numa?: boolean | null;
            /** Format: int32 */
            num_ctx?: number | null;
            /** Format: int32 */
            num_batch?: number | null;
            /** Format: int32 */
            num_gpu?: number | null;
            /** Format: int32 */
            main_gpu?: number | null;
            low_vram?: boolean | null;
            f16_kv?: boolean | null;
            logits_all?: boolean | null;
            vocab_only?: boolean | null;
            use_mmap?: boolean | null;
            use_mlock?: boolean | null;
            /** Format: int32 */
            num_thread?: number | null;
        };
        PaginatedAliasResponse: {
            data: components["schemas"]["Alias"][];
            total: number;
            page: number;
            page_size: number;
        };
        /** @description Paginated response for API model listings */
        PaginatedApiModelResponse: {
            data: components["schemas"]["ApiModelResponse"][];
            total: number;
            page: number;
            page_size: number;
        };
        PaginatedApiTokenResponse: {
            data: components["schemas"]["ApiToken"][];
            total: number;
            page: number;
            page_size: number;
        };
        PaginatedDownloadResponse: {
            data: components["schemas"]["DownloadRequest"][];
            total: number;
            page: number;
            page_size: number;
        };
        PaginatedLocalModelResponse: {
            data: components["schemas"]["LocalModelResponse"][];
            total: number;
            page: number;
            page_size: number;
        };
        /**
         * @description Paginated response for access requests
         * @example {
         *       "page": 1,
         *       "page_size": 20,
         *       "requests": [
         *         {
         *           "created_at": "2024-01-01T12:00:00Z",
         *           "email": "user@example.com",
         *           "id": 1,
         *           "reviewer": null,
         *           "status": "pending",
         *           "updated_at": "2024-01-01T12:00:00Z"
         *         }
         *       ],
         *       "total": 1
         *     }
         */
        PaginatedUserAccessResponse: {
            /** @description List of access requests */
            requests: components["schemas"]["UserAccessRequest"][];
            /** @description Total number of requests */
            total: number;
            /** @description Current page number */
            page: number;
            /** @description Number of items per page */
            page_size: number;
        };
        PaginatedUserAliasResponse: {
            data: components["schemas"]["UserAliasResponse"][];
            total: number;
            page: number;
            page_size: number;
        };
        /** @description Query parameters for pagination and sorting */
        PaginationSortParams: {
            /**
             * @description Page number (1-based indexing)
             * @example 1
             */
            page?: number;
            /**
             * @description Number of items to return per page (maximum 100)
             * @example 30
             */
            page_size?: number;
            /**
             * @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at
             * @example updated_at
             */
            sort?: string | null;
            /**
             * @description Sort order: 'asc' for ascending, 'desc' for descending
             * @example desc
             */
            sort_order?: string;
        };
        /**
         * @description Response to the ping endpoint
         * @example {
         *       "message": "pong"
         *     }
         */
        PingResponse: {
            /**
             * @description Simple ping response message
             * @example pong
             */
            message: string;
        };
        /** @description Static predicted output content, such as the content of a text file that is being regenerated. */
        PredictionContent: {
            /** @description The type of the predicted content you want to provide. This type is
             *     currently always `content`. */
            content: components["schemas"]["PredictionContentContent"];
            /** @enum {string} */
            type: "content";
        };
        /** @description The content that should be matched when generating a model response. If generated tokens would match this content, the entire model response can be returned much more quickly. */
        PredictionContentContent: string | components["schemas"]["ChatCompletionRequestMessageContentPartText"][];
        /** @description Breakdown of tokens used in a completion. */
        PromptTokensDetails: {
            /**
             * Format: int32
             * @description Audio input tokens present in the prompt.
             */
            audio_tokens?: number | null;
            /**
             * Format: int32
             * @description Cached tokens present in the prompt.
             */
            cached_tokens?: number | null;
        };
        /** @enum {string} */
        ReasoningEffort: "minimal" | "low" | "medium" | "high";
        /** @example {
         *       "location": "https://oauth.example.com/auth?client_id=test&redirect_uri=..."
         *     } */
        RedirectResponse: {
            /**
             * @description The URL to redirect to (OAuth authorization URL or application home page)
             * @example https://oauth.example.com/auth?client_id=test&redirect_uri=...
             */
            location: string;
        };
        /** @enum {string} */
        ResourceRole: "resource_user" | "resource_power_user" | "resource_manager" | "resource_admin";
        ResponseFormat: {
            /** @enum {string} */
            type: "text";
        } | {
            /** @enum {string} */
            type: "json_object";
        } | {
            json_schema: components["schemas"]["ResponseFormatJsonSchema"];
            /** @enum {string} */
            type: "json_schema";
        };
        ResponseFormatJsonSchema: {
            /** @description A description of what the response format is for, used by the model to determine how to respond in the format. */
            description?: string | null;
            /** @description The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
            name: string;
            /** @description The schema for the response format, described as a JSON Schema object. */
            schema?: unknown;
            /** @description Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs). */
            strict?: boolean | null;
        };
        /** @enum {string} */
        Role: "system" | "user" | "assistant" | "tool" | "function";
        /** @enum {string} */
        ServiceTier: "auto" | "default" | "flex" | "scale" | "priority";
        /** @enum {string} */
        ServiceTierResponse: "scale" | "default" | "flex" | "priority";
        SettingInfo: {
            key: string;
            current_value: unknown;
            default_value: unknown;
            source: components["schemas"]["SettingSource"];
            metadata: components["schemas"]["SettingMetadata"];
        };
        SettingMetadata: {
            /** @enum {string} */
            type: "string";
        } | {
            /** Format: int64 */
            min: number;
            /** Format: int64 */
            max: number;
            /** @enum {string} */
            type: "number";
        } | {
            /** @enum {string} */
            type: "boolean";
        } | {
            options: string[];
            /** @enum {string} */
            type: "option";
        };
        /** @enum {string} */
        SettingSource: "system" | "command_line" | "environment" | "settings_file" | "default";
        /**
         * @description Request to setup the application in authenticated mode
         * @example {
         *       "description": "My personal AI server",
         *       "name": "My Bodhi Server"
         *     }
         */
        SetupRequest: {
            /**
             * @description Server name for identification (minimum 10 characters)
             * @example My Bodhi Server
             */
            name: string;
            /**
             * @description Optional description of the server's purpose
             * @example My personal AI server
             */
            description?: string | null;
        };
        /**
         * @description Response containing the updated application status after setup
         * @example {
         *       "status": "resource-admin"
         *     }
         */
        SetupResponse: {
            /** @description New application status after successful setup */
            status: components["schemas"]["AppStatus"];
        };
        ShowRequest: {
            name: string;
        };
        ShowResponse: {
            details: components["schemas"]["ModelDetails"];
            license: string;
            model_info: {
                [key: string]: unknown;
            };
            modelfile: string;
            /** Format: int32 */
            modified_at: number;
            parameters: string;
            template: string;
        };
        Stop: string | string[];
        /**
         * @description Request to test API connectivity with a prompt
         * @example {
         *       "api_key": "sk-...",
         *       "base_url": "https://api.openai.com/v1",
         *       "model": "gpt-4",
         *       "prompt": "Hello, how are you?"
         *     }
         */
        TestPromptRequest: {
            /** @description API key for authentication (provide either api_key OR id, api_key takes preference if both provided) */
            api_key?: string;
            /** @description API model ID to look up stored credentials (provide either api_key OR id, api_key takes preference if both provided) */
            id?: string;
            /** @description API base URL (optional when using id) */
            base_url: string;
            /** @description Model to use for testing */
            model: string;
            /** @description Test prompt (max 30 characters for cost control) */
            prompt: string;
        };
        /**
         * @description Response from testing API connectivity
         * @example {
         *       "error": null,
         *       "response": "Hello! I'm doing well, thank you.",
         *       "success": true
         *     }
         */
        TestPromptResponse: {
            success: boolean;
            response?: string | null;
            error?: string | null;
        };
        /** @enum {string} */
        TokenScope: "scope_token_user" | "scope_token_power_user" | "scope_token_manager" | "scope_token_admin";
        /** @enum {string} */
        TokenStatus: "active" | "inactive";
        TopLogprobs: {
            /** @description The token. */
            token: string;
            /**
             * Format: float
             * @description The log probability of this token.
             */
            logprob: number;
            /** @description A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token. */
            bytes?: number[] | null;
        };
        UpdateAliasRequest: {
            repo: string;
            filename: string;
            snapshot?: string | null;
            request_params?: null | components["schemas"]["OAIRequestParams"];
            context_params?: string[] | null;
        };
        /**
         * @description Request to update an existing API model configuration
         * @example {
         *       "api_format": "openai",
         *       "api_key": "sk-new-key",
         *       "base_url": "https://api.openai.com/v1",
         *       "models": [
         *         "gpt-4-turbo",
         *         "gpt-3.5-turbo"
         *       ],
         *       "prefix": "openai"
         *     }
         */
        UpdateApiModelRequest: {
            /** @description API format/protocol (required) */
            api_format: components["schemas"]["ApiFormat"];
            /** @description API base URL (required) */
            base_url: string;
            /** @description API key for authentication (optional, only update if provided for security) */
            api_key?: string | null;
            /** @description List of available models (required) */
            models: string[];
            /** @description Optional prefix for model namespacing */
            prefix?: string | null;
        };
        /**
         * @description Request to update an existing API token
         * @example {
         *       "name": "Updated Token Name",
         *       "status": "inactive"
         *     }
         */
        UpdateApiTokenRequest: {
            /**
             * @description New descriptive name for the token (minimum 3 characters)
             * @example Updated Token Name
             */
            name: string;
            /** @description New status for the token (active/inactive) */
            status: components["schemas"]["TokenStatus"];
        };
        /**
         * @description Request to update a setting value
         * @example {
         *       "value": "debug"
         *     }
         */
        UpdateSettingRequest: {
            /** @description New value for the setting (type depends on setting metadata) */
            value: unknown;
        };
        UserAccessRequest: {
            /**
             * Format: int64
             * @description Unique identifier for the request
             */
            id: number;
            /** @description Username of the requesting user */
            username: string;
            /** @description User ID (UUID) of the requesting user */
            user_id: string;
            reviewer?: string | null;
            /** @description Current status of the request */
            status: components["schemas"]["UserAccessRequestStatus"];
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
        };
        /** @enum {string} */
        UserAccessRequestStatus: "pending" | "approved" | "rejected";
        /**
         * @description Response for checking access request status
         * @example {
         *       "created_at": "2024-01-01T12:00:00Z",
         *       "status": "pending"
         *     }
         */
        UserAccessStatusResponse: {
            /** @description Username of the requesting user */
            username: string;
            /** @description Current status of the request (pending, approved, rejected) */
            status: components["schemas"]["UserAccessRequestStatus"];
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
        };
        UserAlias: {
            alias: string;
            /** Format: string */
            repo: string;
            filename: string;
            snapshot: string;
            request_params?: components["schemas"]["OAIRequestParams"];
            context_params?: string[];
        };
        UserAliasResponse: {
            alias: string;
            repo: string;
            filename: string;
            snapshot: string;
            source: string;
            model_params: {
                [key: string]: unknown;
            };
            request_params: components["schemas"]["OAIRequestParams"];
            context_params: string[];
        };
        UserInfo: {
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            user_id: string;
            /** @example user@example.com */
            username: string;
            /** @example John */
            first_name?: string | null;
            /** @example Doe */
            last_name?: string | null;
            role?: null | components["schemas"]["AppRole"];
        };
        UserListResponse: {
            /** @example resource-abc123def456 */
            client_id: string;
            users: components["schemas"]["UserInfo"][];
            /**
             * Format: int32
             * @example 1
             */
            page: number;
            /**
             * Format: int32
             * @example 10
             */
            page_size: number;
            /**
             * Format: int32
             * @example 5
             */
            total_pages: number;
            /**
             * Format: int32
             * @example 45
             */
            total_users: number;
            /** @example true */
            has_next: boolean;
            /** @example false */
            has_previous: boolean;
        };
        /**
         * @description User authentication response with discriminated union
         * @example {
         *       "auth_status": "logged_in",
         *       "role": "resource_user",
         *       "user_id": "550e8400-e29b-41d4-a716-446655440000",
         *       "username": "user@example.com"
         *     }
         */
        UserResponse: {
            /** @enum {string} */
            auth_status: "logged_out";
        } | (components["schemas"]["UserInfo"] & {
            /** @enum {string} */
            auth_status: "logged_in";
        });
        /** @enum {string} */
        UserScope: "scope_user_user" | "scope_user_power_user" | "scope_user_manager" | "scope_user_admin";
        /**
         * @description The amount of context window space to use for the search.
         * @enum {string}
         */
        WebSearchContextSize: "low" | "medium" | "high";
        /** @description Approximate location parameters for the search. */
        WebSearchLocation: {
            /** @description The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user, e.g. `US`. */
            country?: string | null;
            /** @description Free text input for the region of the user, e.g. `California`. */
            region?: string | null;
            /** @description Free text input for the city of the user, e.g. `San Francisco`. */
            city?: string | null;
            /** @description The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the user, e.g. `America/Los_Angeles`. */
            timezone?: string | null;
        };
        /** @description Options for the web search tool. */
        WebSearchOptions: {
            search_context_size?: null | components["schemas"]["WebSearchContextSize"];
            user_location?: null | components["schemas"]["WebSearchUserLocation"];
        };
        WebSearchUserLocation: {
            type: components["schemas"]["WebSearchUserLocationType"];
            approximate: components["schemas"]["WebSearchLocation"];
        };
        /** @enum {string} */
        WebSearchUserLocationType: "approximate";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    chatOllamaModel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Chat request in Ollama format */
        requestBody: {
            content: {
                /** @example {
                 *       "messages": [
                 *         {
                 *           "content": "You are a helpful assistant.",
                 *           "role": "system"
                 *         },
                 *         {
                 *           "content": "Hello!",
                 *           "role": "user"
                 *         }
                 *       ],
                 *       "model": "llama2:chat",
                 *       "options": {
                 *         "num_predict": 100,
                 *         "temperature": 0.7
                 *       },
                 *       "stream": true
                 *     } */
                "application/json": components["schemas"]["ChatRequest"];
            };
        };
        responses: {
            /** @description Chat response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-01-20T12:00:00.000000000Z",
                     *       "done": true,
                     *       "done_reason": "stop",
                     *       "eval_count": 10,
                     *       "eval_duration": "-1",
                     *       "load_duration": "-1",
                     *       "message": {
                     *         "content": "Hello! How can I help you today?",
                     *         "images": null,
                     *         "role": "assistant"
                     *       },
                     *       "model": "llama2:chat",
                     *       "prompt_eval_count": 20,
                     *       "prompt_eval_duration": "-1",
                     *       "total_duration": 0
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": "model not found"
                     *     } */
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    showOllamaModel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Model name to get details for */
        requestBody: {
            content: {
                /** @example {
                 *       "name": "llama2:chat"
                 *     } */
                "application/json": components["schemas"]["ShowRequest"];
            };
        };
        responses: {
            /** @description Model details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "details": {
                     *         "families": null,
                     *         "family": "unknown",
                     *         "format": "gguf",
                     *         "parameter_size": "",
                     *         "parent_model": null,
                     *         "quantization_level": ""
                     *       },
                     *       "license": "",
                     *       "model_info": {},
                     *       "modelfile": "",
                     *       "modified_at": "2024-01-20T12:00:00.000000000Z",
                     *       "parameters": "n_keep: 24\nstop:\n- <|start_header_id|>\n- <|end_header_id|>\n- <|eot_id|>\n",
                     *       "template": "llama2"
                     *     } */
                    "application/json": components["schemas"]["ShowResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": "model not found"
                     *     } */
                    "application/json": components["schemas"]["OllamaError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listOllamaModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of available models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "models": [
                     *         {
                     *           "details": {
                     *             "families": null,
                     *             "family": "unknown",
                     *             "format": "gguf",
                     *             "parameter_size": "",
                     *             "parent_model": null,
                     *             "quantization_level": ""
                     *           },
                     *           "digest": "sha256:abc123",
                     *           "model": "llama2:chat",
                     *           "modified_at": "2024-01-20T12:00:00.000000000Z",
                     *           "size": 0
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["ModelsResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listAllAccessRequests: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All requests retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserAccessResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listPendingAccessRequests: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pending requests retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserAccessResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    approveAccessRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Access request ID */
                id: number;
            };
            cookie?: never;
        };
        /** @description Role to assign to the user */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApproveUserAccessRequest"];
            };
        };
        responses: {
            /** @description Request approved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Request not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    rejectAccessRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Access request ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request rejected successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Request not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listApiModels: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API model configurations retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "api_format": "openai",
                     *           "api_key": "sk-****",
                     *           "base_url": "https://api.openai.com/v1",
                     *           "id": "openai-gpt4"
                     *         }
                     *       ],
                     *       "page": 1,
                     *       "page_size": 10,
                     *       "total": 1
                     *     } */
                    "application/json": components["schemas"]["PaginatedApiModelResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    createApiModel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApiModelRequest"];
            };
        };
        responses: {
            /** @description API model created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiModelResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Alias already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getApiFormats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API formats retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         "openai"
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["ApiFormatsResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    fetchApiModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FetchModelsRequest"];
            };
        };
        responses: {
            /** @description Available models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FetchModelsResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    testApiModel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TestPromptRequest"];
            };
        };
        responses: {
            /** @description Test result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestPromptResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getApiModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Unique identifier for the API model alias
                 * @example openai-gpt4
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API model configuration retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "api_format": "openai",
                     *       "api_key": "sk-****",
                     *       "base_url": "https://api.openai.com/v1",
                     *       "id": "openai-gpt4",
                     *       "model": "gpt-4"
                     *     } */
                    "application/json": components["schemas"]["ApiModelResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description API model with specified ID not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "entity_not_found",
                     *         "message": "API model 'invalid-model' not found",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    updateApiModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API model ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateApiModelRequest"];
            };
        };
        responses: {
            /** @description API model updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiModelResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description API model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    deleteApiModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API model ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API model deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description API model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    requestAccess: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Application client requesting access */
        requestBody: {
            content: {
                /** @example {
                 *       "app_client_id": "my_app_client_123"
                 *     } */
                "application/json": components["schemas"]["AppAccessRequest"];
            };
        };
        responses: {
            /** @description Access granted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "scope": "scope_resource_bodhi-server"
                     *     } */
                    "application/json": components["schemas"]["AppAccessResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    completeOAuthFlow: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OAuth callback parameters from authorization server */
        requestBody: {
            content: {
                /** @example {
                 *       "code": "auth_code_123",
                 *       "state": "random_state_456"
                 *     } */
                "application/json": components["schemas"]["AuthCallbackRequest"];
            };
        };
        responses: {
            /** @description OAuth flow completed successfully, user authenticated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "location": "https://app.example.com/dashboard"
                     *     } */
                    "application/json": components["schemas"]["RedirectResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description OAuth error, invalid request parameters, or state mismatch */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "oauth_state_mismatch",
                     *         "message": "State parameter mismatch",
                     *         "type": "invalid_request_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    initiateOAuthFlow: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": unknown;
            };
        };
        responses: {
            /** @description User already authenticated, home page URL provided */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "location": "https://app.example.com/dashboard"
                     *     } */
                    "application/json": components["schemas"]["RedirectResponse"];
                };
            };
            /** @description User not authenticated, OAuth authorization URL provided */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "location": "https://auth.example.com/auth?client_id=bodhi&redirect_uri=..."
                     *     } */
                    "application/json": components["schemas"]["RedirectResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getAppInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "ready",
                     *       "version": "0.1.0"
                     *     } */
                    "application/json": components["schemas"]["AppInfo"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    logoutUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User logged out successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "location": "https://app.example.com/login"
                     *     } */
                    "application/json": components["schemas"]["RedirectResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listModelFiles: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Local model files retrieved successfully from cache */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
                     *           "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                     *           "size": 4815162,
                     *           "snapshot_id": "ab12cd34"
                     *         }
                     *       ],
                     *       "page": 1,
                     *       "page_size": 10,
                     *       "total": 1
                     *     } */
                    "application/json": components["schemas"]["PaginatedLocalModelResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listDownloads: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Model download requests retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "created_at": "2024-01-15T10:30:00Z",
                     *           "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
                     *           "id": "download_123",
                     *           "progress": 45.5,
                     *           "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                     *           "status": "downloading",
                     *           "updated_at": "2024-01-15T10:35:00Z"
                     *         }
                     *       ],
                     *       "page": 1,
                     *       "page_size": 10,
                     *       "total": 1
                     *     } */
                    "application/json": components["schemas"]["PaginatedDownloadResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    pullModelFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Model file download specification with repository and filename */
        requestBody: {
            content: {
                /** @example {
                 *       "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                 *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF"
                 *     } */
                "application/json": components["schemas"]["NewDownloadRequest"];
            };
        };
        responses: {
            /** @description Existing download request found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "error": null,
                     *       "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                     *       "status": "pending",
                     *       "updated_at": "2024-11-10T04:52:06.786Z"
                     *     } */
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description Download request created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "error": null,
                     *       "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                     *       "status": "pending",
                     *       "updated_at": "2024-11-10T04:52:06.786Z"
                     *     } */
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    pullModelByAlias: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Predefined model alias. Available aliases include popular models like llama2:chat, mistral:instruct, phi3:mini, etc. Use the /models endpoint to see all available aliases.
                 * @example llama2:chat
                 */
                alias: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Existing download request found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "error": null,
                     *       "filename": "llama-2-7b-chat.Q8_0.gguf",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                     *       "status": "pending",
                     *       "updated_at": "2024-11-10T04:52:06.786Z"
                     *     } */
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description Download request created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "error": null,
                     *       "filename": "llama-2-7b-chat.Q8_0.gguf",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                     *       "status": "pending",
                     *       "updated_at": "2024-11-10T04:52:06.786Z"
                     *     } */
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Alias not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "remote_model_not_found_error",
                     *         "message": "remote model alias 'invalid:model' not found, check your alias and try again",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getDownloadStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Unique identifier of the download request (UUID format)
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Download request found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "error": null,
                     *       "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                     *       "status": "completed",
                     *       "updated_at": "2024-01-20T12:00:10Z"
                     *     } */
                    "application/json": components["schemas"]["DownloadRequest"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Download request not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "item_not_found",
                     *         "message": "item '550e8400-e29b-41d4-a716-446655440000' of type 'download_requests' not found in db",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listAllModels: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of model aliases retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "alias": "llama2:chat",
                     *           "context_params": [
                     *             "--ctx_size",
                     *             "4096"
                     *           ],
                     *           "filename": "llama-2-7b-chat.Q4_K_M.gguf",
                     *           "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                     *           "request_params": {
                     *             "temperature": 0.7,
                     *             "top_p": 0.95
                     *           },
                     *           "snapshot": "abc123",
                     *           "source": "user"
                     *         },
                     *         {
                     *           "alias": "TheBloke/Llama-2-7B-Chat-GGUF:Q4_K_M",
                     *           "filename": "llama-2-7b-chat.Q4_K_M.gguf",
                     *           "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                     *           "snapshot": "abc123",
                     *           "source": "model"
                     *         },
                     *         {
                     *           "api_format": "openai",
                     *           "base_url": "https://api.openai.com/v1",
                     *           "created_at": "2024-01-01T00:00:00Z",
                     *           "id": "openai-gpt4",
                     *           "models": [
                     *             "gpt-4",
                     *             "gpt-3.5-turbo"
                     *           ],
                     *           "source": "api",
                     *           "updated_at": "2024-01-01T00:00:00Z"
                     *         }
                     *       ],
                     *       "page": 1,
                     *       "page_size": 10,
                     *       "total": 3
                     *     } */
                    "application/json": components["schemas"]["PaginatedAliasResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    createAlias: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAliasRequest"];
            };
        };
        responses: {
            /** @description Alias created succesfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAliasResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getAlias: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Alias identifier for the model */
                alias: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Model alias details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "alias": "llama2:chat",
                     *       "chat_template": "llama2",
                     *       "context_params": {
                     *         "n_keep": 24,
                     *         "stop": [
                     *           "<|end_of_turn|>"
                     *         ]
                     *       },
                     *       "filename": "llama-2-7b-chat.Q8_0.gguf",
                     *       "model_params": {},
                     *       "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                     *       "request_params": {
                     *         "frequency_penalty": 0,
                     *         "presence_penalty": 0,
                     *         "temperature": 0.7,
                     *         "top_p": 1
                     *       },
                     *       "snapshot": "sha256:abc123",
                     *       "source": "config"
                     *     } */
                    "application/json": components["schemas"]["UserAliasResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Alias not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "alias_not_found",
                     *         "message": "Alias 'unknown:model' not found",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    updateAlias: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Alias identifier
                 * @example llama--3
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAliasRequest"];
            };
        };
        responses: {
            /** @description Alias updated succesfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAliasResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application settings retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "current_value": "info",
                     *         "default_value": "warn",
                     *         "key": "BODHI_LOG_LEVEL",
                     *         "metadata": {
                     *           "options": [
                     *             "error",
                     *             "warn",
                     *             "info",
                     *             "debug",
                     *             "trace"
                     *           ],
                     *           "type": "option"
                     *         },
                     *         "source": "environment"
                     *       },
                     *       {
                     *         "current_value": 1135,
                     *         "default_value": 1135,
                     *         "key": "BODHI_PORT",
                     *         "metadata": {
                     *           "max": 65535,
                     *           "min": 1025,
                     *           "type": "number"
                     *         },
                     *         "source": "default"
                     *       }
                     *     ] */
                    "application/json": components["schemas"]["SettingInfo"][];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    updateSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Setting key identifier (e.g., BODHI_LOG_LEVEL, BODHI_PORT)
                 * @example BODHI_LOG_LEVEL
                 */
                key: string;
            };
            cookie?: never;
        };
        /** @description New setting value */
        requestBody: {
            content: {
                /** @example {
                 *       "value": "debug"
                 *     } */
                "application/json": {
                    /** @description New value for the setting (type depends on setting metadata) */
                    value: unknown;
                };
            };
        };
        responses: {
            /** @description Setting updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "current_value": "debug",
                     *       "default_value": "warn",
                     *       "key": "BODHI_LOG_LEVEL",
                     *       "metadata": {
                     *         "options": [
                     *           "error",
                     *           "warn",
                     *           "info",
                     *           "debug",
                     *           "trace"
                     *         ],
                     *         "type": "option"
                     *       },
                     *       "source": "settings_file"
                     *     } */
                    "application/json": components["schemas"]["SettingInfo"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Setting not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "settings_error-invalid_setting",
                     *         "message": "Setting not found: INVALID_KEY",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    deleteSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Setting key identifier to reset to default value
                 * @example BODHI_LOG_LEVEL
                 */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Setting reset to default successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "current_value": "warn",
                     *       "default_value": "warn",
                     *       "key": "BODHI_LOG_LEVEL",
                     *       "metadata": {
                     *         "options": [
                     *           "error",
                     *           "warn",
                     *           "info",
                     *           "debug",
                     *           "trace"
                     *         ],
                     *         "type": "option"
                     *       },
                     *       "source": "default"
                     *     } */
                    "application/json": components["schemas"]["SettingInfo"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Setting not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "settings_error-not_found",
                     *         "message": "Setting not found: INVALID_KEY",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    setupApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Application setup configuration */
        requestBody: {
            content: {
                /** @example {
                 *       "description": "My personal AI server",
                 *       "name": "My Bodhi Server"
                 *     } */
                "application/json": components["schemas"]["SetupRequest"];
            };
        };
        responses: {
            /** @description Application setup completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "resource-admin"
                     *     } */
                    "application/json": components["schemas"]["SetupResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listApiTokens: {
        parameters: {
            query?: {
                /** @description Page number (1-based indexing) */
                page?: number;
                /** @description Number of items to return per page (maximum 100) */
                page_size?: number;
                /** @description Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at */
                sort?: string;
                /** @description Sort order: 'asc' for ascending, 'desc' for descending */
                sort_order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of API tokens */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "created_at": "2024-11-10T04:52:06.786Z",
                     *           "id": "550e8400-e29b-41d4-a716-446655440000",
                     *           "name": "Development Token",
                     *           "status": "active",
                     *           "token_id": "jwt-token-id-1",
                     *           "updated_at": "2024-11-10T04:52:06.786Z",
                     *           "user_id": "user@email.com"
                     *         },
                     *         {
                     *           "created_at": "2024-11-10T04:52:06.786Z",
                     *           "id": "660e8400-e29b-41d4-a716-446655440000",
                     *           "name": "Test Token",
                     *           "status": "inactive",
                     *           "token_id": "jwt-token-id-2",
                     *           "updated_at": "2024-11-10T04:52:06.786Z",
                     *           "user_id": "user@email.com"
                     *         }
                     *       ],
                     *       "page": 1,
                     *       "page_size": 10,
                     *       "total": 2
                     *     } */
                    "application/json": components["schemas"]["PaginatedApiTokenResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    createApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API token creation parameters */
        requestBody: {
            content: {
                /** @example {
                 *       "name": "My Integration Token",
                 *       "scopes": [
                 *         "scope_token_user"
                 *       ]
                 *     } */
                "application/json": components["schemas"]["CreateApiTokenRequest"];
            };
        };
        responses: {
            /** @description API token created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "offline_token": "bapp_1234567890abcdef"
                     *     } */
                    "application/json": components["schemas"]["ApiTokenResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    updateApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Unique identifier of the API token to update
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                id: string;
            };
            cookie?: never;
        };
        /** @description Token update request */
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Updated Token Name",
                 *       "status": "inactive"
                 *     } */
                "application/json": components["schemas"]["UpdateApiTokenRequest"];
            };
        };
        responses: {
            /** @description Token updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created_at": "2024-11-10T04:52:06.786Z",
                     *       "id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "name": "Updated Token Name",
                     *       "status": "inactive",
                     *       "token_id": "jwt-token-id-1",
                     *       "updated_at": "2024-11-10T04:52:06.786Z",
                     *       "user_id": "auth0|123456789"
                     *     } */
                    "application/json": components["schemas"]["ApiToken"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Token not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "entity_error-not_found",
                     *         "message": "Token not found",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current user information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "auth_status": "logged_in",
                     *       "role": "resource_admin",
                     *       "user_id": "550e8400-e29b-41d4-a716-446655440000",
                     *       "username": "user@example.com"
                     *     } */
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    requestUserAccess: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Access request created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Pending request already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description User already has role */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getUserAccessStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request status retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAccessStatusResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Request not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listUsers: {
        parameters: {
            query?: {
                /**
                 * @description Page number (1-based)
                 * @example 1
                 */
                page?: number;
                /**
                 * @description Number of users per page
                 * @example 10
                 */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    removeUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID to remove */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    changeUserRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID to change role for */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangeRoleRequest"];
            };
        };
        responses: {
            /** @description Role changed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application is healthy and fully operational */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "pong"
                     *     } */
                    "application/json": components["schemas"]["PingResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    pingServer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Server is responding normally */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "pong"
                     *     } */
                    "application/json": components["schemas"]["PingResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    createChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "max_tokens": 100,
                 *       "messages": [
                 *         {
                 *           "content": "You are a helpful assistant.",
                 *           "role": "system"
                 *         },
                 *         {
                 *           "content": "Hello!",
                 *           "role": "user"
                 *         }
                 *       ],
                 *       "model": "llama2:chat",
                 *       "stream": false,
                 *       "temperature": 0.7
                 *     } */
                "application/json": components["schemas"]["CreateChatCompletionRequest"];
            };
        };
        responses: {
            /** @description Chat completion response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "choices": [
                     *         {
                     *           "finish_reason": "stop",
                     *           "index": 0,
                     *           "message": {
                     *             "content": "Hello! How can I help you today?",
                     *             "role": "assistant"
                     *           }
                     *         }
                     *       ],
                     *       "created": 1677610602,
                     *       "id": "chatcmpl-123",
                     *       "model": "llama2:chat",
                     *       "object": "chat.completion",
                     *       "usage": {
                     *         "completion_tokens": 10,
                     *         "prompt_tokens": 20,
                     *         "total_tokens": 30
                     *       }
                     *     } */
                    "application/json": components["schemas"]["CreateChatCompletionResponse"];
                };
            };
            /** @description Chat completion stream, the status is 200, using 201 to avoid OpenAPI format limitation. */
            201: {
                headers: {
                    /** @description No-cache directive */
                    "Cache-Control"?: string;
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "choices": [
                     *         {
                     *           "delta": {
                     *             "content": "Hello"
                     *           },
                     *           "finish_reason": null,
                     *           "index": 0
                     *         }
                     *       ],
                     *       "created": 1694268190,
                     *       "id": "chatcmpl-123",
                     *       "model": "llama2:chat",
                     *       "object": "chat.completion.chunk"
                     *     } */
                    "text/event-stream": components["schemas"]["CreateChatCompletionStreamResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    createEmbedding: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "input": "The quick brown fox jumps over the lazy dog",
                 *       "model": "text-embedding-model"
                 *     } */
                "application/json": components["schemas"]["CreateEmbeddingRequest"];
            };
        };
        responses: {
            /** @description Embedding response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "embedding": [
                     *             0.1,
                     *             0.2,
                     *             0.3
                     *           ],
                     *           "index": 0,
                     *           "object": "embedding"
                     *         }
                     *       ],
                     *       "model": "text-embedding-model",
                     *       "object": "list",
                     *       "usage": {
                     *         "prompt_tokens": 8,
                     *         "total_tokens": 8
                     *       }
                     *     } */
                    "application/json": components["schemas"]["CreateEmbeddingResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    listModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of available models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "created": 1677610602,
                     *           "id": "llama2:chat",
                     *           "object": "model",
                     *           "owned_by": "bodhi"
                     *         },
                     *         {
                     *           "created": 1677610602,
                     *           "id": "mistral:instruct",
                     *           "object": "model",
                     *           "owned_by": "bodhi"
                     *         }
                     *       ],
                     *       "object": "list"
                     *     } */
                    "application/json": components["schemas"]["ListModelResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
    getModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Model identifier - can be user alias (e.g., 'llama2:chat'), model alias, or API provider alias
                 * @example llama2:chat
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Model details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "created": 1677610602,
                     *       "id": "llama2:chat",
                     *       "object": "model",
                     *       "owned_by": "system"
                     *     } */
                    "application/json": components["schemas"]["ModelResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "model_not_found",
                     *         "message": "Model 'unknown:model' not found",
                     *         "type": "not_found_error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIApiError"];
                };
            };
        };
    };
}
