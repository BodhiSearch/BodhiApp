// This file is auto-generated by @hey-api/openapi-ts

/**
 * Flat enum representing all types of model aliases
 * Each variant is identified by the source field
 */
export type Alias = (UserAlias & {
    source: 'user';
}) | (ModelAlias & {
    source: 'model';
}) | (ApiAlias & {
    source: 'api';
});

export type ApiAlias = {
    api_format: ApiFormat;
    base_url: string;
    created_at: string;
    id: string;
    models: Array<string>;
    prefix?: string | null;
    updated_at: string;
};

/**
 * API format/protocol specification
 */
export type ApiFormat = 'openai' | 'placeholder';

/**
 * Response containing available API formats
 */
export type ApiFormatsResponse = {
    data: Array<ApiFormat>;
};

/**
 * Response containing API model configuration
 */
export type ApiModelResponse = {
    api_format: ApiFormat;
    api_key_masked: string;
    base_url: string;
    created_at: string;
    id: string;
    models: Array<string>;
    prefix?: string | null;
    updated_at: string;
};

export type ApiToken = {
    created_at: string;
    id: string;
    name: string;
    status: TokenStatus;
    token_hash: string;
    token_id: string;
    updated_at: string;
    user_id: string;
};

export type ApiTokenResponse = {
    /**
     * API token with bapp_ prefix for programmatic access
     */
    offline_token: string;
};

export type AppAccessRequest = {
    app_client_id: string;
};

export type AppAccessResponse = {
    scope: string;
};

/**
 * Application information and status
 */
export type AppInfo = {
    /**
     * Current application setup and operational status
     */
    status: AppStatus;
    /**
     * Application version number (semantic versioning)
     */
    version: string;
};

export type AppRole = Role | TokenScope | UserScope;

export type AppStatus = 'setup' | 'ready' | 'resource-admin';

/**
 * Request body for approving access with role assignment
 */
export type ApproveUserAccessRequest = {
    /**
     * Role to assign to the user
     */
    role: Role;
};

export type AuthCallbackRequest = {
    /**
     * OAuth authorization code from successful authentication (required for success flow)
     */
    code?: string | null;
    /**
     * OAuth error code if authentication failed (e.g., "access_denied")
     */
    error?: string | null;
    /**
     * Human-readable OAuth error description if authentication failed
     */
    error_description?: string | null;
    /**
     * OAuth state parameter for CSRF protection (must match initiated request)
     */
    state?: string | null;
    [key: string]: string | (string | null) | (string | null) | (string | null) | (string | null) | undefined;
};

/**
 * Change user role request
 */
export type ChangeRoleRequest = {
    /**
     * Role to assign to the user
     */
    role: string;
};

export type ChatRequest = {
    format?: string | null;
    keep_alive?: null | Duration;
    messages: Array<Message>;
    model: string;
    options?: null | Options;
    stream?: boolean | null;
};

export type CreateAliasRequest = {
    alias: string;
    context_params?: Array<string> | null;
    filename: string;
    repo: string;
    request_params?: null | OaiRequestParams;
    snapshot?: string | null;
};

/**
 * Request to create a new API model configuration
 */
export type CreateApiModelRequest = {
    /**
     * API format/protocol (e.g., "openai")
     */
    api_format: ApiFormat;
    /**
     * API key for authentication
     */
    api_key: string;
    /**
     * API base URL
     */
    base_url: string;
    /**
     * List of available models
     */
    models: Array<string>;
    /**
     * Optional prefix for model namespacing (e.g., "azure/" for "azure/gpt-4", "openai:" for "openai:gpt-4")
     */
    prefix?: string | null;
};

/**
 * Request to create a new API token
 */
export type CreateApiTokenRequest = {
    /**
     * Descriptive name for the API token (minimum 3 characters)
     */
    name?: string | null;
};

export type DownloadRequest = {
    created_at: string;
    downloaded_bytes?: number;
    error?: string | null;
    filename: string;
    id: string;
    repo: string;
    started_at: string;
    status: DownloadStatus;
    total_bytes?: number | null;
    updated_at: string;
};

export type DownloadStatus = 'pending' | 'completed' | 'error';

export type Duration = string;

export type EmptyResponse = {
    [key: string]: unknown;
};

export type ErrorBody = {
    /**
     * Specific error code for programmatic error handling
     */
    code?: string | null;
    /**
     * Human-readable error message describing what went wrong
     */
    message: string;
    /**
     * Parameter name that caused the error (for validation errors)
     */
    param?: string | null;
    /**
     * Error type categorizing the kind of error that occurred
     */
    type: string;
};

/**
 * Request to fetch available models from provider
 */
export type FetchModelsRequest = {
    /**
     * API key for authentication (provide either api_key OR id, api_key takes preference if both provided)
     */
    api_key?: string;
    /**
     * API base URL (optional when using id)
     */
    base_url: string;
    /**
     * API model ID to look up stored credentials (provide either api_key OR id, api_key takes preference if both provided)
     */
    id?: string;
};

/**
 * Response containing available models from provider
 */
export type FetchModelsResponse = {
    models: Array<string>;
};

export type ListModelResponse = {
    data: Array<{
        /**
         * The Unix timestamp (in seconds) when the model was created.
         */
        created: number;
        /**
         * The model identifier, which can be referenced in the API endpoints.
         */
        id: string;
        /**
         * The object type, which is always "model".
         */
        object: string;
        /**
         * The organization that owns the model.
         */
        owned_by: string;
    }>;
    object: string;
};

/**
 * List users query parameters
 */
export type ListUsersParams = {
    page?: number | null;
    page_size?: number | null;
};

export type LocalModelResponse = {
    filename: string;
    model_params: {};
    repo: string;
    size?: number | null;
    snapshot: string;
};

export type Message = {
    content: string;
    images?: Array<string> | null;
    role: string;
};

export type Model = {
    details: ModelDetails;
    digest: string;
    model: string;
    modified_at: number;
    size: number;
};

export type ModelAlias = {
    alias: string;
    filename: string;
    repo: string;
    snapshot: string;
};

export type ModelDetails = {
    families?: Array<string> | null;
    family: string;
    format: string;
    parameter_size: string;
    parent_model?: string | null;
    quantization_level: string;
};

/**
 * Describes an OpenAI model offering that can be used with the API.
 */
export type ModelResponse = {
    /**
     * The Unix timestamp (in seconds) when the model was created.
     */
    created: number;
    /**
     * The model identifier, which can be referenced in the API endpoints.
     */
    id: string;
    /**
     * The object type, which is always "model".
     */
    object: string;
    /**
     * The organization that owns the model.
     */
    owned_by: string;
};

export type ModelsResponse = {
    models: Array<Model>;
};

/**
 * Request to pull a model file from HuggingFace
 */
export type NewDownloadRequest = {
    /**
     * Model file name to download (typically .gguf format)
     */
    filename: string;
    /**
     * HuggingFace repository name in format 'username/repository-name'
     */
    repo: string;
};

export type OaiRequestParams = {
    frequency_penalty?: number | null;
    max_tokens?: number | null;
    presence_penalty?: number | null;
    seed?: number | null;
    stop?: Array<string>;
    temperature?: number | null;
    top_p?: number | null;
    user?: string | null;
};

export type OllamaError = {
    error: string;
};

export type OpenAiApiError = {
    /**
     * Error details following OpenAI API error format
     */
    error: ErrorBody;
};

export type Options = {
    f16_kv?: boolean | null;
    frequency_penalty?: number | null;
    logits_all?: boolean | null;
    low_vram?: boolean | null;
    main_gpu?: number | null;
    mirostat?: number | null;
    mirostat_eta?: number | null;
    mirostat_tau?: number | null;
    num_batch?: number | null;
    num_ctx?: number | null;
    num_gpu?: number | null;
    num_keep?: number | null;
    num_predict?: number | null;
    num_thread?: number | null;
    numa?: boolean | null;
    penalize_newline?: boolean | null;
    presence_penalty?: number | null;
    repeat_last_n?: number | null;
    repeat_penalty?: number | null;
    seed?: number | null;
    stop?: Array<string> | null;
    temperature?: number | null;
    tfs_z?: number | null;
    top_k?: number | null;
    top_p?: number | null;
    typical_p?: number | null;
    use_mlock?: boolean | null;
    use_mmap?: boolean | null;
    vocab_only?: boolean | null;
};

export type PaginatedAliasResponse = {
    data: Array<Alias>;
    page: number;
    page_size: number;
    total: number;
};

/**
 * Paginated response for API model listings
 */
export type PaginatedApiModelResponse = {
    data: Array<ApiModelResponse>;
    page: number;
    page_size: number;
    total: number;
};

export type PaginatedApiTokenResponse = {
    data: Array<ApiToken>;
    page: number;
    page_size: number;
    total: number;
};

export type PaginatedDownloadResponse = {
    data: Array<DownloadRequest>;
    page: number;
    page_size: number;
    total: number;
};

export type PaginatedLocalModelResponse = {
    data: Array<LocalModelResponse>;
    page: number;
    page_size: number;
    total: number;
};

/**
 * Paginated response for access requests
 */
export type PaginatedUserAccessResponse = {
    /**
     * Current page number
     */
    page: number;
    /**
     * Number of items per page
     */
    page_size: number;
    /**
     * List of access requests
     */
    requests: Array<UserAccessRequest>;
    /**
     * Total number of requests
     */
    total: number;
};

export type PaginatedUserAliasResponse = {
    data: Array<UserAliasResponse>;
    page: number;
    page_size: number;
    total: number;
};

/**
 * Query parameters for pagination and sorting
 */
export type PaginationSortParams = {
    /**
     * Page number (1-based indexing)
     */
    page?: number;
    /**
     * Number of items to return per page (maximum 100)
     */
    page_size?: number;
    /**
     * Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at
     */
    sort?: string | null;
    /**
     * Sort order: 'asc' for ascending, 'desc' for descending
     */
    sort_order?: string;
};

/**
 * Response to the ping endpoint
 */
export type PingResponse = {
    /**
     * Simple ping response message
     */
    message: string;
};

export type RedirectResponse = {
    /**
     * The URL to redirect to (OAuth authorization URL or application home page)
     */
    location: string;
};

export type Role = 'resource_user' | 'resource_power_user' | 'resource_manager' | 'resource_admin';

export type SettingInfo = {
    current_value: unknown;
    default_value: unknown;
    key: string;
    metadata: SettingMetadata;
    source: SettingSource;
};

export type SettingMetadata = {
    type: 'string';
} | {
    max: number;
    min: number;
    type: 'number';
} | {
    type: 'boolean';
} | {
    options: Array<string>;
    type: 'option';
};

export type SettingSource = 'system' | 'command_line' | 'environment' | 'settings_file' | 'default';

/**
 * Request to setup the application in authenticated mode
 */
export type SetupRequest = {
    /**
     * Optional description of the server's purpose
     */
    description?: string | null;
    /**
     * Server name for identification (minimum 10 characters)
     */
    name: string;
};

/**
 * Response containing the updated application status after setup
 */
export type SetupResponse = {
    /**
     * New application status after successful setup
     */
    status: AppStatus;
};

export type ShowRequest = {
    name: string;
};

export type ShowResponse = {
    details: ModelDetails;
    license: string;
    model_info: {};
    modelfile: string;
    modified_at: number;
    parameters: string;
    template: string;
};

/**
 * Request to test API connectivity with a prompt
 */
export type TestPromptRequest = {
    /**
     * API key for authentication (provide either api_key OR id, api_key takes preference if both provided)
     */
    api_key?: string;
    /**
     * API base URL (optional when using id)
     */
    base_url: string;
    /**
     * API model ID to look up stored credentials (provide either api_key OR id, api_key takes preference if both provided)
     */
    id?: string;
    /**
     * Model to use for testing
     */
    model: string;
    /**
     * Test prompt (max 30 characters for cost control)
     */
    prompt: string;
};

/**
 * Response from testing API connectivity
 */
export type TestPromptResponse = {
    error?: string | null;
    response?: string | null;
    success: boolean;
};

export type TokenScope = 'scope_token_user' | 'scope_token_power_user' | 'scope_token_manager' | 'scope_token_admin';

export type TokenStatus = 'active' | 'inactive';

export type UpdateAliasRequest = {
    context_params?: Array<string> | null;
    filename: string;
    repo: string;
    request_params?: null | OaiRequestParams;
    snapshot?: string | null;
};

/**
 * Request to update an existing API model configuration
 */
export type UpdateApiModelRequest = {
    /**
     * API format/protocol (required)
     */
    api_format: ApiFormat;
    /**
     * API key for authentication (optional, only update if provided for security)
     */
    api_key?: string | null;
    /**
     * API base URL (required)
     */
    base_url: string;
    /**
     * List of available models (required)
     */
    models: Array<string>;
    /**
     * Optional prefix for model namespacing
     */
    prefix?: string | null;
};

/**
 * Request to update an existing API token
 */
export type UpdateApiTokenRequest = {
    /**
     * New descriptive name for the token (minimum 3 characters)
     */
    name: string;
    /**
     * New status for the token (active/inactive)
     */
    status: TokenStatus;
};

/**
 * Request to update a setting value
 */
export type UpdateSettingRequest = {
    /**
     * New value for the setting (type depends on setting metadata)
     */
    value: unknown;
};

export type UserAccessRequest = {
    /**
     * Creation timestamp
     */
    created_at: string;
    /**
     * Unique identifier for the request
     */
    id: number;
    reviewer?: string | null;
    /**
     * Current status of the request
     */
    status: UserAccessRequestStatus;
    /**
     * Last update timestamp
     */
    updated_at: string;
    /**
     * User ID (UUID) of the requesting user
     */
    user_id: string;
    /**
     * Username of the requesting user
     */
    username: string;
};

export type UserAccessRequestStatus = 'pending' | 'approved' | 'rejected';

/**
 * Response for checking access request status
 */
export type UserAccessStatusResponse = {
    /**
     * Creation timestamp
     */
    created_at: string;
    /**
     * Current status of the request (pending, approved, rejected)
     */
    status: UserAccessRequestStatus;
    /**
     * Last update timestamp
     */
    updated_at: string;
    /**
     * Username of the requesting user
     */
    username: string;
};

export type UserAlias = {
    alias: string;
    context_params?: Array<string>;
    filename: string;
    repo: string;
    request_params?: OaiRequestParams;
    snapshot: string;
};

export type UserAliasResponse = {
    alias: string;
    context_params: Array<string>;
    filename: string;
    model_params: {};
    repo: string;
    request_params: OaiRequestParams;
    snapshot: string;
    source: string;
};

export type UserInfo = {
    first_name?: string | null;
    last_name?: string | null;
    role?: null | AppRole;
    user_id: string;
    username: string;
};

export type UserListResponse = {
    client_id: string;
    has_next: boolean;
    has_previous: boolean;
    page: number;
    page_size: number;
    total_pages: number;
    total_users: number;
    users: Array<UserInfo>;
};

/**
 * User authentication response with discriminated union
 */
export type UserResponse = {
    auth_status: 'logged_out';
} | (UserInfo & {
    auth_status: 'logged_in';
});

export type UserScope = 'scope_user_user' | 'scope_user_power_user' | 'scope_user_manager' | 'scope_user_admin';

export type ChatOllamaModelData = {
    /**
     * Chat request in Ollama format
     */
    body: ChatRequest;
    path?: never;
    query?: never;
    url: '/api/chat';
};

export type ChatOllamaModelErrors = {
    /**
     * Invalid request
     */
    400: OllamaError;
    /**
     * Model not found
     */
    404: OllamaError;
    /**
     * Internal server error
     */
    500: OllamaError;
};

export type ChatOllamaModelError = ChatOllamaModelErrors[keyof ChatOllamaModelErrors];

export type ChatOllamaModelResponses = {
    /**
     * Chat response
     */
    200: unknown;
};

export type ShowOllamaModelData = {
    /**
     * Model name to get details for
     */
    body: ShowRequest;
    path?: never;
    query?: never;
    url: '/api/show';
};

export type ShowOllamaModelErrors = {
    /**
     * Model not found
     */
    404: OllamaError;
    /**
     * Internal server error
     */
    500: OllamaError;
};

export type ShowOllamaModelError = ShowOllamaModelErrors[keyof ShowOllamaModelErrors];

export type ShowOllamaModelResponses = {
    /**
     * Model details
     */
    200: ShowResponse;
};

export type ShowOllamaModelResponse = ShowOllamaModelResponses[keyof ShowOllamaModelResponses];

export type ListOllamaModelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/tags';
};

export type ListOllamaModelsErrors = {
    /**
     * Internal server error
     */
    500: OllamaError;
};

export type ListOllamaModelsError = ListOllamaModelsErrors[keyof ListOllamaModelsErrors];

export type ListOllamaModelsResponses = {
    /**
     * List of available models
     */
    200: ModelsResponse;
};

export type ListOllamaModelsResponse = ListOllamaModelsResponses[keyof ListOllamaModelsResponses];

export type ListAllAccessRequestsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based indexing)
         */
        page?: number;
        /**
         * Number of items to return per page (maximum 100)
         */
        page_size?: number;
        /**
         * Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at
         */
        sort?: string;
        /**
         * Sort order: 'asc' for ascending, 'desc' for descending
         */
        sort_order?: string;
    };
    url: '/bodhi/v1/access-requests';
};

export type ListAllAccessRequestsErrors = {
    /**
     * Not authenticated
     */
    401: OpenAiApiError;
    /**
     * Insufficient permissions
     */
    403: OpenAiApiError;
};

export type ListAllAccessRequestsError = ListAllAccessRequestsErrors[keyof ListAllAccessRequestsErrors];

export type ListAllAccessRequestsResponses = {
    /**
     * All requests retrieved
     */
    200: PaginatedUserAccessResponse;
};

export type ListAllAccessRequestsResponse = ListAllAccessRequestsResponses[keyof ListAllAccessRequestsResponses];

export type ListPendingAccessRequestsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based indexing)
         */
        page?: number;
        /**
         * Number of items to return per page (maximum 100)
         */
        page_size?: number;
        /**
         * Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at
         */
        sort?: string;
        /**
         * Sort order: 'asc' for ascending, 'desc' for descending
         */
        sort_order?: string;
    };
    url: '/bodhi/v1/access-requests/pending';
};

export type ListPendingAccessRequestsErrors = {
    /**
     * Not authenticated
     */
    401: OpenAiApiError;
    /**
     * Insufficient permissions
     */
    403: OpenAiApiError;
};

export type ListPendingAccessRequestsError = ListPendingAccessRequestsErrors[keyof ListPendingAccessRequestsErrors];

export type ListPendingAccessRequestsResponses = {
    /**
     * Pending requests retrieved
     */
    200: PaginatedUserAccessResponse;
};

export type ListPendingAccessRequestsResponse = ListPendingAccessRequestsResponses[keyof ListPendingAccessRequestsResponses];

export type ApproveAccessRequestData = {
    /**
     * Role to assign to the user
     */
    body: ApproveUserAccessRequest;
    path: {
        /**
         * Access request ID
         */
        id: number;
    };
    query?: never;
    url: '/bodhi/v1/access-requests/{id}/approve';
};

export type ApproveAccessRequestErrors = {
    /**
     * Not authenticated
     */
    401: OpenAiApiError;
    /**
     * Insufficient permissions
     */
    403: OpenAiApiError;
    /**
     * Request not found
     */
    404: OpenAiApiError;
};

export type ApproveAccessRequestError = ApproveAccessRequestErrors[keyof ApproveAccessRequestErrors];

export type ApproveAccessRequestResponses = {
    /**
     * Request approved successfully
     */
    200: unknown;
};

export type RejectAccessRequestData = {
    body?: never;
    path: {
        /**
         * Access request ID
         */
        id: number;
    };
    query?: never;
    url: '/bodhi/v1/access-requests/{id}/reject';
};

export type RejectAccessRequestErrors = {
    /**
     * Not authenticated
     */
    401: OpenAiApiError;
    /**
     * Insufficient permissions
     */
    403: OpenAiApiError;
    /**
     * Request not found
     */
    404: OpenAiApiError;
};

export type RejectAccessRequestError = RejectAccessRequestErrors[keyof RejectAccessRequestErrors];

export type RejectAccessRequestResponses = {
    /**
     * Request rejected successfully
     */
    200: unknown;
};

export type ListApiModelsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based indexing)
         */
        page?: number;
        /**
         * Number of items to return per page (maximum 100)
         */
        page_size?: number;
        /**
         * Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at
         */
        sort?: string;
        /**
         * Sort order: 'asc' for ascending, 'desc' for descending
         */
        sort_order?: string;
    };
    url: '/bodhi/v1/api-models';
};

export type ListApiModelsErrors = {
    /**
     * Internal server error during API model retrieval
     */
    500: OpenAiApiError;
};

export type ListApiModelsError = ListApiModelsErrors[keyof ListApiModelsErrors];

export type ListApiModelsResponses = {
    /**
     * API model configurations retrieved successfully
     */
    200: PaginatedApiModelResponse;
};

export type ListApiModelsResponse = ListApiModelsResponses[keyof ListApiModelsResponses];

export type CreateApiModelData = {
    body: CreateApiModelRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/api-models';
};

export type CreateApiModelErrors = {
    /**
     * Invalid request
     */
    400: OpenAiApiError;
    /**
     * Alias already exists
     */
    409: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type CreateApiModelError = CreateApiModelErrors[keyof CreateApiModelErrors];

export type CreateApiModelResponses = {
    /**
     * API model created
     */
    201: ApiModelResponse;
};

export type CreateApiModelResponse = CreateApiModelResponses[keyof CreateApiModelResponses];

export type GetApiFormatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bodhi/v1/api-models/api-formats';
};

export type GetApiFormatsErrors = {
    /**
     * Internal server error during API format retrieval
     */
    500: OpenAiApiError;
};

export type GetApiFormatsError = GetApiFormatsErrors[keyof GetApiFormatsErrors];

export type GetApiFormatsResponses = {
    /**
     * API formats retrieved successfully
     */
    200: ApiFormatsResponse;
};

export type GetApiFormatsResponse = GetApiFormatsResponses[keyof GetApiFormatsResponses];

export type FetchApiModelsData = {
    body: FetchModelsRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/api-models/fetch-models';
};

export type FetchApiModelsErrors = {
    /**
     * Invalid request
     */
    400: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type FetchApiModelsError = FetchApiModelsErrors[keyof FetchApiModelsErrors];

export type FetchApiModelsResponses = {
    /**
     * Available models
     */
    200: FetchModelsResponse;
};

export type FetchApiModelsResponse = FetchApiModelsResponses[keyof FetchApiModelsResponses];

export type TestApiModelData = {
    body: TestPromptRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/api-models/test';
};

export type TestApiModelErrors = {
    /**
     * Invalid request
     */
    400: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type TestApiModelError = TestApiModelErrors[keyof TestApiModelErrors];

export type TestApiModelResponses = {
    /**
     * Test result
     */
    200: TestPromptResponse;
};

export type TestApiModelResponse = TestApiModelResponses[keyof TestApiModelResponses];

export type DeleteApiModelData = {
    body?: never;
    path: {
        /**
         * API model alias
         */
        alias: string;
    };
    query?: never;
    url: '/bodhi/v1/api-models/{alias}';
};

export type DeleteApiModelErrors = {
    /**
     * API model not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type DeleteApiModelError = DeleteApiModelErrors[keyof DeleteApiModelErrors];

export type DeleteApiModelResponses = {
    /**
     * API model deleted
     */
    204: void;
};

export type DeleteApiModelResponse = DeleteApiModelResponses[keyof DeleteApiModelResponses];

export type UpdateApiModelData = {
    body: UpdateApiModelRequest;
    path: {
        /**
         * API model alias
         */
        alias: string;
    };
    query?: never;
    url: '/bodhi/v1/api-models/{alias}';
};

export type UpdateApiModelErrors = {
    /**
     * Invalid request
     */
    400: OpenAiApiError;
    /**
     * API model not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type UpdateApiModelError = UpdateApiModelErrors[keyof UpdateApiModelErrors];

export type UpdateApiModelResponses = {
    /**
     * API model updated
     */
    200: ApiModelResponse;
};

export type UpdateApiModelResponse = UpdateApiModelResponses[keyof UpdateApiModelResponses];

export type GetApiModelData = {
    body?: never;
    path: {
        /**
         * Unique identifier for the API model alias
         */
        id: string;
    };
    query?: never;
    url: '/bodhi/v1/api-models/{id}';
};

export type GetApiModelErrors = {
    /**
     * API model with specified ID not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error during model retrieval
     */
    500: OpenAiApiError;
};

export type GetApiModelError = GetApiModelErrors[keyof GetApiModelErrors];

export type GetApiModelResponses = {
    /**
     * API model configuration retrieved successfully
     */
    200: ApiModelResponse;
};

export type GetApiModelResponse = GetApiModelResponses[keyof GetApiModelResponses];

export type RequestAccessData = {
    /**
     * Application client requesting access
     */
    body: AppAccessRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/apps/request-access';
};

export type RequestAccessErrors = {
    /**
     * Invalid request, application not registered, or incorrect app status
     */
    400: OpenAiApiError;
    /**
     * Internal server error during access request
     */
    500: OpenAiApiError;
};

export type RequestAccessError = RequestAccessErrors[keyof RequestAccessErrors];

export type RequestAccessResponses = {
    /**
     * Access granted successfully
     */
    200: AppAccessResponse;
};

export type RequestAccessResponse = RequestAccessResponses[keyof RequestAccessResponses];

export type CompleteOAuthFlowData = {
    /**
     * OAuth callback parameters from authorization server
     */
    body: AuthCallbackRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/auth/callback';
};

export type CompleteOAuthFlowErrors = {
    /**
     * OAuth error, invalid request parameters, or state mismatch
     */
    422: OpenAiApiError;
    /**
     * Internal server error during token exchange
     */
    500: OpenAiApiError;
};

export type CompleteOAuthFlowError = CompleteOAuthFlowErrors[keyof CompleteOAuthFlowErrors];

export type CompleteOAuthFlowResponses = {
    /**
     * OAuth flow completed successfully, user authenticated
     */
    200: RedirectResponse;
};

export type CompleteOAuthFlowResponse = CompleteOAuthFlowResponses[keyof CompleteOAuthFlowResponses];

export type InitiateOAuthFlowData = {
    body: unknown;
    path?: never;
    query?: never;
    url: '/bodhi/v1/auth/initiate';
};

export type InitiateOAuthFlowErrors = {
    /**
     * Internal server error during OAuth initialization
     */
    500: OpenAiApiError;
};

export type InitiateOAuthFlowError = InitiateOAuthFlowErrors[keyof InitiateOAuthFlowErrors];

export type InitiateOAuthFlowResponses = {
    /**
     * User already authenticated, home page URL provided
     */
    200: RedirectResponse;
    /**
     * User not authenticated, OAuth authorization URL provided
     */
    201: RedirectResponse;
};

export type InitiateOAuthFlowResponse = InitiateOAuthFlowResponses[keyof InitiateOAuthFlowResponses];

export type GetAppInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bodhi/v1/info';
};

export type GetAppInfoErrors = {
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type GetAppInfoError = GetAppInfoErrors[keyof GetAppInfoErrors];

export type GetAppInfoResponses = {
    /**
     * Application information retrieved successfully
     */
    200: AppInfo;
};

export type GetAppInfoResponse = GetAppInfoResponses[keyof GetAppInfoResponses];

export type LogoutUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bodhi/v1/logout';
};

export type LogoutUserErrors = {
    /**
     * Session deletion failed
     */
    500: OpenAiApiError;
};

export type LogoutUserError = LogoutUserErrors[keyof LogoutUserErrors];

export type LogoutUserResponses = {
    /**
     * User logged out successfully
     */
    200: RedirectResponse;
};

export type LogoutUserResponse = LogoutUserResponses[keyof LogoutUserResponses];

export type ListModelFilesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based indexing)
         */
        page?: number;
        /**
         * Number of items to return per page (maximum 100)
         */
        page_size?: number;
        /**
         * Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at
         */
        sort?: string;
        /**
         * Sort order: 'asc' for ascending, 'desc' for descending
         */
        sort_order?: string;
    };
    url: '/bodhi/v1/modelfiles';
};

export type ListModelFilesErrors = {
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListModelFilesError = ListModelFilesErrors[keyof ListModelFilesErrors];

export type ListModelFilesResponses = {
    /**
     * Local model files retrieved successfully from cache
     */
    200: PaginatedLocalModelResponse;
};

export type ListModelFilesResponse = ListModelFilesResponses[keyof ListModelFilesResponses];

export type ListDownloadsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based indexing)
         */
        page?: number;
        /**
         * Number of items to return per page (maximum 100)
         */
        page_size?: number;
        /**
         * Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at
         */
        sort?: string;
        /**
         * Sort order: 'asc' for ascending, 'desc' for descending
         */
        sort_order?: string;
    };
    url: '/bodhi/v1/modelfiles/pull';
};

export type ListDownloadsErrors = {
    /**
     * Internal server error during download list retrieval
     */
    500: OpenAiApiError;
};

export type ListDownloadsError = ListDownloadsErrors[keyof ListDownloadsErrors];

export type ListDownloadsResponses = {
    /**
     * Model download requests retrieved successfully
     */
    200: PaginatedDownloadResponse;
};

export type ListDownloadsResponse = ListDownloadsResponses[keyof ListDownloadsResponses];

export type PullModelFileData = {
    /**
     * Model file download specification with repository and filename
     */
    body: NewDownloadRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/modelfiles/pull';
};

export type PullModelFileErrors = {
    /**
     * File already exists or invalid input
     */
    400: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type PullModelFileError = PullModelFileErrors[keyof PullModelFileErrors];

export type PullModelFileResponses = {
    /**
     * Existing download request found
     */
    200: DownloadRequest;
    /**
     * Download request created
     */
    201: DownloadRequest;
};

export type PullModelFileResponse = PullModelFileResponses[keyof PullModelFileResponses];

export type PullModelByAliasData = {
    body?: never;
    path: {
        /**
         * Predefined model alias. Available aliases include popular models like llama2:chat, mistral:instruct, phi3:mini, etc. Use the /models endpoint to see all available aliases.
         */
        alias: string;
    };
    query?: never;
    url: '/bodhi/v1/modelfiles/pull/{alias}';
};

export type PullModelByAliasErrors = {
    /**
     * File already exists
     */
    400: OpenAiApiError;
    /**
     * Alias not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type PullModelByAliasError = PullModelByAliasErrors[keyof PullModelByAliasErrors];

export type PullModelByAliasResponses = {
    /**
     * Existing download request found
     */
    200: DownloadRequest;
    /**
     * Download request created
     */
    201: DownloadRequest;
};

export type PullModelByAliasResponse = PullModelByAliasResponses[keyof PullModelByAliasResponses];

export type GetDownloadStatusData = {
    body?: never;
    path: {
        /**
         * Unique identifier of the download request (UUID format)
         */
        id: string;
    };
    query?: never;
    url: '/bodhi/v1/modelfiles/pull/{id}';
};

export type GetDownloadStatusErrors = {
    /**
     * Download request not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type GetDownloadStatusError = GetDownloadStatusErrors[keyof GetDownloadStatusErrors];

export type GetDownloadStatusResponses = {
    /**
     * Download request found
     */
    200: DownloadRequest;
};

export type GetDownloadStatusResponse = GetDownloadStatusResponses[keyof GetDownloadStatusResponses];

export type ListAllModelsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based indexing)
         */
        page?: number;
        /**
         * Number of items to return per page (maximum 100)
         */
        page_size?: number;
        /**
         * Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at
         */
        sort?: string;
        /**
         * Sort order: 'asc' for ascending, 'desc' for descending
         */
        sort_order?: string;
    };
    url: '/bodhi/v1/models';
};

export type ListAllModelsErrors = {
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListAllModelsError = ListAllModelsErrors[keyof ListAllModelsErrors];

export type ListAllModelsResponses = {
    /**
     * Paginated list of model aliases retrieved successfully
     */
    200: PaginatedAliasResponse;
};

export type ListAllModelsResponse = ListAllModelsResponses[keyof ListAllModelsResponses];

export type CreateAliasData = {
    body: CreateAliasRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/models';
};

export type CreateAliasErrors = {
    /**
     * Invalid request
     */
    400: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type CreateAliasError = CreateAliasErrors[keyof CreateAliasErrors];

export type CreateAliasResponses = {
    /**
     * Alias created succesfully
     */
    201: UserAliasResponse;
};

export type CreateAliasResponse = CreateAliasResponses[keyof CreateAliasResponses];

export type GetAliasData = {
    body?: never;
    path: {
        /**
         * Alias identifier for the model
         */
        alias: string;
    };
    query?: never;
    url: '/bodhi/v1/models/{alias}';
};

export type GetAliasErrors = {
    /**
     * Alias not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type GetAliasError = GetAliasErrors[keyof GetAliasErrors];

export type GetAliasResponses = {
    /**
     * Model alias details
     */
    200: UserAliasResponse;
};

export type GetAliasResponse = GetAliasResponses[keyof GetAliasResponses];

export type UpdateAliasData = {
    body: UpdateAliasRequest;
    path: {
        /**
         * Alias identifier
         */
        id: string;
    };
    query?: never;
    url: '/bodhi/v1/models/{id}';
};

export type UpdateAliasErrors = {
    /**
     * Invalid request
     */
    400: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type UpdateAliasError = UpdateAliasErrors[keyof UpdateAliasErrors];

export type UpdateAliasResponses = {
    /**
     * Alias created succesfully
     */
    201: UserAliasResponse;
};

export type UpdateAliasResponse = UpdateAliasResponses[keyof UpdateAliasResponses];

export type ListSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bodhi/v1/settings';
};

export type ListSettingsErrors = {
    /**
     * Unauthorized - User is not an admin
     */
    401: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListSettingsError = ListSettingsErrors[keyof ListSettingsErrors];

export type ListSettingsResponses = {
    /**
     * Application settings retrieved successfully
     */
    200: Array<SettingInfo>;
};

export type ListSettingsResponse = ListSettingsResponses[keyof ListSettingsResponses];

export type DeleteSettingData = {
    body?: never;
    path: {
        /**
         * Setting key identifier to reset to default value
         */
        key: string;
    };
    query?: never;
    url: '/bodhi/v1/settings/{key}';
};

export type DeleteSettingErrors = {
    /**
     * Setting not found
     */
    404: OpenAiApiError;
};

export type DeleteSettingError = DeleteSettingErrors[keyof DeleteSettingErrors];

export type DeleteSettingResponses = {
    /**
     * Setting reset to default successfully
     */
    200: SettingInfo;
};

export type DeleteSettingResponse = DeleteSettingResponses[keyof DeleteSettingResponses];

export type UpdateSettingData = {
    /**
     * Request to update a setting value
     */
    body: {
        /**
         * New value for the setting (type depends on setting metadata)
         */
        value: unknown;
    };
    path: {
        /**
         * Setting key identifier (e.g., BODHI_LOG_LEVEL, BODHI_PORT)
         */
        key: string;
    };
    query?: never;
    url: '/bodhi/v1/settings/{key}';
};

export type UpdateSettingErrors = {
    /**
     * Invalid setting or value
     */
    400: OpenAiApiError;
    /**
     * Setting not found
     */
    404: OpenAiApiError;
};

export type UpdateSettingError = UpdateSettingErrors[keyof UpdateSettingErrors];

export type UpdateSettingResponses = {
    /**
     * Setting updated successfully
     */
    200: SettingInfo;
};

export type UpdateSettingResponse = UpdateSettingResponses[keyof UpdateSettingResponses];

export type SetupAppData = {
    /**
     * Application setup configuration
     */
    body: SetupRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/setup';
};

export type SetupAppErrors = {
    /**
     * Invalid request or application already setup
     */
    400: OpenAiApiError;
    /**
     * Internal server error during setup
     */
    500: OpenAiApiError;
};

export type SetupAppError = SetupAppErrors[keyof SetupAppErrors];

export type SetupAppResponses = {
    /**
     * Application setup completed successfully
     */
    200: SetupResponse;
};

export type SetupAppResponse = SetupAppResponses[keyof SetupAppResponses];

export type ListApiTokensData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based indexing)
         */
        page?: number;
        /**
         * Number of items to return per page (maximum 100)
         */
        page_size?: number;
        /**
         * Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at
         */
        sort?: string;
        /**
         * Sort order: 'asc' for ascending, 'desc' for descending
         */
        sort_order?: string;
    };
    url: '/bodhi/v1/tokens';
};

export type ListApiTokensErrors = {
    /**
     * Unauthorized - Token missing or invalid
     */
    401: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListApiTokensError = ListApiTokensErrors[keyof ListApiTokensErrors];

export type ListApiTokensResponses = {
    /**
     * List of API tokens
     */
    200: PaginatedApiTokenResponse;
};

export type ListApiTokensResponse = ListApiTokensResponses[keyof ListApiTokensResponses];

export type CreateApiTokenData = {
    /**
     * API token creation parameters
     */
    body: CreateApiTokenRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/tokens';
};

export type CreateApiTokenErrors = {
    /**
     * Invalid request parameters or token name already exists
     */
    400: OpenAiApiError;
    /**
     * Internal server error during token creation
     */
    500: OpenAiApiError;
};

export type CreateApiTokenError = CreateApiTokenErrors[keyof CreateApiTokenErrors];

export type CreateApiTokenResponses = {
    /**
     * API token created successfully
     */
    201: ApiTokenResponse;
};

export type CreateApiTokenResponse = CreateApiTokenResponses[keyof CreateApiTokenResponses];

export type UpdateApiTokenData = {
    /**
     * Token update request
     */
    body: UpdateApiTokenRequest;
    path: {
        /**
         * Unique identifier of the API token to update
         */
        id: string;
    };
    query?: never;
    url: '/bodhi/v1/tokens/{id}';
};

export type UpdateApiTokenErrors = {
    /**
     * Unauthorized - Token missing or invalid
     */
    401: OpenAiApiError;
    /**
     * Token not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type UpdateApiTokenError = UpdateApiTokenErrors[keyof UpdateApiTokenErrors];

export type UpdateApiTokenResponses = {
    /**
     * Token updated successfully
     */
    200: ApiToken;
};

export type UpdateApiTokenResponse = UpdateApiTokenResponses[keyof UpdateApiTokenResponses];

export type GetCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bodhi/v1/user';
};

export type GetCurrentUserErrors = {
    /**
     * Authentication error or invalid token
     */
    500: OpenAiApiError;
};

export type GetCurrentUserError = GetCurrentUserErrors[keyof GetCurrentUserErrors];

export type GetCurrentUserResponses = {
    /**
     * Current user information retrieved successfully
     */
    200: UserResponse;
};

export type GetCurrentUserResponse = GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type RequestUserAccessData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bodhi/v1/user/request-access';
};

export type RequestUserAccessErrors = {
    /**
     * Not authenticated
     */
    401: OpenAiApiError;
    /**
     * Pending request already exists
     */
    409: OpenAiApiError;
    /**
     * User already has role
     */
    422: OpenAiApiError;
};

export type RequestUserAccessError = RequestUserAccessErrors[keyof RequestUserAccessErrors];

export type RequestUserAccessResponses = {
    /**
     * Access request created successfully
     */
    201: EmptyResponse;
};

export type RequestUserAccessResponse = RequestUserAccessResponses[keyof RequestUserAccessResponses];

export type GetUserAccessStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bodhi/v1/user/request-status';
};

export type GetUserAccessStatusErrors = {
    /**
     * Bad Request
     */
    400: OpenAiApiError;
    /**
     * Not authenticated
     */
    401: OpenAiApiError;
    /**
     * Request not found
     */
    404: OpenAiApiError;
};

export type GetUserAccessStatusError = GetUserAccessStatusErrors[keyof GetUserAccessStatusErrors];

export type GetUserAccessStatusResponses = {
    /**
     * Request status retrieved
     */
    200: UserAccessStatusResponse;
};

export type GetUserAccessStatusResponse = GetUserAccessStatusResponses[keyof GetUserAccessStatusResponses];

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of users per page
         */
        page_size?: number;
    };
    url: '/bodhi/v1/users';
};

export type ListUsersErrors = {
    /**
     * Invalid request parameters
     */
    400: OpenAiApiError;
    /**
     * Not authenticated
     */
    401: OpenAiApiError;
    /**
     * Insufficient permissions
     */
    403: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors];

export type ListUsersResponses = {
    /**
     * Users retrieved successfully
     */
    200: UserListResponse;
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type RemoveUserData = {
    body?: never;
    path: {
        /**
         * User ID to remove
         */
        user_id: string;
    };
    query?: never;
    url: '/bodhi/v1/users/{user_id}';
};

export type RemoveUserErrors = {
    /**
     * Invalid request
     */
    400: OpenAiApiError;
    /**
     * Not authenticated
     */
    401: OpenAiApiError;
    /**
     * Insufficient permissions
     */
    403: OpenAiApiError;
    /**
     * User not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type RemoveUserError = RemoveUserErrors[keyof RemoveUserErrors];

export type RemoveUserResponses = {
    /**
     * User removed successfully
     */
    200: unknown;
};

export type ChangeUserRoleData = {
    body: ChangeRoleRequest;
    path: {
        /**
         * User ID to change role for
         */
        user_id: string;
    };
    query?: never;
    url: '/bodhi/v1/users/{user_id}/role';
};

export type ChangeUserRoleErrors = {
    /**
     * Invalid request
     */
    400: OpenAiApiError;
    /**
     * Not authenticated
     */
    401: OpenAiApiError;
    /**
     * Insufficient permissions
     */
    403: OpenAiApiError;
    /**
     * User not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ChangeUserRoleError = ChangeUserRoleErrors[keyof ChangeUserRoleErrors];

export type ChangeUserRoleResponses = {
    /**
     * Role changed successfully
     */
    200: unknown;
};

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckResponses = {
    /**
     * Application is healthy and fully operational
     */
    200: PingResponse;
};

export type HealthCheckResponse = HealthCheckResponses[keyof HealthCheckResponses];

export type PingServerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ping';
};

export type PingServerResponses = {
    /**
     * Server is responding normally
     */
    200: PingResponse;
};

export type PingServerResponse = PingServerResponses[keyof PingServerResponses];

export type CreateChatCompletionData = {
    body: unknown;
    path?: never;
    query?: never;
    url: '/v1/chat/completions';
};

export type CreateChatCompletionErrors = {
    /**
     * Invalid request parameters
     */
    400: OpenAiApiError;
    /**
     * Invalid authentication
     */
    401: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type CreateChatCompletionError = CreateChatCompletionErrors[keyof CreateChatCompletionErrors];

export type CreateChatCompletionResponses = {
    /**
     * Chat completion response
     */
    200: unknown;
    /**
     * Chat completion stream, the status is 200, using 201 to avoid OpenAPI format limitation.
     */
    201: unknown;
};

export type ListModelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/models';
};

export type ListModelsErrors = {
    /**
     * Invalid authentication
     */
    401: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListModelsError = ListModelsErrors[keyof ListModelsErrors];

export type ListModelsResponses = {
    /**
     * List of available models
     */
    200: ListModelResponse;
};

export type ListModelsResponse = ListModelsResponses[keyof ListModelsResponses];

export type GetModelData = {
    body?: never;
    path: {
        /**
         * Model identifier - can be user alias (e.g., 'llama2:chat'), model alias, or API provider alias
         */
        id: string;
    };
    query?: never;
    url: '/v1/models/{id}';
};

export type GetModelErrors = {
    /**
     * Invalid authentication
     */
    401: OpenAiApiError;
    /**
     * Model not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type GetModelError = GetModelErrors[keyof GetModelErrors];

export type GetModelResponses = {
    /**
     * Model details
     */
    200: ModelResponse;
};

export type GetModelResponse = GetModelResponses[keyof GetModelResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:1135' | (string & {});
};