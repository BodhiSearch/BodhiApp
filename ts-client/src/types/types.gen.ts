// This file is auto-generated by @hey-api/openapi-ts

export type AliasResponse = {
    alias: string;
    context_params: GptContextParams;
    filename: string;
    model_params: {};
    repo: string;
    request_params: OaiRequestParams;
    snapshot: string;
    source: string;
};

export type ApiToken = {
    created_at: string;
    id: string;
    name: string;
    status: TokenStatus;
    token_hash: string;
    token_id: string;
    updated_at: string;
    user_id: string;
};

export type ApiTokenResponse = {
    /**
     * Offline token that can be used as API Token
     */
    offline_token: string;
};

/**
 * Application information and status
 */
export type AppInfo = {
    /**
     * Current application status
     */
    status: AppStatus;
    /**
     * Application version
     */
    version: string;
};

export type AppStatus = 'setup' | 'ready' | 'resource-admin';

export type ChatRequest = {
    format?: string | null;
    keep_alive?: null | Duration;
    messages: Array<Message>;
    model: string;
    options?: null | Options;
    stream?: boolean | null;
};

/**
 * Request to create a new API token
 */
export type CreateApiTokenRequest = {
    /**
     * Optional name for the API token
     */
    name?: string | null;
};

export type DownloadRequest = {
    created_at: string;
    error?: string | null;
    filename: string;
    id: string;
    repo: string;
    status: DownloadStatus;
    updated_at: string;
};

export type DownloadStatus = 'pending' | 'completed' | 'error';

export type Duration = string;

export type ErrorBody = {
    code?: string | null;
    message: string;
    param?: string | null;
    type: string;
};

export type GptContextParams = {
    n_ctx?: number | null;
    n_keep?: number | null;
    n_parallel?: number | null;
    n_predict?: number | null;
    n_seed?: number | null;
    n_threads?: number | null;
};

export type ListModelResponseWrapper = {
    data: Array<{
        /**
         * The Unix timestamp (in seconds) when the model was created.
         */
        created: number;
        /**
         * The model identifier, which can be referenced in the API endpoints.
         */
        id: string;
        /**
         * The object type, which is always "model".
         */
        object: string;
        /**
         * The organization that owns the model.
         */
        owned_by: string;
    }>;
    object: string;
};

export type LocalModelResponse = {
    filename: string;
    model_params: {};
    repo: string;
    size?: number | null;
    snapshot: string;
};

export type Message = {
    content: string;
    images?: Array<string> | null;
    role: string;
};

export type Model = {
    details: ModelDetails;
    digest: string;
    model: string;
    modified_at: number;
    size: number;
};

export type ModelDetails = {
    families?: Array<string> | null;
    family: string;
    format: string;
    parameter_size: string;
    parent_model?: string | null;
    quantization_level: string;
};

export type ModelsResponse = {
    models: Array<Model>;
};

/**
 * Request to pull a model file from HuggingFace
 */
export type NewDownloadRequest = {
    /**
     * Model file name to pull
     */
    filename: string;
    /**
     * HuggingFace repository name
     */
    repo: string;
};

export type OaiRequestParams = {
    frequency_penalty?: number | null;
    max_tokens?: number | null;
    presence_penalty?: number | null;
    seed?: number | null;
    stop?: Array<string>;
    temperature?: number | null;
    top_p?: number | null;
    user?: string | null;
};

export type OllamaError = {
    error: string;
};

export type OpenAiApiError = {
    error: ErrorBody;
};

export type Options = {
    f16_kv?: boolean | null;
    frequency_penalty?: number | null;
    logits_all?: boolean | null;
    low_vram?: boolean | null;
    main_gpu?: number | null;
    mirostat?: number | null;
    mirostat_eta?: number | null;
    mirostat_tau?: number | null;
    num_batch?: number | null;
    num_ctx?: number | null;
    num_gpu?: number | null;
    num_keep?: number | null;
    num_predict?: number | null;
    num_thread?: number | null;
    numa?: boolean | null;
    penalize_newline?: boolean | null;
    presence_penalty?: number | null;
    repeat_last_n?: number | null;
    repeat_penalty?: number | null;
    seed?: number | null;
    stop?: Array<string> | null;
    temperature?: number | null;
    tfs_z?: number | null;
    top_k?: number | null;
    top_p?: number | null;
    typical_p?: number | null;
    use_mlock?: boolean | null;
    use_mmap?: boolean | null;
    vocab_only?: boolean | null;
};

export type PaginatedResponseAliasResponse = {
    data: Array<{
        alias: string;
        context_params: GptContextParams;
        filename: string;
        model_params: {};
        repo: string;
        request_params: OaiRequestParams;
        snapshot: string;
        source: string;
    }>;
    page: number;
    page_size: number;
    total: number;
};

export type PaginatedResponseApiToken = {
    data: Array<{
        created_at: string;
        id: string;
        name: string;
        status: TokenStatus;
        token_hash: string;
        token_id: string;
        updated_at: string;
        user_id: string;
    }>;
    page: number;
    page_size: number;
    total: number;
};

export type PaginatedResponseDownloadRequest = {
    data: Array<{
        created_at: string;
        error?: string | null;
        filename: string;
        id: string;
        repo: string;
        status: DownloadStatus;
        updated_at: string;
    }>;
    page: number;
    page_size: number;
    total: number;
};

export type PaginatedResponseLocalModelResponse = {
    data: Array<{
        filename: string;
        model_params: {};
        repo: string;
        size?: number | null;
        snapshot: string;
    }>;
    page: number;
    page_size: number;
    total: number;
};

/**
 * Response to the ping endpoint
 */
export type PingResponse = {
    /**
     * always returns "pong"
     */
    message: string;
};

export type Repo = {
    name: string;
    user: string;
};

export type SettingInfo = {
    current_value: unknown;
    default_value: unknown;
    key: string;
    metadata: SettingMetadata;
    source: SettingSource;
};

export type SettingMetadata = {
    type: 'string';
} | {
    max: number;
    min: number;
    type: 'number';
} | {
    type: 'boolean';
} | {
    options: Array<string>;
    type: 'option';
};

export type SettingSource = 'system' | 'command_line' | 'environment' | 'settings_file' | 'default';

/**
 * Request to setup the application in authenticated mode
 */
export type SetupRequest = {
    [key: string]: unknown;
};

/**
 * Response containing the updated application status after setup
 */
export type SetupResponse = {
    /**
     * New application status after setup
     * - resource-admin: When setup in authenticated mode
     * - ready: When setup in non-authenticated mode
     */
    status: AppStatus;
};

export type ShowRequest = {
    name: string;
};

export type ShowResponse = {
    details: ModelDetails;
    license: string;
    model_info: {};
    modelfile: string;
    modified_at: number;
    parameters: string;
    template: string;
};

export type TokenStatus = 'active' | 'inactive';

/**
 * Request to update an existing API token
 */
export type UpdateApiTokenRequest = {
    /**
     * New name for the token
     */
    name: string;
    /**
     * New status for the token (active/inactive)
     */
    status: TokenStatus;
};

/**
 * Request to update a setting value
 */
export type UpdateSettingRequest = {
    value: unknown;
};

/**
 * Information about the currently logged in user
 */
export type UserInfo = {
    /**
     * User's email address
     */
    email?: string | null;
    /**
     * If user is logged in
     */
    logged_in: boolean;
    /**
     * List of roles assigned to the user
     */
    roles: Array<string>;
};

export type ChatOllamaModelData = {
    /**
     * Chat request in Ollama format
     */
    body: ChatRequest;
    path?: never;
    query?: never;
    url: '/api/chat';
};

export type ChatOllamaModelErrors = {
    /**
     * Invalid request
     */
    400: OllamaError;
    /**
     * Model not found
     */
    404: OllamaError;
    /**
     * Internal server error
     */
    500: OllamaError;
};

export type ChatOllamaModelError = ChatOllamaModelErrors[keyof ChatOllamaModelErrors];

export type ChatOllamaModelResponses = {
    /**
     * Chat response
     */
    200: unknown;
};

export type ShowOllamaModelData = {
    /**
     * Model name to get details for
     */
    body: ShowRequest;
    path?: never;
    query?: never;
    url: '/api/show';
};

export type ShowOllamaModelErrors = {
    /**
     * Model not found
     */
    404: OllamaError;
    /**
     * Internal server error
     */
    500: OllamaError;
};

export type ShowOllamaModelError = ShowOllamaModelErrors[keyof ShowOllamaModelErrors];

export type ShowOllamaModelResponses = {
    /**
     * Model details
     */
    200: ShowResponse;
};

export type ShowOllamaModelResponse = ShowOllamaModelResponses[keyof ShowOllamaModelResponses];

export type ListOllamaModelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/tags';
};

export type ListOllamaModelsErrors = {
    /**
     * Internal server error
     */
    500: OllamaError;
};

export type ListOllamaModelsError = ListOllamaModelsErrors[keyof ListOllamaModelsErrors];

export type ListOllamaModelsResponses = {
    /**
     * List of available models
     */
    200: ModelsResponse;
};

export type ListOllamaModelsResponse = ListOllamaModelsResponses[keyof ListOllamaModelsResponses];

export type GetAppInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bodhi/v1/info';
};

export type GetAppInfoErrors = {
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type GetAppInfoError = GetAppInfoErrors[keyof GetAppInfoErrors];

export type GetAppInfoResponses = {
    /**
     * Returns the status information about the Application
     */
    200: AppInfo;
};

export type GetAppInfoResponse = GetAppInfoResponses[keyof GetAppInfoResponses];

export type LogoutUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bodhi/v1/logout';
};

export type LogoutUserErrors = {
    /**
     * Session deletion failed
     */
    500: OpenAiApiError;
};

export type LogoutUserError = LogoutUserErrors[keyof LogoutUserErrors];

export type LogoutUserResponses = {
    /**
     * Logout successful, redirects to login page
     */
    200: unknown;
};

export type ListModelFilesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page (max 100)
         */
        page_size?: number;
        /**
         * Field to sort by (repo, filename, size, updated_at, snapshot)
         */
        sort?: string | null;
        /**
         * Sort order (asc or desc)
         */
        sort_order?: string;
    };
    url: '/bodhi/v1/modelfiles';
};

export type ListModelFilesErrors = {
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListModelFilesError = ListModelFilesErrors[keyof ListModelFilesErrors];

export type ListModelFilesResponses = {
    /**
     * List of supported model files from local HuggingFace cache folder
     */
    200: PaginatedResponseLocalModelResponse;
};

export type ListModelFilesResponse = ListModelFilesResponses[keyof ListModelFilesResponses];

export type ListDownloadsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page (max 100)
         */
        page_size?: number;
        /**
         * Field to sort by (repo, filename, size, updated_at, snapshot)
         */
        sort?: string | null;
        /**
         * Sort order (asc or desc)
         */
        sort_order?: string;
    };
    url: '/bodhi/v1/modelfiles/pull';
};

export type ListDownloadsErrors = {
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListDownloadsError = ListDownloadsErrors[keyof ListDownloadsErrors];

export type ListDownloadsResponses = {
    /**
     * List of download requests
     */
    200: PaginatedResponseDownloadRequest;
};

export type ListDownloadsResponse = ListDownloadsResponses[keyof ListDownloadsResponses];

export type PullModelFileData = {
    /**
     * Model file download request
     */
    body: NewDownloadRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/modelfiles/pull';
};

export type PullModelFileErrors = {
    /**
     * File already exists or invalid input
     */
    400: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type PullModelFileError = PullModelFileErrors[keyof PullModelFileErrors];

export type PullModelFileResponses = {
    /**
     * Existing download request found
     */
    200: DownloadRequest;
    /**
     * Download request created
     */
    201: DownloadRequest;
};

export type PullModelFileResponse = PullModelFileResponses[keyof PullModelFileResponses];

export type PullModelByAliasData = {
    body?: never;
    path: {
        /**
         * Available model aliases:
         * - llama3:instruct - Meta Llama 3 8B Instruct
         * - llama3:70b-instruct - Meta Llama 3 70B Instruct
         * - llama2:chat - Llama 2 7B Chat
         * - llama2:13b-chat - Llama 2 13B Chat
         * - llama2:70b-chat - Llama 2 70B Chat
         * - phi3:mini - Phi 3 Mini
         * - mistral:instruct - Mistral 7B Instruct
         * - mixtral:instruct - Mixtral 8x7B Instruct
         * - gemma:instruct - Gemma 7B Instruct
         * - gemma:7b-instruct-v1.1-q8_0 - Gemma 1.1 7B Instruct
         */
        alias: string;
    };
    query?: never;
    url: '/bodhi/v1/modelfiles/pull/{alias}';
};

export type PullModelByAliasErrors = {
    /**
     * File already exists
     */
    400: OpenAiApiError;
    /**
     * Alias not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type PullModelByAliasError = PullModelByAliasErrors[keyof PullModelByAliasErrors];

export type PullModelByAliasResponses = {
    /**
     * Existing download request found
     */
    200: DownloadRequest;
    /**
     * Download request created
     */
    201: DownloadRequest;
};

export type PullModelByAliasResponse = PullModelByAliasResponses[keyof PullModelByAliasResponses];

export type GetDownloadStatusData = {
    body?: never;
    path: {
        /**
         * Download request identifier
         */
        id: string;
    };
    query?: never;
    url: '/bodhi/v1/modelfiles/pull/{id}';
};

export type GetDownloadStatusErrors = {
    /**
     * Download request not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type GetDownloadStatusError = GetDownloadStatusErrors[keyof GetDownloadStatusErrors];

export type GetDownloadStatusResponses = {
    /**
     * Download request found
     */
    200: DownloadRequest;
};

export type GetDownloadStatusResponse = GetDownloadStatusResponses[keyof GetDownloadStatusResponses];

export type ListModelAliasesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page (max 100)
         */
        page_size?: number;
        /**
         * Field to sort by (repo, filename, size, updated_at, snapshot)
         */
        sort?: string | null;
        /**
         * Sort order (asc or desc)
         */
        sort_order?: string;
    };
    url: '/bodhi/v1/models';
};

export type ListModelAliasesErrors = {
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListModelAliasesError = ListModelAliasesErrors[keyof ListModelAliasesErrors];

export type ListModelAliasesResponses = {
    /**
     * List of configured model aliases
     */
    200: PaginatedResponseAliasResponse;
};

export type ListModelAliasesResponse = ListModelAliasesResponses[keyof ListModelAliasesResponses];

export type GetAliasData = {
    body?: never;
    path: {
        /**
         * Alias identifier for the model
         */
        alias: string;
    };
    query?: never;
    url: '/bodhi/v1/models/{alias}';
};

export type GetAliasErrors = {
    /**
     * Alias not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type GetAliasError = GetAliasErrors[keyof GetAliasErrors];

export type GetAliasResponses = {
    /**
     * Model alias details
     */
    200: AliasResponse;
};

export type GetAliasResponse = GetAliasResponses[keyof GetAliasResponses];

export type ListSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bodhi/v1/settings';
};

export type ListSettingsErrors = {
    /**
     * Unauthorized - User is not an admin
     */
    401: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListSettingsError = ListSettingsErrors[keyof ListSettingsErrors];

export type ListSettingsResponses = {
    /**
     * List of application settings
     */
    200: Array<SettingInfo>;
};

export type ListSettingsResponse = ListSettingsResponses[keyof ListSettingsResponses];

export type DeleteSettingData = {
    body?: never;
    path: {
        /**
         * Setting key to reset
         */
        key: string;
    };
    query?: never;
    url: '/bodhi/v1/settings/{key}';
};

export type DeleteSettingErrors = {
    /**
     * Setting not found
     */
    404: OpenAiApiError;
};

export type DeleteSettingError = DeleteSettingErrors[keyof DeleteSettingErrors];

export type DeleteSettingResponses = {
    /**
     * Setting reset to default successfully
     */
    200: SettingInfo;
};

export type DeleteSettingResponse = DeleteSettingResponses[keyof DeleteSettingResponses];

export type UpdateSettingData = {
    /**
     * Request to update a setting value
     */
    body: {
        value: unknown;
    };
    path: {
        /**
         * Setting key to update
         */
        key: string;
    };
    query?: never;
    url: '/bodhi/v1/settings/{key}';
};

export type UpdateSettingErrors = {
    /**
     * Invalid setting or value
     */
    400: OpenAiApiError;
    /**
     * Setting not found
     */
    404: OpenAiApiError;
};

export type UpdateSettingError = UpdateSettingErrors[keyof UpdateSettingErrors];

export type UpdateSettingResponses = {
    /**
     * Setting updated successfully
     */
    200: SettingInfo;
};

export type UpdateSettingResponse = UpdateSettingResponses[keyof UpdateSettingResponses];

export type SetupAppData = {
    body: SetupRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/setup';
};

export type SetupAppErrors = {
    /**
     * Application is already setup
     */
    400: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type SetupAppError = SetupAppErrors[keyof SetupAppErrors];

export type SetupAppResponses = {
    /**
     * Application setup successful
     */
    200: SetupResponse;
};

export type SetupAppResponse = SetupAppResponses[keyof SetupAppResponses];

export type ListApiTokensData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page (max 100)
         */
        page_size?: number;
        /**
         * Field to sort by (repo, filename, size, updated_at, snapshot)
         */
        sort?: string | null;
        /**
         * Sort order (asc or desc)
         */
        sort_order?: string;
    };
    url: '/bodhi/v1/tokens';
};

export type ListApiTokensErrors = {
    /**
     * Unauthorized - Token missing or invalid
     */
    401: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListApiTokensError = ListApiTokensErrors[keyof ListApiTokensErrors];

export type ListApiTokensResponses = {
    /**
     * List of API tokens
     */
    200: PaginatedResponseApiToken;
};

export type ListApiTokensResponse = ListApiTokensResponses[keyof ListApiTokensResponses];

export type CreateApiTokenData = {
    body: CreateApiTokenRequest;
    path?: never;
    query?: never;
    url: '/bodhi/v1/tokens';
};

export type CreateApiTokenErrors = {
    /**
     * Invalid request
     */
    400: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type CreateApiTokenError = CreateApiTokenErrors[keyof CreateApiTokenErrors];

export type CreateApiTokenResponses = {
    /**
     * API token created successfully
     */
    201: ApiTokenResponse;
};

export type CreateApiTokenResponse = CreateApiTokenResponses[keyof CreateApiTokenResponses];

export type UpdateApiTokenData = {
    /**
     * Token update request
     */
    body: UpdateApiTokenRequest;
    path: {
        /**
         * Token identifier
         */
        id: string;
    };
    query?: never;
    url: '/bodhi/v1/tokens/{id}';
};

export type UpdateApiTokenErrors = {
    /**
     * Unauthorized - Token missing or invalid
     */
    401: OpenAiApiError;
    /**
     * Token not found
     */
    404: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type UpdateApiTokenError = UpdateApiTokenErrors[keyof UpdateApiTokenErrors];

export type UpdateApiTokenResponses = {
    /**
     * Token updated successfully
     */
    200: ApiToken;
};

export type UpdateApiTokenResponse = UpdateApiTokenResponses[keyof UpdateApiTokenResponses];

export type GetCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bodhi/v1/user';
};

export type GetCurrentUserErrors = {
    /**
     * Error in extracting user info from token
     */
    500: OpenAiApiError;
};

export type GetCurrentUserError = GetCurrentUserErrors[keyof GetCurrentUserErrors];

export type GetCurrentUserResponses = {
    /**
     * Returns current user information
     */
    200: UserInfo;
};

export type GetCurrentUserResponse = GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type PingServerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ping';
};

export type PingServerResponses = {
    /**
     * Server is healthy
     */
    200: PingResponse;
};

export type PingServerResponse = PingServerResponses[keyof PingServerResponses];

export type CreateChatCompletionData = {
    body: unknown;
    path?: never;
    query?: never;
    url: '/v1/chat/completions';
};

export type CreateChatCompletionErrors = {
    /**
     * Invalid request parameters
     */
    400: OpenAiApiError;
    /**
     * Invalid authentication
     */
    401: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type CreateChatCompletionError = CreateChatCompletionErrors[keyof CreateChatCompletionErrors];

export type CreateChatCompletionResponses = {
    /**
     * Chat completion response
     */
    200: unknown;
    /**
     * Chat completion stream, the status is 200, using 201 to avoid OpenAPI format limitation.
     */
    201: unknown;
};

export type ListModelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/models';
};

export type ListModelsErrors = {
    /**
     * Invalid authentication
     */
    401: OpenAiApiError;
    /**
     * Internal server error
     */
    500: OpenAiApiError;
};

export type ListModelsError = ListModelsErrors[keyof ListModelsErrors];

export type ListModelsResponses = {
    /**
     * List of available models
     */
    200: ListModelResponseWrapper;
};

export type ListModelsResponse = ListModelsResponses[keyof ListModelsResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:1135' | (string & {});
};