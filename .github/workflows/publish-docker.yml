name: Publish Docker Image (Multi-Variant)

on:
  push:
    tags:
      - 'docker/v*'
      - 'docker-dev/v*'

# Prevent concurrent releases
concurrency:
  group: docker-release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  id-token: write

env:
  CI: true
  REGISTRY: ghcr.io
  IMAGE_NAME_RAW: ${{ github.repository }}

jobs:
  # Extract version information (shared by all builds)
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      tag_version: ${{ steps.version.outputs.tag_version }}
      release_version: ${{ steps.version.outputs.release_version }}
      build_variant: ${{ steps.version.outputs.build_variant }}
      image_suffix: ${{ steps.version.outputs.image_suffix }}
      is_development: ${{ steps.version.outputs.is_development }}
      image_name: ${{ steps.version.outputs.image_name }}
      app_version: ${{ steps.version.outputs.app_version }}
      commit_sha: ${{ steps.version.outputs.commit_sha }}
    steps:
      - name: Extract version information
        id: version
        run: |
          # Convert repository name to lowercase for Docker registry
          IMAGE_NAME=$(echo "${{ env.IMAGE_NAME_RAW }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          # Extract the version and variant from the tag
          if [[ $GITHUB_REF == refs/tags/docker/v* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/docker/v}  # Extracts just "1.2.3"
            APP_VERSION=${GITHUB_REF#refs/tags/}          # Extracts "docker/v1.2.3"
            BUILD_VARIANT="production"
            IMAGE_SUFFIX=""
            IS_DEVELOPMENT="false"
          elif [[ $GITHUB_REF == refs/tags/docker-dev/v* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/docker-dev/v}  # Extracts just "1.2.3"
            APP_VERSION=${GITHUB_REF#refs/tags/}               # Extracts "docker-dev/v1.2.3"
            BUILD_VARIANT="development"
            IMAGE_SUFFIX="-development"
            IS_DEVELOPMENT="true"
          else
            echo "Error: Unsupported tag format: $GITHUB_REF"
            exit 1
          fi
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "release_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "build_variant=$BUILD_VARIANT" >> $GITHUB_OUTPUT
          echo "image_suffix=$IMAGE_SUFFIX" >> $GITHUB_OUTPUT
          echo "is_development=$IS_DEVELOPMENT" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT

  # Build all variants using matrix strategy
  build-variants:
    needs: extract-version
    runs-on: ubuntu-latest-8-cores
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        variant:
          - cpu
          - cuda
          - rocm
          # - vulkan
        include:
          - variant: cpu
            platforms: 'linux/amd64,linux/arm64'
          - variant: cuda
            platforms: 'linux/amd64'
          - variant: rocm
            platforms: 'linux/amd64'
          # - variant: vulkan
          #   platforms: 'linux/amd64'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Initialize submodules
        run: |
          git config --global url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf git@github.com:
          git submodule sync --recursive
          git submodule update --init --recursive --depth=1
          git config --global --unset url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ matrix.variant }} image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./devops/${{ matrix.variant }}.Dockerfile
          platforms: ${{ matrix.platforms }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}-${{ matrix.variant }}${{ needs.extract-version.outputs.image_suffix }}
            ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:latest-${{ matrix.variant }}${{ needs.extract-version.outputs.image_suffix }}
          cache-from: |
            type=gha,scope=${{ matrix.variant }}-${{ needs.extract-version.outputs.build_variant }}
            type=gha,scope=${{ matrix.variant }}-deps
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.variant }}-${{ needs.extract-version.outputs.build_variant }}
            type=gha,mode=max,scope=${{ matrix.variant }}-deps
          build-args: |
            BUILD_VARIANT=${{ needs.extract-version.outputs.build_variant }}
            BODHI_VERSION=${{ needs.extract-version.outputs.app_version }}
            BODHI_COMMIT_SHA=${{ needs.extract-version.outputs.commit_sha }}
            CI_DOCKER=true


  # Create release (CPU image is now built as multi-platform directly)
  # No separate manifest creation needed as build-variants creates multi-platform images

  # Create GitHub Release (succeeds if any variant builds successfully)
  create-release:
    needs: [extract-version, build-variants]
    if: always() && !cancelled()
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: 'Docker Images ${{ needs.extract-version.outputs.build_variant }} ${{ needs.extract-version.outputs.tag_version }}'
          body: |
            # BodhiApp Docker Images Release ${{ needs.extract-version.outputs.tag_version }} (${{ needs.extract-version.outputs.build_variant }})

            ## Available Variants

            ### CPU Variant (Multi-platform: AMD64 + ARM64)
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}-cpu${{ needs.extract-version.outputs.image_suffix }}
            docker run -p 8080:8080 \
              -v ./bodhi_home:/data/bodhi_home \
              -v ./hf_home:/data/hf_home \
              ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}-cpu${{ needs.extract-version.outputs.image_suffix }}


            ‚≠ê **Multi-platform support**: This image automatically selects the correct architecture (AMD64 or ARM64) for your platform.

            ### CUDA Variant (NVIDIA GPU acceleration)
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}-cuda${{ needs.extract-version.outputs.image_suffix }}
            docker run --gpus all -p 8080:8080 \
              -v ./bodhi_home:/data/bodhi_home \
              -v ./hf_home:/data/hf_home \
              ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}-cuda${{ needs.extract-version.outputs.image_suffix }}
            ```

            ### ROCm Variant (AMD GPU acceleration)
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}-rocm${{ needs.extract-version.outputs.image_suffix }}
            docker run --device=/dev/kfd --device=/dev/dri --group-add video -p 8080:8080 \
              -v ./bodhi_home:/data/bodhi_home \
              -v ./hf_home:/data/hf_home \
              ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}-rocm${{ needs.extract-version.outputs.image_suffix }}
            ```

            ### Vulkan Variant (Cross-vendor GPU acceleration)
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}-vulkan${{ needs.extract-version.outputs.image_suffix }}
            docker run --device=/dev/dri -p 8080:8080 \
              -v ./bodhi_home:/data/bodhi_home \
              -v ./hf_home:/data/hf_home \
              ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}-vulkan${{ needs.extract-version.outputs.image_suffix }}
            ```

            ## Image Details
            - **Variant**: ${{ needs.extract-version.outputs.build_variant }}
            - **Platforms**:
              - **CPU**: linux/amd64, linux/arm64 (multi-platform)
              - **GPU variants**: linux/amd64 only
            - **Registry**: ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}
            - **Tag**: ${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }}
            - **Auth Server**: ${{ needs.extract-version.outputs.build_variant == 'production' && 'https://id.getbodhi.app' || 'https://main-id.getbodhi.app' }}

            ## Hardware Requirements

            - **CPU**: x86_64 (AMD64) or ARM64 processors (auto-detected)
            - **CUDA**: NVIDIA GPU with CUDA 12.4+ support (AMD64 only)
            - **ROCm**: AMD GPU with ROCm 6.4+ support (AMD64 only)
            - **Vulkan**: GPU with Vulkan API support (AMD64 only)

            ## Benefits

            - **Multi-platform CPU**: Automatic architecture detection for ARM64 and AMD64
            - **Faster Builds**: No llama-server compilation during build
            - **GPU Acceleration**: Hardware-optimized variants available
            - **Smaller Images**: Optimized runtime images
            - **Better Caching**: Improved Docker layer caching
          draft: false
          prerelease: ${{ needs.extract-version.outputs.is_development == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output image details
        run: |
          echo "::notice title=Docker Images Published::Multi-variant images published to ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}"
          echo "::notice title=Available Variants::cpu, cuda, rocm, vulkan"
          echo "::notice title=Example Pull::docker pull ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}-cpu${{ needs.extract-version.outputs.image_suffix }}"
