name: Publish Docker Image (Optimized)

on:
  push:
    tags:
      - 'docker/v*'
      - 'docker-dev/v*'

# Prevent concurrent releases
concurrency:
  group: docker-release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  id-token: write

env:
  CI: true
  REGISTRY: ghcr.io
  IMAGE_NAME_RAW: ${{ github.repository }}

jobs:
  # Extract version information (shared by both jobs)
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      tag_version: ${{ steps.version.outputs.tag_version }}
      release_version: ${{ steps.version.outputs.release_version }}
      build_variant: ${{ steps.version.outputs.build_variant }}
      image_suffix: ${{ steps.version.outputs.image_suffix }}
      is_development: ${{ steps.version.outputs.is_development }}
      image_name: ${{ steps.version.outputs.image_name }}
    steps:
      - name: Extract version information
        id: version
        run: |
          # Convert repository name to lowercase for Docker registry
          IMAGE_NAME=$(echo "${{ env.IMAGE_NAME_RAW }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          # Extract the version and variant from the tag
          if [[ $GITHUB_REF == refs/tags/docker/v* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/docker/v}
            BUILD_VARIANT="production"
            IMAGE_SUFFIX=""
            IS_DEVELOPMENT="false"
          elif [[ $GITHUB_REF == refs/tags/docker-dev/v* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/docker-dev/v}
            BUILD_VARIANT="development"
            IMAGE_SUFFIX="-development"
            IS_DEVELOPMENT="true"
          else
            echo "Error: Unsupported tag format: $GITHUB_REF"
            exit 1
          fi
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "release_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "build_variant=$BUILD_VARIANT" >> $GITHUB_OUTPUT
          echo "image_suffix=$IMAGE_SUFFIX" >> $GITHUB_OUTPUT
          echo "is_development=$IS_DEVELOPMENT" >> $GITHUB_OUTPUT

  # AMD64 build (always runs)
  build-amd64:
    needs: extract-version
    runs-on: ubuntu-latest-8-cores
    timeout-minutes: 60
    outputs:
      image-digest-amd64: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Initialize submodules
        run: |
          git config --global url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf git@github.com:
          git submodule sync --recursive
          git submodule update --init --recursive --depth=1
          git config --global --unset url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AMD64 image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }}-amd64
          cache-from: |
            type=gha,scope=amd64-${{ needs.extract-version.outputs.build_variant }}
            type=gha,scope=amd64-deps
          cache-to: |
            type=gha,mode=max,scope=amd64-${{ needs.extract-version.outputs.build_variant }}
            type=gha,mode=max,scope=amd64-deps
          build-args: |
            GH_PAT=${{ secrets.GH_PAT }}
            BUILD_VARIANT=${{ needs.extract-version.outputs.build_variant }}

  # ARM64 build (only for production)
  build-arm64:
    needs: extract-version
    if: needs.extract-version.outputs.is_development == 'false'
    runs-on: ubuntu-latest-8-cores
    timeout-minutes: 90
    outputs:
      image-digest-arm64: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Initialize submodules
        run: |
          git config --global url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf git@github.com:
          git submodule sync --recursive
          git submodule update --init --recursive --depth=1
          git config --global --unset url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }}-arm64
          cache-from: |
            type=gha,scope=arm64-${{ needs.extract-version.outputs.build_variant }}
            type=gha,scope=arm64-deps
          cache-to: |
            type=gha,mode=max,scope=arm64-${{ needs.extract-version.outputs.build_variant }}
            type=gha,mode=max,scope=arm64-deps
          build-args: |
            GH_PAT=${{ secrets.GH_PAT }}
            BUILD_VARIANT=${{ needs.extract-version.outputs.build_variant }}

  # Create multi-platform manifest
  create-manifest:
    needs: [extract-version, build-amd64, build-arm64]
    if: always() && needs.build-amd64.result == 'success' && (needs.extract-version.outputs.is_development == 'true' || needs.build-arm64.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          # Create manifest list
          if [ "${{ needs.extract-version.outputs.is_development }}" = "true" ]; then
            # Development: AMD64 only
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }} \
              --tag ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:latest${{ needs.extract-version.outputs.image_suffix }} \
              ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }}-amd64
          else
            # Production: Multi-platform
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }} \
              --tag ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:latest${{ needs.extract-version.outputs.image_suffix }} \
              ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }}-amd64 \
              ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }}-arm64
          fi

  # Create GitHub Release
  create-release:
    needs: [extract-version, create-manifest]
    if: always() && needs.create-manifest.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: 'Docker Image ${{ needs.extract-version.outputs.build_variant }} v${{ needs.extract-version.outputs.tag_version }}'
          body: |
            Docker Image Release v${{ needs.extract-version.outputs.tag_version }} (${{ needs.extract-version.outputs.build_variant }})

            ## Usage

            Pull and run the image:
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }}
            docker run -p 8080:8080 \
              -v ./bodhi_home:/data/bodhi_home \
              -v ./hf_home:/data/hf_home \
              ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }}
            ```

            ## Image Details
            - **Variant**: ${{ needs.extract-version.outputs.build_variant }}
            - **Platforms**: ${{ needs.extract-version.outputs.is_development == 'true' && 'linux/amd64' || 'linux/amd64, linux/arm64' }}
            - **Registry**: ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}
            - **Tag**: ${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }}
            - **Auth Server**: ${{ needs.extract-version.outputs.build_variant == 'production' && 'https://id.getbodhi.app' || 'https://main-id.getbodhi.app' }}
          draft: false
          prerelease: ${{ needs.extract-version.outputs.is_development == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output image details
        run: |
          echo "::notice title=Docker Image Published::Image published to ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }}"
          echo "::notice title=Docker Pull Command::docker pull ${{ env.REGISTRY }}/${{ needs.extract-version.outputs.image_name }}:${{ needs.extract-version.outputs.tag_version }}${{ needs.extract-version.outputs.image_suffix }}"
