name: Build App

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          # - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
          #   args: ""
          # - platform: "windows-latest"
          #   args: ""
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - name: Rewrite submodule URLs and checkout submodules
        run: |
          git config --global url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf git@github.com:
          git submodule sync --recursive
          git submodule update --init --recursive
          git config --global --unset url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf
      # https://github.com/pnpm/action-setup
      - uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: |
            - cwd: vercel-ai
              recursive: true
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      # - name: Get pnpm store directory
      #   shell: bash
      #   run: |
      #     echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      # - uses: actions/cache@v4
      #   name: Setup pnpm cache
      #   with:
      #     path: ${{ env.STORE_PATH }}
      #     key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-store-
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: vercel-ai/packages/core
      - name: Build Vercel AI
        run: pnpm run build
        working-directory: vercel-ai/packages/core
      - name: Install dependencies
        run: pnpm install
        working-directory: app
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEXT_PUBLIC_API_BASE_URL: "/"
        with:
          projectPath: app
          distPath: app/out
          tagName: bodhi-v__VERSION__
          releaseName: 'Bodhi App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
