name: App Release Flow

on:
  push:
    tags:
      - "app/v*"
  workflow_dispatch:
    inputs:
      draft:
        description: is a draft release?
        type: choice
        options:
          - "yes"
          - "no"
          - "no-release"
        default: "yes"
      prerelease:
        description: is a prerelease?
        type: choice
        options:
          - "yes"
          - "no"
        default: "yes"

env:
  CI: true
  CI_RELEASE: true

jobs:
  build-and-sign:
    if: inputs.draft != 'no-release'
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
            artifact_path: target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_path: target/x86_64-unknown-linux-gnu/release/bundle/rpm/*.rpm
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_path: target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
    env:
      APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
      APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    outputs:
      VERSION: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - uses: ./.github/actions/setup-rust
        with:
          platform: ${{ matrix.platform }}
          target: ${{ matrix.target }}
      - name: setup-node
        uses: ./.github/actions/setup-node
        with:
          platform: ${{ matrix.platform }}
      - name: Set VERSION environment variable
        id: get_version
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/app/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "VERSION=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            # Use script to get latest version from GitHub releases
            CURRENT_VERSION=$(./scripts/get_github_release_version.js BodhiSearch/BodhiApp)
            # Increment the patch version
            NEW_VERSION=$(echo ${CURRENT_VERSION} | awk -F. '{$3 = $3 + 1; print}' OFS=.)
            # Set the VERSION environment variable
            echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi
      - name: clean
        shell: bash
        run: |
          make ci.clean
      - name: Update version in Cargo.toml files
        shell: bash
        run: |
          if ! make ci.update-version VERSION=${{ steps.get_version.outputs.version }}; then
            echo "Failed to update version"
            exit 1
          fi
      - name: Build lib_bodhiserver to trigger frontend build
        shell: bash
        run: |
          cargo build --release -p lib_bodhiserver
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
      - name: Build and Sign Application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          TAURI_PRIVATE_KEY: "${{ secrets.TAURI_PRIVATE_KEY }}"
          GH_PAT: ${{ secrets.GH_PAT }}
        with:
          projectPath: crates/bodhi
          appName: Bodhi App
          iconPath: src-tauri/icons
          args: "--target ${{ matrix.target }} --features native,production"
      - name: Archive Artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          cp ${{ matrix.artifact_path }} artifacts/
      - name: Rename Artifacts to Simple Names
        shell: bash
        run: |
          cd artifacts
          for file in *; do
            case "$file" in
              *.dmg)
                mv "$file" "Bodhi_App.dmg"
                echo "Renamed $file to Bodhi_App.dmg"
                ;;
              *.msi)
                mv "$file" "Bodhi_App.msi"
                echo "Renamed $file to Bodhi_App.msi"
                ;;
              *.rpm)
                mv "$file" "Bodhi_App.rpm"
                echo "Renamed $file to Bodhi_App.rpm"
                ;;
            esac
          done
          echo "Final artifacts:"
          ls -lh
      - name: Upload Built Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.platform }}-${{ matrix.target }}
          path: artifacts/

  create-release:
    if: inputs.draft != 'no-release'
    needs: build-and-sign
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      VERSION: ${{ needs.build-and-sign.outputs.VERSION }}
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "app/v${{ needs.build-and-sign.outputs.VERSION }}"
          name: "Bodhi v${{ needs.build-and-sign.outputs.VERSION }}"
          body: "See the assets to download this version and install."
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.prerelease }}

  upload-assets:
    if: inputs.draft != 'no-release'
    needs: [build-and-sign, create-release]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: ./artifacts
          merge-multiple: true
      - name: List artifacts before upload
        shell: bash
        run: |
          echo "=== Artifacts to be uploaded ==="
          ls -lah ./artifacts
          echo ""
          echo "=== File details ==="
          for file in ./artifacts/*; do
            echo "File: $(basename "$file")"
            echo "  Size: $(ls -lh "$file" | awk '{print $5}')"
            echo "  SHA256: $(shasum -a 256 "$file" | awk '{print $1}')"
            echo ""
          done
      - name: Generate checksums
        shell: bash
        run: |
          cd artifacts
          echo "=== Generating checksums ==="

          # Generate individual .sha256 sidecar files
          for file in *; do
            shasum -a 256 "$file" | awk '{print $1}' > "$file.sha256"
            echo "âœ“ Created $file.sha256"
          done

          # Create checksums.json structure
          cat > checksums.json << EOF
          {
            "version": "${{ needs.create-release.outputs.VERSION }}",
            "tag": "app/v${{ needs.create-release.outputs.VERSION }}",
            "released_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "checksums": {}
          }
          EOF

          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Populate checksums.json
          for file in Bodhi_App.*; do
            [[ "$file" == *.sha256 ]] && continue
            SHA=$(shasum -a 256 "$file" | awk '{print $1}')
            SIZE=$(stat -c%s "$file")
            URL="https://github.com/${{ github.repository }}/releases/download/app/v${{ needs.create-release.outputs.VERSION }}/$file"

            # Update JSON using jq
            jq ".checksums[\"$file\"] = {\"sha256\": \"$SHA\", \"size\": $SIZE, \"url\": \"$URL\"}" checksums.json > tmp.json && mv tmp.json checksums.json
          done

          echo ""
          echo "=== checksums.json contents ==="
          jq '.' checksums.json

          echo ""
          echo "=== Final artifacts to upload ==="
          ls -lh
      - name: Upload Assets to Release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Uploading assets to release app/v${{ needs.create-release.outputs.VERSION }}"
          gh release upload "app/v${{ needs.create-release.outputs.VERSION }}" artifacts/* --repo ${{ github.repository }}
      - name: Verify uploaded assets
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Verifying assets uploaded to GitHub ==="
          gh release view "app/v${{ needs.create-release.outputs.VERSION }}" --repo ${{ github.repository }} --json assets --jq '.assets[] | "Asset: \(.name)\n  Size: \(.size) bytes\n  Download: \(.url)\n"'
          echo ""
          echo "=== Comparison ==="
          echo "Local files uploaded:"
          ls -1 ./artifacts/ | sed 's/^/  - /'
          echo ""
          echo "GitHub release assets:"
          gh release view "app/v${{ needs.create-release.outputs.VERSION }}" --repo ${{ github.repository }} --json assets --jq '.assets[].name' | sed 's/^/  - /'

  bump-version:
    if: inputs.draft != 'no-release' && inputs.draft != 'yes'
    needs: [upload-assets, create-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          submodules: recursive
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Bump version files
        shell: bash
        run: |
          CURRENT_VERSION="${{ needs.create-release.outputs.VERSION }}"
          NEXT_VERSION=$(./scripts/increment_version.js "$CURRENT_VERSION" patch dev)
          echo "Bumping from $CURRENT_VERSION to $NEXT_VERSION"
          make ci.update-version VERSION="$NEXT_VERSION"
          cargo update --workspace

      - name: Commit and push version bump
        uses: ./.github/actions/commit-and-push-with-retry
        with:
          branch: main
          commit-message: "chore: bump version to ${{ needs.create-release.outputs.VERSION }} [skip ci]"
          files: "-A"

