name: App Release Flow

on:
  push:
    tags:
      - "app/v*"
  workflow_dispatch:
    inputs:
      draft:
        description: is a draft release?
        type: choice
        options:
          - "yes"
          - "no"
          - "no-release"
        default: "yes"
      prerelease:
        description: is a prerelease?
        type: choice
        options:
          - "yes"
          - "no"
        default: "yes"

env:
  CI: true
  CI_RELEASE: true

jobs:
  build-and-sign:
    if: inputs.draft != 'no-release'
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
            artifact_path: target/release/bundle/dmg/*.dmg
          # - platform: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   artifact_path: target/release/bundle/rpm/*.rpm
          # - platform: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   artifact_path: target/release/bundle/msi/*.msi
    env:
      APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
      APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    outputs:
      VERSION: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Git with PAT for for non-Windows
        if: matrix.platform != 'windows-latest'
        shell: bash
        run: |
          git config --global url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf git@github.com:
          git submodule sync --recursive
          git submodule update --init --recursive --depth=1
          git config --global --unset url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf
      - name: Setup Git with PAT for Windows
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          git config --global url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf git@github.com:
          git submodule sync --recursive
          git submodule update --init --recursive --depth=1
          git config --global --unset url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf
      - uses: ./.github/actions/setup-rust
        with:
          platform: ${{ matrix.platform }}
          target: ${{ matrix.target }}
      - name: setup-node
        uses: ./.github/actions/setup-node
        with:
          platform: ${{ matrix.platform }}
      - name: Set VERSION environment variable
        id: get_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/app/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "VERSION=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            # Use script to get latest version from GitHub releases
            CURRENT_VERSION=$(./scripts/get_github_release_version.js BodhiSearch/BodhiApp)
            # Increment the patch version
            NEW_VERSION=$(echo ${CURRENT_VERSION} | awk -F. '{$3 = $3 + 1; print}' OFS=.)
            # Set the VERSION environment variable
            echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi
      - name: clean
        shell: bash
        run: |
          make ci.clean
      - name: Update version in Cargo.toml files
        run: |
          if ! make ci.update-version VERSION=${{ steps.get_version.outputs.version }}; then
            echo "Failed to update version"
            exit 1
          fi
      - name: Build lib_bodhiserver to trigger frontend build
        shell: bash
        run: |
          cargo build --release -p lib_bodhiserver
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
      - name: Build and Sign Application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          TAURI_PRIVATE_KEY: "${{ secrets.TAURI_PRIVATE_KEY }}"
          GH_PAT: ${{ secrets.GH_PAT }}
        with:
          projectPath: crates/bodhi
          appName: Bodhi App
          iconPath: src-tauri/icons
          args: "--target ${{ matrix.target }} --features native,production"
      - name: Archive Artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          cp ${{ matrix.artifact_path }} artifacts/
      - name: Upload Built Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.platform }}-${{ matrix.target }}
          path: artifacts/

  create-release:
    if: inputs.draft != 'no-release'
    needs: build-and-sign
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      VERSION: ${{ needs.build-and-sign.outputs.VERSION }}
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "app/v${{ needs.build-and-sign.outputs.VERSION }}"
          name: "Bodhi v${{ needs.build-and-sign.outputs.VERSION }}"
          body: "See the assets to download this version and install."
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.prerelease }}

  upload-assets:
    if: inputs.draft != 'no-release'
    needs: [build-and-sign, create-release]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-${{ matrix.platform }}-${{ matrix.target }}
          path: ./artifacts
      - name: Upload Assets to Release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd artifacts
          find . -type f \( -name "*.dmg" -o -name "*.msi" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.app.tar.gz" -o -name "*.sig" \) -exec gh release upload "app/v${{ needs.create-release.outputs.VERSION }}" {} \;

