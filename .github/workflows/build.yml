name: Mac/Linux/Windows Build Flow

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CI: true
  RUST_BACKTRACE: 1

jobs:
  build:
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
          - platform: ubuntu-latest-4-cores
            target: x86_64-unknown-linux-gnu
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
          # - platform: macos-13
          #   target: x86_64-apple-darwin
    runs-on: ${{ matrix.platform }}
    outputs:
      coverage-success: ${{ steps.coverage.outcome == 'success' }}
    steps:
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            pkg-config \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf
      - name: envs
        shell: bash
        run: |
          echo "USER_HOME=$HOME" >> $GITHUB_ENV
      - name: Enable symlinks
        shell: bash
        run: |
          git config --global core.symlinks true
          git config --global core.autocrlf false
          git config --global core.eol lf
      - uses: actions/checkout@v4
      - name: Rewrite submodule URLs and checkout submodules
        shell: bash
        run: |
          git config --global url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf git@github.com:
          git submodule sync --recursive
          git submodule update --init --recursive --depth=1
          git config --global --unset url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf

      - name: Setup Python packages
        shell: bash
        run: |
          python -m pip install -U pip
          pip install -U "huggingface_hub[cli]"

      - name: Cache HuggingFace models
        uses: actions/cache@v4
        id: cache-hf
        with:
          path: ${{ env.USER_HOME }}/.cache/huggingface
          key: hf-cache-phi4-mini-instruct
          enableCrossOsArchive: true

      - name: Check and Download model
        if: steps.cache-hf.outputs.cache-hit != 'true'
        shell: bash
        run: |
          huggingface-cli download --revision 7ff82c2aaa4dde30121698a973765f39be5288c0 bartowski/microsoft_Phi-4-mini-instruct-GGUF microsoft_Phi-4-mini-instruct-Q4_K_M.gguf

      - name: setup-rust
        uses: ./.github/actions/setup-rust
        with:
          platform: ${{ matrix.platform }}
          target: ${{ matrix.target }}
      - name: setup-node
        uses: ./.github/actions/setup-node
        with:
          platform: ${{ matrix.platform }}
      - name: clean
        shell: bash
        run: |
          make ci.clean
      - name: Build llama_server_proc binaries for Playwright tests
        shell: bash
        run: |
          # Build the llama_server_proc project - build.rs handles binary placement
          cargo build -p llama_server_proc
          echo "Build completed. Checking generated binaries:"
          find crates/llama_server_proc/bin -type f 2>/dev/null || echo "No binaries found yet"
        env:
          CI_DEFAULT_VARIANT: cpu
      - name: Upload llama_server_proc binaries
        uses: actions/upload-artifact@v4
        with:
          name: llama-server-binaries-${{ matrix.target }}
          path: crates/llama_server_proc/bin/
          retention-days: 1
      - name: Generate code coverage
        id: coverage
        shell: bash
        run: |
          make ci.coverage
        env:
          HF_TEST_TOKEN_ALLOWED: ${{ secrets.HF_TEST_TOKEN_ALLOWED }}
          HF_TEST_TOKEN_PUBLIC: ${{ secrets.HF_TEST_TOKEN_PUBLIC }}
          CI_DEFAULT_VARIANT: cpu
          # Integration test environment variables
          INTEG_TEST_AUTH_URL: ${{ vars.INTEG_TEST_AUTH_URL }}
          INTEG_TEST_AUTH_REALM: ${{ vars.INTEG_TEST_AUTH_REALM }}
          INTEG_TEST_CLIENT_ID: ${{ secrets.INTEG_TEST_CLIENT_ID }}
          INTEG_TEST_CLIENT_SECRET: ${{ secrets.INTEG_TEST_CLIENT_SECRET }}
          INTEG_TEST_USERNAME: ${{ secrets.INTEG_TEST_USERNAME }}
          INTEG_TEST_PASSWORD: ${{ secrets.INTEG_TEST_PASSWORD }}
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        if: success()
        continue-on-error: true
        with:
          name: BodhiApp-${{ matrix.target }}
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: BodhiSearch/BodhiApp
          files: lcov.info
          fail_ci_if_error: false
          flags: ${{ matrix.target }},bodhi
      - name: Run UI Tests
        shell: bash
        run: |
          make ci.ui
      - name: Upload UI coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        if: success()
        continue-on-error: true
        with:
          name: BodhiApp-${{ matrix.target }}
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: BodhiSearch/BodhiApp
          files: |
            crates/bodhi/coverage/coverage-final.json
            crates/bodhi/coverage/clover.xml
          fail_ci_if_error: false
          flags: ${{ matrix.target }},bodhi,ui
      - name: Check ts-client is up to date
        if: matrix.platform == 'ubuntu-latest-4-cores'
        shell: bash
        run: |
          make ci.ts-client-check
      - name: Check ts-client tests pass
        if: matrix.platform == 'ubuntu-latest-4-cores'
        shell: bash
        run: make ci.ts-client-test
      - name: Build NAPI bindings for Playwright
        id: napi-build
        continue-on-error: true
        working-directory: crates/lib_bodhiserver_napi
        shell: bash
        run: |
          npm ci
          npm run build:debug
        env:
          NPM_CACHE_DIR: ${{ env.NPM_CACHE_DIR }}
      - name: Upload NAPI artifacts
        if: steps.napi-build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: napi-bindings-${{ matrix.target }}
          path: |
            crates/lib_bodhiserver_napi/app-bindings.*.node
            crates/lib_bodhiserver_napi/index.cjs
            crates/lib_bodhiserver_napi/index.d.ts
          retention-days: 1

  playwright-tests:
    needs: build
    if: needs.build.outputs.coverage-success == 'true'
    timeout-minutes: 20
    permissions:
      checks: write
      contents: read
      pull-requests: write
      actions: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
          - platform: ubuntu-latest-4-cores
            target: x86_64-unknown-linux-gnu
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Playwright
        uses: ./.github/actions/setup-playwright
        with:
          platform: ${{ matrix.platform }}
          working-directory: crates/lib_bodhiserver_napi
      - name: Download NAPI artifacts
        uses: actions/download-artifact@v4
        with:
          name: napi-bindings-${{ matrix.target }}
          path: crates/lib_bodhiserver_napi/
      - name: Download llama_server_proc binaries
        uses: actions/download-artifact@v4
        with:
          name: llama-server-binaries-${{ matrix.target }}
          path: crates/llama_server_proc/bin/
      - name: Debug artifact structure
        shell: bash
        run: |
          echo "Checking artifact download structure:"
          echo "Contents of crates/llama_server_proc/:"
          find crates/llama_server_proc/ -type f 2>/dev/null || echo "Directory not found"
          echo "Contents of crates/llama_server_proc/bin/:"
          find crates/llama_server_proc/bin/ -type f 2>/dev/null || echo "bin/ directory not found"
      - name: Verify llama-server binary exists and set permissions
        shell: bash
        run: |
          echo "Checking for llama-server binary at expected location:"
          # Check for llama-server with or without .exe extension
          BINARY_PATH=""
          if [ -f crates/llama_server_proc/bin/${{ matrix.target }}/cpu/llama-server ]; then
            BINARY_PATH="crates/llama_server_proc/bin/${{ matrix.target }}/cpu/llama-server"
          elif [ -f crates/llama_server_proc/bin/${{ matrix.target }}/cpu/llama-server.exe ]; then
            BINARY_PATH="crates/llama_server_proc/bin/${{ matrix.target }}/cpu/llama-server.exe"
          fi

          if [ -n "$BINARY_PATH" ]; then
            echo "✅ Binary found at: $BINARY_PATH"
            ls -la "$BINARY_PATH"
            # Set executable permissions on Unix-like systems only
            if [[ "$RUNNER_OS" != "Windows" ]]; then
              chmod +x "$BINARY_PATH"
            fi
          else
            echo "❌ Binary not found at expected location!"
            echo "Contents of crates/llama_server_proc/bin/:"
            find crates/llama_server_proc/bin -type f 2>/dev/null || echo "bin directory not found"
            echo "Looking for any llama-server binaries:"
            find crates/llama_server_proc/bin -name "*llama*" -type f 2>/dev/null || echo "No llama binaries found"
            exit 1
          fi
      - name: Install dependencies
        shell: bash
        working-directory: crates/lib_bodhiserver_napi
        run: |
          npm ci
      - name: Verify NAPI bindings and llama-server binaries exist
        shell: bash
        working-directory: crates/lib_bodhiserver_napi
        run: |
          if [ ! -f app-bindings.*.node ]; then
            echo "Error: NAPI bindings not found. Build may have failed."
            exit 1
          fi
          echo "✅ NAPI bindings found:"
          ls -la app-bindings.*.node
          ls -la index.*
          echo "✅ llama-server binary:"
          # Check for binary with or without .exe extension
          if [ -f ../llama_server_proc/bin/${{ matrix.target }}/cpu/llama-server ]; then
            ls -la ../llama_server_proc/bin/${{ matrix.target }}/cpu/llama-server
          elif [ -f ../llama_server_proc/bin/${{ matrix.target }}/cpu/llama-server.exe ]; then
            ls -la ../llama_server_proc/bin/${{ matrix.target }}/cpu/llama-server.exe
          else
            echo "Error: llama-server binary not found!"
            exit 1
          fi
      - name: Run NAPI binding tests
        id: napi-tests
        continue-on-error: true
        shell: bash
        working-directory: crates/lib_bodhiserver_napi
        run: |
          # Run tests with JUnit reporter for test-reporter integration
          npx vitest run --reporter=junit --outputFile=test-results/vitest-junit.xml --reporter=verbose
        env:
          CI: true
          BODHI_EXEC_VARIANT: cpu
      - name: Publish NAPI binding test results
        uses: dorny/test-reporter@v1
        if: (success() || failure()) && steps.napi-tests.outcome != 'skipped'
        with:
          name: NAPI Binding Tests (${{ matrix.target }})
          path: crates/lib_bodhiserver_napi/test-results/vitest-junit.xml
          reporter: java-junit
          fail-on-error: false
      - name: Upload NAPI test results
        uses: actions/upload-artifact@v4
        if: always() && steps.napi-tests.outcome != 'skipped'
        with:
          name: napi-test-results-${{ matrix.target }}
          path: |
            crates/lib_bodhiserver_napi/coverage/
            crates/lib_bodhiserver_napi/test-results/
          retention-days: 1
      - name: Run Playwright tests
        id: playwright-run
        shell: bash
        working-directory: crates/lib_bodhiserver_napi
        run: |
          # Run Playwright tests with CI configuration
          npm run test:playwright:ci
        env:
          CI: true
          BODHI_EXEC_VARIANT: cpu
          # Use headless mode in CI
          PLAYWRIGHT_HEADLESS: true
          # Increase timeout for CI environment
          PLAYWRIGHT_TIMEOUT: 30000
          # Authentication environment variables for integration tests
          INTEG_TEST_CLIENT_ID: ${{ secrets.INTEG_TEST_CLIENT_ID }}
          INTEG_TEST_CLIENT_SECRET: ${{ secrets.INTEG_TEST_CLIENT_SECRET }}
          INTEG_TEST_AUTH_URL: ${{ vars.INTEG_TEST_AUTH_URL }}
          INTEG_TEST_AUTH_REALM: ${{ vars.INTEG_TEST_AUTH_REALM }}
          INTEG_TEST_USERNAME: ${{ secrets.INTEG_TEST_USERNAME }}
          INTEG_TEST_PASSWORD: ${{ secrets.INTEG_TEST_PASSWORD }}
      - name: Publish Playwright test results
        uses: dorny/test-reporter@v1
        if: (success() || failure()) && steps.playwright-run.outcome != 'skipped'
        with:
          name: Playwright Tests (${{ matrix.target }})
          path: crates/lib_bodhiserver_napi/test-results/junit.xml
          reporter: java-junit
          fail-on-error: false
      - name: Upload Playwright test results
        uses: actions/upload-artifact@v4
        if: failure() && steps.playwright-run.outcome != 'skipped'
        with:
          name: playwright-results-${{ matrix.target }}
          path: |
            crates/lib_bodhiserver_napi/test-results/
            crates/lib_bodhiserver_napi/playwright-report/
          retention-days: 7
      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        if: always() && steps.playwright-run.outcome != 'skipped'
        with:
          name: playwright-report-${{ matrix.target }}
          path: crates/lib_bodhiserver_napi/playwright-report/
          retention-days: 7
      - name: Check test results and fail if any failed
        if: always()
        shell: bash
        run: |
          echo "Checking test results..."
          echo "NAPI tests outcome: ${{ steps.napi-tests.outcome }}"
          echo "Playwright tests outcome: ${{ steps.playwright-run.outcome }}"

          if [[ "${{ steps.napi-tests.outcome }}" == "failure" ]]; then
            echo "❌ NAPI binding tests failed"
            TESTS_FAILED=true
          fi

          if [[ "${{ steps.playwright-run.outcome }}" == "failure" ]]; then
            echo "❌ Playwright tests failed"
            TESTS_FAILED=true
          fi

          if [[ "$TESTS_FAILED" == "true" ]]; then
            echo "💔 One or more test suites failed. Check uploaded artifacts for details."
            exit 1
          else
            echo "✅ All test suites passed!"
          fi
