name: Publish TypeScript Client

on:
  push:
    tags:
      - "ts-client/v*"

# Prevent concurrent releases
concurrency:
  group: npm-release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Enable symlinks
        shell: bash
        run: |
          git config --global core.symlinks true
          git config --global core.autocrlf false
          git config --global core.eol lf
      - uses: actions/checkout@v4
      - name: Rewrite submodule URLs and checkout submodules
        shell: bash
        run: |
          git config --global url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf git@github.com:
          git submodule sync --recursive
          git submodule update --init --recursive --depth=1
          git config --global --unset url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf
      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          platform: ubuntu-latest

      - name: Set up Node
        uses: ./.github/actions/setup-node
        with:
          platform: ubuntu-latest

      - name: Extract version information
        id: version
        working-directory: ./ts-client
        run: |
          # Extract the version from the tag if it's a tag-triggered workflow
          if [[ "$GITHUB_REF" == refs/tags/ts-client/v* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/ts-client/v}
            echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          fi

          # Extract current version from package.json
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "pkg_version=$PKG_VERSION" >> $GITHUB_OUTPUT

          # Remove -dev suffix if present for the release
          RELEASE_VERSION=${PKG_VERSION%-dev}
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

          # Calculate the next patch version for post-release
          IFS='.' read -ra VERSION_PARTS <<< "$RELEASE_VERSION"
          NEXT_PATCH=$((${VERSION_PARTS[2]} + 1))
          NEXT_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEXT_PATCH-dev"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Verify package version matches tag
        working-directory: ./ts-client
        run: |
          PKG_BASE_VERSION=${{ steps.version.outputs.release_version }}
          TAG_VERSION=${{ steps.version.outputs.tag_version }}
          if [ "$PKG_BASE_VERSION" != "$TAG_VERSION" ]; then
            echo "Package version base ($PKG_BASE_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi

      - name: Update version for release (remove -dev suffix)
        working-directory: ./ts-client
        run: |
          RELEASE_VERSION=${{ steps.version.outputs.release_version }}
          # Update version in package.json (remove -dev suffix)
          npm version $RELEASE_VERSION --no-git-tag-version

      - name: Run tests
        run: make ci.ts-client-test

      - name: Build package
        working-directory: ./ts-client
        run: npm run build

      - name: Verify build artifacts
        working-directory: ./ts-client
        run: |
          if [ ! -d "dist" ]; then
            echo "Build artifacts not found"
            exit 1
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ts-client/dist/*
            ts-client/README.md
            ts-client/package.json
          name: "TypeScript Client v${{ steps.version.outputs.release_version }}"
          body: |
            TypeScript Client Release v${{ steps.version.outputs.release_version }}

            ## Installation
            ```bash
            npm install @bodhiapp/ts-client
            ```

            ## Usage
            ```typescript
            import { BodhiClient } from '@bodhiapp/ts-client';

            const client = new BodhiClient({
              baseUrl: 'http://localhost:1135',
              apiKey: 'your-api-key'
            });
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ github.ref_name }}

      - name: Publish to npm
        working-directory: ./ts-client
        run: |
          # NPM_TOKEN from secrets will be used by .npmrc
          npm publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify NPM Package
        working-directory: ./ts-client
        run: |
          # Wait for NPM to index the package
          sleep 10
          PUBLISHED_VERSION=$(npm view @bodhiapp/ts-client version 2>/dev/null || echo "not found")
          if [ "$PUBLISHED_VERSION" = "not found" ]; then
            echo "Package not found on NPM"
            exit 1
          fi
          echo "Successfully published version $PUBLISHED_VERSION"

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Bump version and add -dev suffix
        run: |
          # Update to next dev version
          cd ./ts-client
          npm version ${{ steps.version.outputs.next_version }} --no-git-tag-version
          cd ..
          git add ts-client/package.json
          git commit -m "chore: bump ts-client version to ${{ steps.version.outputs.next_version }} after release [skip ci]"
          git push origin HEAD:${GITHUB_REF_NAME%/*}
