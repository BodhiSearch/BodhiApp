name: Deploy Website to GitHub Pages

on:
  # Manual trigger with version input
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (x.y.z format, e.g., 0.1.0)'
        required: true
        type: string
  # Auto-trigger on release tags
  push:
    tags:
      - 'getbodhi.app/v*'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: getbodhi.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: getbodhi.app/package-lock.json

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            getbodhi.app/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('getbodhi.app/package-lock.json') }}-${{ hashFiles('getbodhi.app/**.[jt]s', 'getbodhi.app/**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('getbodhi.app/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci

      - name: Update version and generate version.json
        run: |
          # Determine version based on trigger type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ inputs.version }}"
            echo "Using workflow_dispatch version: $VERSION"
          else
            VERSION="${GITHUB_REF_NAME#getbodhi.app/v}"
            echo "Using tag version: $VERSION"
          fi

          # Validate version format
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $VERSION (expected x.y.z)"
            exit 1
          fi

          SHA="${GITHUB_SHA:0:8}"

          # Update package.json version
          npm version "$VERSION" --no-git-tag-version --allow-same-version
          echo "✓ Updated package.json to version $VERSION"

          # Generate version.json
          mkdir -p public
          cat > public/version.json << EOF
          {
            "version": "$VERSION",
            "tag": "$SHA"
          }
          EOF
          echo "✓ Generated version.json with version=$VERSION, tag=$SHA"

      - name: Build with Next.js
        run: npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./getbodhi.app/out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  update-homebrew:
    if: startsWith(github.ref, 'refs/tags/getbodhi.app/v')
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Extract app version from releases.json
        id: app_version
        run: |
          # Extract macOS silicon specific version and tag (architecture-level)
          VERSION=$(jq -r '.desktop.platforms.macos.silicon.version' getbodhi.app/public/releases.json)
          TAG=$(jq -r '.desktop.platforms.macos.silicon.tag' getbodhi.app/public/releases.json)

          # Extract DMG checksum and URL for homebrew
          DMG_SHA256=$(jq -r '.desktop.platforms.macos.silicon.sha256 // empty' getbodhi.app/public/releases.json)
          DMG_URL=$(jq -r '.desktop.platforms.macos.silicon.download_url' getbodhi.app/public/releases.json)

          if [[ -z "$DMG_SHA256" ]]; then
            echo "⚠ Warning: DMG checksum not found in releases.json"
            echo "Homebrew update may fail. Ensure checksums.json exists in release."
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "dmg_sha256=$DMG_SHA256" >> $GITHUB_OUTPUT
          echo "dmg_url=$DMG_URL" >> $GITHUB_OUTPUT

          echo "App version (macOS silicon): $VERSION"
          echo "App tag: $TAG"
          echo "DMG URL: $DMG_URL"
          echo "DMG SHA256: ${DMG_SHA256:0:16}..."

      - name: Trigger homebrew-apps update
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GH_PAT }}
          repository: BodhiSearch/homebrew-apps
          event-type: app-released
          client-payload: |
            {
              "version": "${{ steps.app_version.outputs.version }}",
              "tag": "${{ steps.app_version.outputs.tag }}",
              "dmg_sha256": "${{ steps.app_version.outputs.dmg_sha256 }}",
              "dmg_url": "${{ steps.app_version.outputs.dmg_url }}",
              "triggered_by": "${{ github.repository }}",
              "workflow_run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }

  bump-dev-version:
    if: startsWith(github.ref, 'refs/tags/getbodhi.app/v')
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: getbodhi.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Bump to development version
        run: |
          VERSION="${GITHUB_REF_NAME#getbodhi.app/v}"
          NEXT_VERSION=$(node ../scripts/increment_version.js "$VERSION" patch dev)
          echo "Bumping to development version: $NEXT_VERSION"

          # Update package.json and package-lock.json
          npm version "$NEXT_VERSION" --no-git-tag-version --allow-same-version

          # Generate dev version.json
          mkdir -p public
          cat > public/version.json << EOF
          {
            "version": "$NEXT_VERSION",
            "tag": "dev"
          }
          EOF

          echo "Updated package.json to $NEXT_VERSION"
          echo "Generated dev version.json"

      - name: Commit and push version bump
        uses: ./.github/actions/commit-and-push-with-retry
        with:
          branch: main
          commit-message: |
            chore(getbodhi.app): bump to development version after release

            Automatically bumped after deploying ${{ github.ref_name }}
          files: "getbodhi.app/package.json getbodhi.app/package-lock.json getbodhi.app/public/version.json"
