name: Publish app-bindings

on:
  push:
    tags:
      - 'bodhi-app-bindings/v*'

# Prevent concurrent releases
concurrency:
  group: npm-napi-release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  id-token: write

env:
  CI: true
  RUST_BACKTRACE: 1
  DEBUG: napi:*
  APP_NAME: app-bindings
  MACOSX_DEPLOYMENT_TARGET: '10.13'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build:release -- --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build:release -- --target x86_64-unknown-linux-gnu
          - host: windows-latest
            build: npm run build:release:win
            target: x86_64-pc-windows-msvc
    name: build-${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    timeout-minutes: 60
    steps:
      - name: envs
        shell: bash
        run: |
          echo "USER_HOME=$HOME" >> $GITHUB_ENV
      - name: Enable symlinks
        shell: bash
        run: |
          git config --global core.symlinks true
          git config --global core.autocrlf false
          git config --global core.eol lf
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Rewrite submodule URLs and checkout submodules
        shell: bash
        run: |
          git config --global url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf git@github.com:
          git submodule sync --recursive
          git submodule update --init --recursive --depth=1
          git config --global --unset url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf
      - uses: Swatinem/rust-cache@v2
      - name: install Rust 1.87.0
        uses: dtolnay/rust-toolchain@1.87.0
        with:
          targets: ${{ matrix.settings.target }}
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          platform: ${{ matrix.settings.host }}
      - name: Install dependencies
        working-directory: crates/lib_bodhiserver_napi
        run: npm ci
      - name: Build
        working-directory: crates/lib_bodhiserver_napi
        run: ${{ matrix.settings.build }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            crates/lib_bodhiserver_napi/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          platform: ubuntu-latest
      - name: Extract version information
        id: version
        working-directory: ./crates/lib_bodhiserver_napi
        run: |
          # Extract the version from the tag
          TAG_VERSION=${GITHUB_REF#refs/tags/bodhi-app-bindings/v}
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "release_version=$TAG_VERSION" >> $GITHUB_OUTPUT

          # Calculate the next patch version for post-release
          IFS='.' read -ra VERSION_PARTS <<< "$TAG_VERSION"
          NEXT_PATCH=$((${VERSION_PARTS[2]} + 1))
          NEXT_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEXT_PATCH-dev"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Update version for release
        working-directory: crates/lib_bodhiserver_napi
        run: |
          # Set version from tag directly
          npm version ${{ steps.version.outputs.tag_version }} --no-git-tag-version

      - name: Install dependencies
        working-directory: crates/lib_bodhiserver_napi
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: crates/lib_bodhiserver_napi/artifacts

      - name: Setup npm packages
        working-directory: crates/lib_bodhiserver_napi
        run: npm run create-npm-dirs

      - name: Move artifacts
        working-directory: crates/lib_bodhiserver_napi
        run: npm run artifacts

      - name: List packages
        working-directory: crates/lib_bodhiserver_napi
        run: ls -R ./npm

      - name: Publish Platform Packages to NPM
        working-directory: crates/lib_bodhiserver_napi
        run: |
          npm config set provenance true
          # Publish platform-specific packages
          for platform_dir in npm/*/; do
            if [ -d "$platform_dir" ]; then
              echo "Publishing from $platform_dir"
              (cd "$platform_dir" && npm publish --access public)
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update optional dependencies and publish main package
        working-directory: crates/lib_bodhiserver_napi
        run: |
          npm run update-optional-dependencies
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          RELEASE_VERSION: ${{ steps.version.outputs.release_version }}

      - name: Verify NPM Package
        working-directory: crates/lib_bodhiserver_napi
        run: npm run verify-packages
        env:
          RELEASE_VERSION: ${{ steps.version.outputs.release_version }}


      - name: Configure Git for version bump
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Pull latest changes
        run: |
          # Fetch only the latest commit from main
          git fetch --depth=1 origin main
          git checkout -B main origin/main

      - name: Bump version and add -dev suffix
        run: |
          cd ./crates/lib_bodhiserver_napi
          npm version ${{ steps.version.outputs.next_version }} --no-git-tag-version
          npm install
          git add package.json package-lock.json
          git commit -m "chore: bump app-bindings version to ${{ steps.version.outputs.next_version }} after release [skip ci]"
          git push origin main
