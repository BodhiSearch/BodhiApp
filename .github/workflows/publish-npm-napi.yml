name: Publish app-bindings

on:
  push:
    tags:
      - 'bodhi-app-bindings/v*'

# Prevent concurrent releases
concurrency:
  group: npm-napi-release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  id-token: write

env:
  CI: true
  RUST_BACKTRACE: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build:release -- --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build:release -- --target x86_64-unknown-linux-gnu
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: npm run build:release -- --target x86_64-pc-windows-msvc
    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    timeout-minutes: 60
    steps:
      - name: envs
        shell: bash
        run: |
          echo "USER_HOME=$HOME" >> $GITHUB_ENV
      - name: Enable symlinks
        shell: bash
        run: |
          git config --global core.symlinks true
          git config --global core.autocrlf false
          git config --global core.eol lf
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Rewrite submodule URLs and checkout submodules
        shell: bash
        run: |
          git config --global url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf git@github.com:
          git submodule sync --recursive
          git submodule update --init --recursive --depth=1
          git config --global --unset url.https://gh_pat:${{ secrets.GH_PAT }}@github.com/.insteadOf
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          platform: ${{ matrix.settings.host }}
          target: ${{ matrix.settings.target }}
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          platform: ${{ matrix.settings.host }}
      - name: Install dependencies
        working-directory: crates/lib_bodhiserver_napi
        run: npm ci
      - name: Build
        working-directory: crates/lib_bodhiserver_napi
        run: ${{ matrix.settings.build }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            crates/lib_bodhiserver_napi/*.node
            crates/lib_bodhiserver_napi/index.cjs
            crates/lib_bodhiserver_napi/index.d.ts
          if-no-files-found: error

  publish:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          platform: ${{ matrix.settings.host }}
      - name: Extract version information
        id: version
        working-directory: ./crates/lib_bodhiserver_napi
        run: |
          # Extract the version from the tag
          TAG_VERSION=${GITHUB_REF#refs/tags/bodhi-app-bindings/v}
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "release_version=$TAG_VERSION" >> $GITHUB_OUTPUT

          # Calculate the next patch version for post-release
          IFS='.' read -ra VERSION_PARTS <<< "$TAG_VERSION"
          NEXT_PATCH=$((${VERSION_PARTS[2]} + 1))
          NEXT_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEXT_PATCH-dev"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies
        working-directory: crates/lib_bodhiserver_napi
        run: npm ci

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts to current directory
        working-directory: crates/lib_bodhiserver_napi
        run: |
          # Copy all built binaries to current directory where NAPI-RS expects them
          for dir in ../../artifacts/bindings-*; do
            if [ -d "$dir" ]; then
              echo "Copying artifacts from $dir"
              cp "$dir"/*.node . 2>/dev/null || echo "No .node files in $dir"
            fi
          done
          echo "Current directory contents:"
          ls -la *.node 2>/dev/null || echo "No .node files found"

      - name: Update version for release
        working-directory: crates/lib_bodhiserver_napi
        run: |
          # Set version from tag directly
          npm version ${{ steps.version.outputs.tag_version }} --no-git-tag-version

      - name: Verify artifacts are ready
        working-directory: crates/lib_bodhiserver_napi
        run: |
          echo "Checking for .node files in current directory..."
          ls -la *.node || exit 1
          echo "Found the following binaries:"
          ls *.node

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            crates/lib_bodhiserver_napi/*.node
            crates/lib_bodhiserver_napi/README.md
            crates/lib_bodhiserver_napi/package.json
          name: 'app-bindings v${{ steps.version.outputs.tag_version }}'
          body: |
            app-bindings Release v${{ steps.version.outputs.tag_version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ github.ref_name }}

      - name: Publish to npm (multiplatform)
        working-directory: crates/lib_bodhiserver_napi
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc

          # Run prepublishOnly to prepare platform packages and main package
          echo "Running prepublishOnly..."
          npm run prepublishOnly

          # Check what was created
          echo "Contents after prepublishOnly:"
          ls -la

          # Publish platform-specific packages first (if any were created)
          if [ -d "npm" ]; then
            echo "Publishing platform packages..."
            for platform_dir in npm/*; do
              if [ -d "$platform_dir" ] && [ -f "$platform_dir/package.json" ]; then
                echo "Publishing platform package: $platform_dir"
                cd "$platform_dir"
                npm publish --access public
                cd ../..
              else
                echo "Skipping $platform_dir - no package.json found"
              fi
            done
          else
            echo "No npm directory found - publishing only main package"
          fi

          # Finally, publish the main package
          echo "Publishing main package..."
          npm publish --access public
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify NPM Package
        working-directory: crates/lib_bodhiserver_napi
        run: |
          # Wait for NPM to index the packages
          sleep 30

          # Check main package
          PUBLISHED_VERSION=$(npm view @bodhiapp/app-bindings version 2>/dev/null || echo "not found")
          if [ "$PUBLISHED_VERSION" = "not found" ]; then
            echo "Main package not found on NPM"
            exit 1
          fi
          echo "Successfully published main package version $PUBLISHED_VERSION"

          # Check a few platform packages (they should exist if napi prepublish worked)
          echo "Checking platform packages..."
          npm view @bodhiapp/app-bindings-darwin-arm64 version 2>/dev/null && echo "Darwin ARM64 package found" || echo "Darwin ARM64 package not found (may not exist yet)"
          npm view @bodhiapp/app-bindings-linux-x64-gnu version 2>/dev/null && echo "Linux x64 package found" || echo "Linux x64 package not found (may not exist yet)"

      - name: Configure Git for version bump
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Pull latest changes
        run: |
          # Fetch only the latest commit from main
          git fetch --depth=1 origin main
          git checkout -B main origin/main

      - name: Bump version and add -dev suffix
        run: |
          cd ./crates/lib_bodhiserver_napi
          npm version ${{ steps.version.outputs.next_version }} --no-git-tag-version
          cd ../..
          git add crates/lib_bodhiserver_napi/package.json
          git commit -m "chore: bump app-bindings version to ${{ steps.version.outputs.next_version }} after release [skip ci]"
          git push origin main
