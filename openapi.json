{
  "openapi": "3.1.0",
  "info": {
    "title": "Bodhi App APIs",
    "description": "API documentation for Bodhi App.\n\n## Authentication\nThis API supports two authentication methods:\n\n1. **Browser Session** (Default)\n   - Login via `/bodhi/v1/auth/initiate` endpoint\n   - Session cookie will be used automatically\n   - Best for browser-based access\n\n2. **API Token**\n   - Create API Token using the app Menu > Settings > API Tokens\n   - Use the API Token as the Authorization Bearer token in API calls\n   - Best for programmatic access\n\n## Authorization\nAPIs require different privilege levels:\n\n- **User Level**: Requires `resource_user` role or `scope_token_user`\n- **Power User Level**: Requires `resource_power_user` role or `scope_token_power_user`\n\nFor API keys, specify required scope when creating the token.\n",
    "contact": {
      "name": "Bodhi API Support",
      "url": "https://github.com/BodhiSearch/BodhiApp/issues",
      "email": "support@getbodhi.app"
    },
    "license": {
      "name": ""
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "http://localhost:1135",
      "description": "Local running instance"
    }
  ],
  "paths": {
    "/api/chat": {
      "post": {
        "tags": [
          "ollama"
        ],
        "summary": "Chat with Model (Ollama Compatible)",
        "description": "Creates a chat completion using Ollama API format. Supports both streaming and non-streaming responses with Ollama-specific options and response format.",
        "operationId": "chatOllamaModel",
        "requestBody": {
          "description": "Chat request in Ollama format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              },
              "example": {
                "messages": [
                  {
                    "content": "You are a helpful assistant.",
                    "role": "system"
                  },
                  {
                    "content": "Hello!",
                    "role": "user"
                  }
                ],
                "model": "llama2:chat",
                "options": {
                  "num_predict": 100,
                  "temperature": 0.7
                },
                "stream": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Chat response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "created_at": "2024-01-20T12:00:00.000000000Z",
                  "done": true,
                  "done_reason": "stop",
                  "eval_count": 10,
                  "eval_duration": "-1",
                  "load_duration": "-1",
                  "message": {
                    "content": "Hello! How can I help you today?",
                    "images": null,
                    "role": "assistant"
                  },
                  "model": "llama2:chat",
                  "prompt_eval_count": 20,
                  "prompt_eval_duration": "-1",
                  "total_duration": 0.0
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OllamaError"
                },
                "example": {
                  "error": "model not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/show": {
      "post": {
        "tags": [
          "ollama"
        ],
        "summary": "Show Model Details (Ollama Compatible)",
        "description": "Retrieves detailed information about a specific model in Ollama API compatible format. Includes model parameters, template, license, and configuration details.",
        "operationId": "showOllamaModel",
        "requestBody": {
          "description": "Model name to get details for",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShowRequest"
              },
              "example": {
                "name": "llama2:chat"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Model details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShowResponse"
                },
                "example": {
                  "details": {
                    "families": null,
                    "family": "unknown",
                    "format": "gguf",
                    "parameter_size": "",
                    "parent_model": null,
                    "quantization_level": ""
                  },
                  "license": "",
                  "model_info": {},
                  "modelfile": "",
                  "modified_at": "2024-01-20T12:00:00.000000000Z",
                  "parameters": "n_keep: 24\nstop:\n- <|start_header_id|>\n- <|end_header_id|>\n- <|eot_id|>\n",
                  "template": "llama2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OllamaError"
                },
                "example": {
                  "error": "model not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/tags": {
      "get": {
        "tags": [
          "ollama"
        ],
        "summary": "List Available Models (Ollama Compatible)",
        "description": "Returns a list of all available models in Ollama API compatible format. Includes model metadata such as size, modification time, and format details.",
        "operationId": "listOllamaModels",
        "responses": {
          "200": {
            "description": "List of available models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsResponse"
                },
                "example": {
                  "models": [
                    {
                      "details": {
                        "families": null,
                        "family": "unknown",
                        "format": "gguf",
                        "parameter_size": "",
                        "parent_model": null,
                        "quantization_level": ""
                      },
                      "digest": "sha256:abc123",
                      "model": "llama2:chat",
                      "modified_at": "2024-01-20T12:00:00.000000000Z",
                      "size": 0
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/access-requests": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "List All Access Requests",
        "description": "List all access requests regardless of status. Requires manager or admin role.",
        "operationId": "listAllAccessRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All requests retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserAccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "role:manager",
              "role:admin"
            ]
          }
        ]
      }
    },
    "/bodhi/v1/access-requests/pending": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "List Pending Access Requests",
        "description": "List all pending access requests. Requires manager or admin role.",
        "operationId": "listPendingAccessRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pending requests retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserAccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "role:manager",
              "role:admin"
            ]
          }
        ]
      }
    },
    "/bodhi/v1/access-requests/{id}/approve": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Approve Access Request",
        "description": "Approve an access request and assign a role. Requires manager or admin role.",
        "operationId": "approveAccessRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Access request ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Role to assign to the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveUserAccessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request approved successfully"
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "role:manager",
              "role:admin"
            ]
          }
        ]
      }
    },
    "/bodhi/v1/access-requests/{id}/reject": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Reject Access Request",
        "description": "Reject an access request. Requires manager or admin role.",
        "operationId": "rejectAccessRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Access request ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request rejected successfully"
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "role:manager",
              "role:admin"
            ]
          }
        ]
      }
    },
    "/bodhi/v1/api-models": {
      "get": {
        "tags": [
          "api-models"
        ],
        "summary": "List API Model Configurations",
        "description": "Retrieves paginated list of all configured API model aliases including external API formats like OpenAI, etc. API keys are masked in list view for security.",
        "operationId": "listApiModels",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API model configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApiModelResponse"
                },
                "example": {
                  "data": [
                    {
                      "api_format": "openai",
                      "api_key": "sk-****",
                      "base_url": "https://api.openai.com/v1",
                      "id": "openai-gpt4"
                    }
                  ],
                  "page": 1,
                  "page_size": 10,
                  "total": 1
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "api-models"
        ],
        "summary": "Create a new API model configuration",
        "operationId": "createApiModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "API model created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiModelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "409": {
            "description": "Alias already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/api-models/api-formats": {
      "get": {
        "tags": [
          "api-models"
        ],
        "summary": "Get Available API Formats",
        "description": "Retrieves list of supported API formats/protocols (e.g., OpenAI).",
        "operationId": "getApiFormats",
        "responses": {
          "200": {
            "description": "API formats retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFormatsResponse"
                },
                "example": {
                  "data": [
                    "openai"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/api-models/fetch-models": {
      "post": {
        "tags": [
          "api-models"
        ],
        "summary": "Fetch available models from the API",
        "operationId": "fetchApiModels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchModelsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Available models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchModelsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/api-models/test": {
      "post": {
        "tags": [
          "api-models"
        ],
        "summary": "Test API connectivity with a prompt",
        "operationId": "testApiModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestPromptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Test result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestPromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/api-models/{id}": {
      "get": {
        "tags": [
          "api-models"
        ],
        "summary": "Get API Model Configuration",
        "description": "Retrieves detailed configuration for a specific API model alias by ID. API keys are masked for security unless explicitly requested.",
        "operationId": "getApiModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the API model alias",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "openai-gpt4"
          }
        ],
        "responses": {
          "200": {
            "description": "API model configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiModelResponse"
                },
                "example": {
                  "api_format": "openai",
                  "api_key": "sk-****",
                  "base_url": "https://api.openai.com/v1",
                  "id": "openai-gpt4",
                  "model": "gpt-4"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "API model with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "entity_not_found",
                    "message": "API model 'invalid-model' not found",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "api-models"
        ],
        "summary": "Update an existing API model configuration",
        "operationId": "updateApiModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "API model ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API model updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiModelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "API model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "api-models"
        ],
        "summary": "Delete an API model configuration",
        "operationId": "deleteApiModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "API model ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "API model deleted"
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "API model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/apps/request-access": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Request Resource Access",
        "description": "Requests access permissions for an application client to access this resource server's protected resources.",
        "operationId": "requestAccess",
        "requestBody": {
          "description": "Application client requesting access",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppAccessRequest"
              },
              "example": {
                "app_client_id": "my_app_client_123"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Access granted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppAccessResponse"
                },
                "example": {
                  "scope": "scope_resource_bodhi-server"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/auth/callback": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Complete OAuth Authentication",
        "description": "Completes the OAuth authentication flow by exchanging authorization code for tokens and establishing user session.",
        "operationId": "completeOAuthFlow",
        "requestBody": {
          "description": "OAuth callback parameters from authorization server",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthCallbackRequest"
              },
              "example": {
                "code": "auth_code_123",
                "state": "random_state_456"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuth flow completed successfully, user authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedirectResponse"
                },
                "example": {
                  "location": "https://app.example.com/dashboard"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "422": {
            "description": "OAuth error, invalid request parameters, or state mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "oauth_state_mismatch",
                    "message": "State parameter mismatch",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/auth/initiate": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Initiate OAuth Authentication",
        "description": "Initiates OAuth authentication flow. Returns OAuth authorization URL for unauthenticated users or home page URL for already authenticated users.",
        "operationId": "initiateOAuthFlow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "default": null
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User already authenticated, home page URL provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedirectResponse"
                },
                "example": {
                  "location": "https://app.example.com/dashboard"
                }
              }
            }
          },
          "201": {
            "description": "User not authenticated, OAuth authorization URL provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedirectResponse"
                },
                "example": {
                  "location": "https://auth.example.com/auth?client_id=bodhi&redirect_uri=..."
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/info": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get Application Information",
        "description": "Retrieves current application version and status information including setup state",
        "operationId": "getAppInfo",
        "responses": {
          "200": {
            "description": "Application information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfo"
                },
                "example": {
                  "status": "ready",
                  "version": "0.1.0"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout User",
        "description": "Logs out the current user by destroying their session and returns redirect URL to login page",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedirectResponse"
                },
                "example": {
                  "location": "https://app.example.com/login"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/modelfiles": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "List Local Model Files",
        "description": "Retrieves paginated list of GGUF model files available in the local HuggingFace cache directory with metadata including repository, filename, snapshot ID, and file size.",
        "operationId": "listModelFiles",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Local model files retrieved successfully from cache",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLocalModelResponse"
                },
                "example": {
                  "data": [
                    {
                      "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
                      "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                      "size": 4815162,
                      "snapshot_id": "ab12cd34"
                    }
                  ],
                  "page": 1,
                  "page_size": 10,
                  "total": 1
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/modelfiles/pull": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "List Model Download Requests",
        "description": "Retrieves paginated list of all model download requests with their current status, progress, and metadata. Includes both active downloads and completed/failed requests.",
        "operationId": "listDownloads",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model download requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDownloadResponse"
                },
                "example": {
                  "data": [
                    {
                      "created_at": "2024-01-15T10:30:00Z",
                      "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
                      "id": "download_123",
                      "progress": 45.5,
                      "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                      "status": "downloading",
                      "updated_at": "2024-01-15T10:35:00Z"
                    }
                  ],
                  "page": 1,
                  "page_size": 10,
                  "total": 1
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Start Model File Download",
        "description": "Initiates a new model file download from HuggingFace repository. Creates a download request that can be tracked for progress. Returns existing request if download is already in progress.",
        "operationId": "pullModelFile",
        "requestBody": {
          "description": "Model file download specification with repository and filename",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDownloadRequest"
              },
              "example": {
                "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Existing download request found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadRequest"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "error": null,
                  "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                  "status": "pending",
                  "updated_at": "2024-11-10T04:52:06.786Z"
                }
              }
            }
          },
          "201": {
            "description": "Download request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadRequest"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "error": null,
                  "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                  "status": "pending",
                  "updated_at": "2024-11-10T04:52:06.786Z"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/modelfiles/pull/{alias}": {
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Download Model by Alias",
        "description": "Initiates a model download using a predefined alias that maps to specific repository and file combinations. This provides a convenient way to download popular models without specifying exact repository details.",
        "operationId": "pullModelByAlias",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "Predefined model alias. Available aliases include popular models like llama2:chat, mistral:instruct, phi3:mini, etc. Use the /models endpoint to see all available aliases.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "llama2:chat"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing download request found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadRequest"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "error": null,
                  "filename": "llama-2-7b-chat.Q8_0.gguf",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                  "status": "pending",
                  "updated_at": "2024-11-10T04:52:06.786Z"
                }
              }
            }
          },
          "201": {
            "description": "Download request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadRequest"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "error": null,
                  "filename": "llama-2-7b-chat.Q8_0.gguf",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                  "status": "pending",
                  "updated_at": "2024-11-10T04:52:06.786Z"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Alias not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "remote_model_not_found_error",
                    "message": "remote model alias 'invalid:model' not found, check your alias and try again",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/modelfiles/pull/{id}": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "Get Download Request Status",
        "description": "Retrieves the current status and progress information for a specific model download request. Includes download progress, error details, and completion status.",
        "operationId": "getDownloadStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the download request (UUID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        ],
        "responses": {
          "200": {
            "description": "Download request found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadRequest"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "error": null,
                  "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                  "status": "completed",
                  "updated_at": "2024-01-20T12:00:10Z"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Download request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "item_not_found",
                    "message": "item '550e8400-e29b-41d4-a716-446655440000' of type 'download_requests' not found in db",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/models": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "List All Model Aliases",
        "description": "Retrieves paginated list of all configured model aliases including user-defined aliases, model aliases, and API provider aliases with filtering and sorting options.",
        "operationId": "listAllModels",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of model aliases retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAliasResponse"
                },
                "example": {
                  "data": [
                    {
                      "alias": "llama2:chat",
                      "context_params": [
                        "--ctx_size",
                        "4096"
                      ],
                      "filename": "llama-2-7b-chat.Q4_K_M.gguf",
                      "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                      "request_params": {
                        "temperature": 0.7,
                        "top_p": 0.95
                      },
                      "snapshot": "abc123",
                      "source": "user"
                    },
                    {
                      "alias": "TheBloke/Llama-2-7B-Chat-GGUF:Q4_K_M",
                      "filename": "llama-2-7b-chat.Q4_K_M.gguf",
                      "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                      "snapshot": "abc123",
                      "source": "model"
                    },
                    {
                      "api_format": "openai",
                      "base_url": "https://api.openai.com/v1",
                      "created_at": "2024-01-01T00:00:00Z",
                      "id": "openai-gpt4",
                      "models": [
                        "gpt-4",
                        "gpt-3.5-turbo"
                      ],
                      "source": "api",
                      "updated_at": "2024-01-01T00:00:00Z"
                    }
                  ],
                  "page": 1,
                  "page_size": 10,
                  "total": 3
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Create Alias",
        "operationId": "createAlias",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAliasRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Alias created succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAliasResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/models/{alias}": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "Get details for a specific model alias",
        "operationId": "getAlias",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "Alias identifier for the model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model alias details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAliasResponse"
                },
                "example": {
                  "alias": "llama2:chat",
                  "chat_template": "llama2",
                  "context_params": {
                    "n_keep": 24,
                    "stop": [
                      "<|end_of_turn|>"
                    ]
                  },
                  "filename": "llama-2-7b-chat.Q8_0.gguf",
                  "model_params": {},
                  "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                  "request_params": {
                    "frequency_penalty": 0.0,
                    "presence_penalty": 0.0,
                    "temperature": 0.7,
                    "top_p": 1.0
                  },
                  "snapshot": "sha256:abc123",
                  "source": "config"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Alias not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "alias_not_found",
                    "message": "Alias 'unknown:model' not found",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/models/{id}": {
      "put": {
        "tags": [
          "models"
        ],
        "summary": "Update Alias",
        "operationId": "updateAlias",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Alias identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "llama--3"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAliasRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Alias updated succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAliasResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "List Application Settings",
        "description": "Retrieves all configurable application settings with their current values, default values, sources, and metadata including validation constraints.",
        "operationId": "listSettings",
        "responses": {
          "200": {
            "description": "Application settings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingInfo"
                  }
                },
                "example": [
                  {
                    "current_value": "info",
                    "default_value": "warn",
                    "key": "BODHI_LOG_LEVEL",
                    "metadata": {
                      "options": [
                        "error",
                        "warn",
                        "info",
                        "debug",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "source": "environment"
                  },
                  {
                    "current_value": 1135,
                    "default_value": 1135,
                    "key": "BODHI_PORT",
                    "metadata": {
                      "max": 65535,
                      "min": 1025,
                      "type": "number"
                    },
                    "source": "default"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/settings/{key}": {
      "put": {
        "tags": [
          "settings"
        ],
        "summary": "Update Application Setting",
        "description": "Updates the value of a specific application setting. The new value is validated against the setting's constraints and persisted to the settings file.",
        "operationId": "updateSetting",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Setting key identifier (e.g., BODHI_LOG_LEVEL, BODHI_PORT)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "BODHI_LOG_LEVEL"
          }
        ],
        "requestBody": {
          "description": "New setting value",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request to update a setting value",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "description": "New value for the setting (type depends on setting metadata)"
                  }
                },
                "example": {
                  "value": "debug"
                }
              },
              "example": {
                "value": "debug"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Setting updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingInfo"
                },
                "example": {
                  "current_value": "debug",
                  "default_value": "warn",
                  "key": "BODHI_LOG_LEVEL",
                  "metadata": {
                    "options": [
                      "error",
                      "warn",
                      "info",
                      "debug",
                      "trace"
                    ],
                    "type": "option"
                  },
                  "source": "settings_file"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Setting not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "settings_error-invalid_setting",
                    "message": "Setting not found: INVALID_KEY",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "settings"
        ],
        "summary": "Reset Setting to Default",
        "description": "Resets a specific application setting to its default value by removing any custom overrides. Some critical settings like BODHI_HOME cannot be reset.",
        "operationId": "deleteSetting",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Setting key identifier to reset to default value",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "BODHI_LOG_LEVEL"
          }
        ],
        "responses": {
          "200": {
            "description": "Setting reset to default successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingInfo"
                },
                "example": {
                  "current_value": "warn",
                  "default_value": "warn",
                  "key": "BODHI_LOG_LEVEL",
                  "metadata": {
                    "options": [
                      "error",
                      "warn",
                      "info",
                      "debug",
                      "trace"
                    ],
                    "type": "option"
                  },
                  "source": "default"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Setting not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "settings_error-not_found",
                    "message": "Setting not found: INVALID_KEY",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/setup": {
      "post": {
        "tags": [
          "setup"
        ],
        "summary": "Setup Application",
        "description": "Initializes the application with authentication configuration and registers with the auth server",
        "operationId": "setupApp",
        "requestBody": {
          "description": "Application setup configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupRequest"
              },
              "example": {
                "description": "My personal AI server",
                "name": "My Bodhi Server"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Application setup completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupResponse"
                },
                "example": {
                  "status": "resource-admin"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/tokens": {
      "get": {
        "tags": [
          "api-keys"
        ],
        "summary": "List API Tokens",
        "description": "Retrieves paginated list of API tokens owned by the current user. Includes token metadata but not the actual token values for security.",
        "operationId": "listApiTokens",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of API tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApiTokenResponse"
                },
                "example": {
                  "data": [
                    {
                      "created_at": "2024-11-10T04:52:06.786Z",
                      "id": "550e8400-e29b-41d4-a716-446655440000",
                      "name": "Development Token",
                      "status": "active",
                      "token_id": "jwt-token-id-1",
                      "updated_at": "2024-11-10T04:52:06.786Z",
                      "user_id": "user@email.com"
                    },
                    {
                      "created_at": "2024-11-10T04:52:06.786Z",
                      "id": "660e8400-e29b-41d4-a716-446655440000",
                      "name": "Test Token",
                      "status": "inactive",
                      "token_id": "jwt-token-id-2",
                      "updated_at": "2024-11-10T04:52:06.786Z",
                      "user_id": "user@email.com"
                    }
                  ],
                  "page": 1,
                  "page_size": 10,
                  "total": 2
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "api-keys"
        ],
        "summary": "Create API Token",
        "description": "Creates a new API token for programmatic access to the API. The token can be used for bearer authentication in API requests. This feature is currently not available.",
        "operationId": "createApiToken",
        "requestBody": {
          "description": "API token creation parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiTokenRequest"
              },
              "example": {
                "name": "My Integration Token",
                "scopes": [
                  "scope_token_user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "API token created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTokenResponse"
                },
                "example": {
                  "offline_token": "bapp_1234567890abcdef"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/tokens/{id}": {
      "put": {
        "tags": [
          "api-keys"
        ],
        "summary": "Update API Token",
        "description": "Updates the name and status of an existing API token. Only the token owner can update their tokens. Token values cannot be changed after creation.",
        "operationId": "updateApiToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the API token to update",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        ],
        "requestBody": {
          "description": "Token update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiTokenRequest"
              },
              "example": {
                "name": "Updated Token Name",
                "status": "inactive"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiToken"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "name": "Updated Token Name",
                  "status": "inactive",
                  "token_id": "jwt-token-id-1",
                  "updated_at": "2024-11-10T04:52:06.786Z",
                  "user_id": "auth0|123456789"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Token not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "entity_error-not_found",
                    "message": "Token not found",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/user": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Current User Information",
        "description": "Retrieves information about the currently authenticated user including email, roles, token type, and authentication source.",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "Current user information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "example": {
                  "auth_status": "logged_in",
                  "role": "resource_admin",
                  "user_id": "550e8400-e29b-41d4-a716-446655440000",
                  "username": "user@example.com"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/user/request-access": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Request User Access",
        "description": "Authenticated users without roles can request access to the system. Only one pending request is allowed per user.",
        "operationId": "requestUserAccess",
        "responses": {
          "201": {
            "description": "Access request created successfully"
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "409": {
            "description": "Pending request already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "422": {
            "description": "User already has role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/user/request-status": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Access Request Status",
        "description": "Check the status of the current user's access request.",
        "operationId": "getUserAccessStatus",
        "responses": {
          "200": {
            "description": "Request status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccessStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/users": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "List users",
        "description": "List all users with roles and status information. Available to managers and admins.",
        "operationId": "listUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "example": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of users per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "role:manager",
              "role:admin"
            ]
          }
        ]
      }
    },
    "/bodhi/v1/users/{user_id}": {
      "delete": {
        "tags": [
          "auth"
        ],
        "summary": "Remove user access",
        "description": "Remove a user's access to the application. Only admins can remove users.",
        "operationId": "removeUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User removed successfully"
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "role:admin"
            ]
          }
        ]
      }
    },
    "/bodhi/v1/users/{user_id}/role": {
      "put": {
        "tags": [
          "auth"
        ],
        "summary": "Change user role",
        "description": "Assign a new role to a user. Admins can assign any role, managers can assign user/power_user/manager roles.",
        "operationId": "changeUserRole",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID to change role for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role changed successfully"
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "role:manager",
              "role:admin"
            ]
          }
        ]
      }
    },
    "/health": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Health Check",
        "description": "Comprehensive health check to verify all application components are operational",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "Application is healthy and fully operational",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                },
                "example": {
                  "message": "pong"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Ping Server",
        "description": "Simple connectivity check to verify the server is responding",
        "operationId": "pingServer",
        "responses": {
          "200": {
            "description": "Server is responding normally",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                },
                "example": {
                  "message": "pong"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chat/completions": {
      "post": {
        "tags": [
          "openai"
        ],
        "summary": "Create Chat Completion (OpenAI Compatible)",
        "description": "Creates a chat completion response using the specified model. Supports both streaming and non-streaming responses. Fully compatible with OpenAI's chat completions API format.",
        "operationId": "createChatCompletion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatCompletionRequest"
              },
              "example": {
                "max_tokens": 100,
                "messages": [
                  {
                    "content": "You are a helpful assistant.",
                    "role": "system"
                  },
                  {
                    "content": "Hello!",
                    "role": "user"
                  }
                ],
                "model": "llama2:chat",
                "stream": false,
                "temperature": 0.7
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Chat completion response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateChatCompletionResponse"
                },
                "example": {
                  "choices": [
                    {
                      "finish_reason": "stop",
                      "index": 0,
                      "message": {
                        "content": "Hello! How can I help you today?",
                        "role": "assistant"
                      }
                    }
                  ],
                  "created": 1677610602,
                  "id": "chatcmpl-123",
                  "model": "llama2:chat",
                  "object": "chat.completion",
                  "usage": {
                    "completion_tokens": 10,
                    "prompt_tokens": 20,
                    "total_tokens": 30
                  }
                }
              }
            }
          },
          "201": {
            "description": "Chat completion stream, the status is 200, using 201 to avoid OpenAPI format limitation.",
            "headers": {
              "Cache-Control": {
                "schema": {
                  "type": "string"
                },
                "description": "No-cache directive"
              }
            },
            "content": {
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/CreateChatCompletionStreamResponse"
                },
                "example": {
                  "choices": [
                    {
                      "delta": {
                        "content": "Hello"
                      },
                      "finish_reason": null,
                      "index": 0
                    }
                  ],
                  "created": 1694268190,
                  "id": "chatcmpl-123",
                  "model": "llama2:chat",
                  "object": "chat.completion.chunk"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/v1/embeddings": {
      "post": {
        "tags": [
          "openai"
        ],
        "summary": "Create Embeddings (OpenAI Compatible)",
        "description": "Creates embeddings for the input text using the specified model. Fully compatible with OpenAI's embeddings API format.",
        "operationId": "createEmbedding",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmbeddingRequest"
              },
              "example": {
                "input": "The quick brown fox jumps over the lazy dog",
                "model": "text-embedding-model"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Embedding response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmbeddingResponse"
                },
                "example": {
                  "data": [
                    {
                      "embedding": [
                        0.1,
                        0.2,
                        0.3
                      ],
                      "index": 0,
                      "object": "embedding"
                    }
                  ],
                  "model": "text-embedding-model",
                  "object": "list",
                  "usage": {
                    "prompt_tokens": 8,
                    "total_tokens": 8
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/v1/models": {
      "get": {
        "tags": [
          "openai"
        ],
        "summary": "List Available Models (OpenAI Compatible)",
        "description": "Returns a list of all available models in OpenAI API compatible format. Includes user aliases, model aliases, and API provider aliases that can be used with the chat completions endpoint.",
        "operationId": "listModels",
        "responses": {
          "200": {
            "description": "List of available models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListModelResponse"
                },
                "example": {
                  "data": [
                    {
                      "created": 1677610602,
                      "id": "llama2:chat",
                      "object": "model",
                      "owned_by": "bodhi"
                    },
                    {
                      "created": 1677610602,
                      "id": "mistral:instruct",
                      "object": "model",
                      "owned_by": "bodhi"
                    }
                  ],
                  "object": "list"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/v1/models/{id}": {
      "get": {
        "tags": [
          "openai"
        ],
        "summary": "Get Model Details (OpenAI Compatible)",
        "description": "Retrieves details for a specific model by ID in OpenAI API compatible format. The model ID can be a user alias, model alias, or API provider alias.",
        "operationId": "getModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model identifier - can be user alias (e.g., 'llama2:chat'), model alias, or API provider alias",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "llama2:chat"
          }
        ],
        "responses": {
          "200": {
            "description": "Model details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelResponse"
                },
                "example": {
                  "created": 1677610602,
                  "id": "llama2:chat",
                  "object": "model",
                  "owned_by": "system"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "model_not_found",
                    "message": "Model 'unknown:model' not found",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Alias": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserAlias",
                "description": "User-defined local model (source: \"user\")"
              },
              {
                "type": "object",
                "required": [
                  "source"
                ],
                "properties": {
                  "source": {
                    "type": "string",
                    "enum": [
                      "user"
                    ]
                  }
                }
              }
            ],
            "description": "User-defined local model (source: \"user\")"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelAlias",
                "description": "Auto-discovered local model (source: \"model\")"
              },
              {
                "type": "object",
                "required": [
                  "source"
                ],
                "properties": {
                  "source": {
                    "type": "string",
                    "enum": [
                      "model"
                    ]
                  }
                }
              }
            ],
            "description": "Auto-discovered local model (source: \"model\")"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAlias",
                "description": "Remote API model (source: \"api\")"
              },
              {
                "type": "object",
                "required": [
                  "source"
                ],
                "properties": {
                  "source": {
                    "type": "string",
                    "enum": [
                      "api"
                    ]
                  }
                }
              }
            ],
            "description": "Remote API model (source: \"api\")"
          }
        ],
        "description": "Flat enum representing all types of model aliases\nEach variant is identified by the source field"
      },
      "ApiAlias": {
        "type": "object",
        "required": [
          "id",
          "api_format",
          "base_url",
          "models",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "api_format": {
            "$ref": "#/components/schemas/ApiFormat"
          },
          "base_url": {
            "type": "string"
          },
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prefix": {
            "type": [
              "string",
              "null"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiFormat": {
        "type": "string",
        "description": "API format/protocol specification",
        "enum": [
          "openai",
          "placeholder"
        ]
      },
      "ApiFormatsResponse": {
        "type": "object",
        "description": "Response containing available API formats",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiFormat"
            }
          }
        },
        "example": {
          "data": [
            "openai"
          ]
        }
      },
      "ApiModelResponse": {
        "type": "object",
        "description": "Response containing API model configuration",
        "required": [
          "id",
          "api_format",
          "base_url",
          "api_key_masked",
          "models",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "api_format": {
            "$ref": "#/components/schemas/ApiFormat"
          },
          "base_url": {
            "type": "string"
          },
          "api_key_masked": {
            "type": "string"
          },
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prefix": {
            "type": [
              "string",
              "null"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "api_format": "openai",
          "api_key_masked": "sk-...abc123",
          "base_url": "https://api.openai.com/v1",
          "created_at": "2024-01-01T00:00:00Z",
          "id": "openai-gpt4",
          "models": [
            "gpt-4",
            "gpt-3.5-turbo"
          ],
          "prefix": "openai",
          "updated_at": "2024-01-01T00:00:00Z"
        }
      },
      "ApiToken": {
        "type": "object",
        "required": [
          "id",
          "user_id",
          "name",
          "token_id",
          "token_hash",
          "status",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          },
          "token_hash": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TokenStatus"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T04:52:06.786Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T04:52:06.786Z"
          }
        }
      },
      "ApiTokenResponse": {
        "type": "object",
        "required": [
          "offline_token"
        ],
        "properties": {
          "offline_token": {
            "type": "string",
            "description": "API token with bapp_ prefix for programmatic access",
            "example": "bapp_1234567890abcdef"
          }
        },
        "example": {
          "offline_token": "bapp_1234567890abcdef"
        }
      },
      "AppAccessRequest": {
        "type": "object",
        "required": [
          "app_client_id"
        ],
        "properties": {
          "app_client_id": {
            "type": "string"
          }
        }
      },
      "AppAccessResponse": {
        "type": "object",
        "required": [
          "scope"
        ],
        "properties": {
          "scope": {
            "type": "string"
          }
        }
      },
      "AppInfo": {
        "type": "object",
        "description": "Application information and status",
        "required": [
          "version",
          "status"
        ],
        "properties": {
          "version": {
            "type": "string",
            "description": "Application version number (semantic versioning)",
            "example": "0.1.0"
          },
          "status": {
            "$ref": "#/components/schemas/AppStatus",
            "description": "Current application setup and operational status"
          }
        },
        "example": {
          "status": "ready",
          "version": "0.1.0"
        }
      },
      "AppRole": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ResourceRole"
          },
          {
            "$ref": "#/components/schemas/TokenScope"
          },
          {
            "$ref": "#/components/schemas/UserScope"
          }
        ]
      },
      "AppStatus": {
        "type": "string",
        "enum": [
          "setup",
          "ready",
          "resource-admin"
        ],
        "example": "ready"
      },
      "ApproveUserAccessRequest": {
        "type": "object",
        "description": "Request body for approving access with role assignment",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "$ref": "#/components/schemas/ResourceRole",
            "description": "Role to assign to the user"
          }
        },
        "example": {
          "role": "resource_user"
        }
      },
      "AuthCallbackRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": [
              "string",
              "null"
            ],
            "description": "OAuth authorization code from successful authentication (required for success flow)",
            "example": "auth_code_123"
          },
          "state": {
            "type": [
              "string",
              "null"
            ],
            "description": "OAuth state parameter for CSRF protection (must match initiated request)",
            "example": "random_state_456"
          },
          "error": {
            "type": [
              "string",
              "null"
            ],
            "description": "OAuth error code if authentication failed (e.g., \"access_denied\")",
            "example": "access_denied"
          },
          "error_description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human-readable OAuth error description if authentication failed",
            "example": "The user denied the request"
          }
        },
        "additionalProperties": {
          "type": "string",
          "description": "Additional OAuth 2.1 parameters sent by the authorization server",
          "additionalProperties": true
        },
        "example": {
          "code": "auth_code_123",
          "state": "random_state_456"
        }
      },
      "ChangeRoleRequest": {
        "type": "object",
        "description": "Change user role request",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "type": "string",
            "description": "Role to assign to the user",
            "example": "resource_manager"
          }
        }
      },
      "ChatChoice": {
        "type": "object",
        "required": [
          "index",
          "message"
        ],
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the choice in the list of choices.",
            "minimum": 0
          },
          "message": {
            "$ref": "#/components/schemas/ChatCompletionResponseMessage"
          },
          "finish_reason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FinishReason",
                "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function."
              }
            ]
          },
          "logprobs": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ChatChoiceLogprobs",
                "description": "Log probability information for the choice."
              }
            ]
          }
        }
      },
      "ChatChoiceLogprobs": {
        "type": "object",
        "properties": {
          "content": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChatCompletionTokenLogprob"
            },
            "description": "A list of message content tokens with log probability information."
          },
          "refusal": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChatCompletionTokenLogprob"
            }
          }
        }
      },
      "ChatChoiceStream": {
        "type": "object",
        "required": [
          "index",
          "delta"
        ],
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the choice in the list of choices.",
            "minimum": 0
          },
          "delta": {
            "$ref": "#/components/schemas/ChatCompletionStreamResponseDelta"
          },
          "finish_reason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FinishReason",
                "description": "The reason the model stopped generating tokens. This will be\n`stop` if the model hit a natural stop point or a provided\nstop sequence,\n\n`length` if the maximum number of tokens specified in the\nrequest was reached,\n`content_filter` if content was omitted due to a flag from our\ncontent filters,\n`tool_calls` if the model called a tool, or `function_call`\n(deprecated) if the model called a function."
              }
            ]
          },
          "logprobs": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ChatChoiceLogprobs",
                "description": "Log probability information for the choice."
              }
            ]
          }
        }
      },
      "ChatCompletionAudio": {
        "type": "object",
        "required": [
          "voice",
          "format"
        ],
        "properties": {
          "voice": {
            "$ref": "#/components/schemas/ChatCompletionAudioVoice",
            "description": "The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive)."
          },
          "format": {
            "$ref": "#/components/schemas/ChatCompletionAudioFormat",
            "description": "Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`, `opus`, or `pcm16`."
          }
        }
      },
      "ChatCompletionAudioFormat": {
        "type": "string",
        "enum": [
          "wav",
          "mp3",
          "flac",
          "opus",
          "pcm16"
        ]
      },
      "ChatCompletionAudioVoice": {
        "type": "string",
        "enum": [
          "alloy",
          "ash",
          "ballad",
          "coral",
          "echo",
          "sage",
          "shimmer",
          "verse"
        ]
      },
      "ChatCompletionFunctionCall": {
        "oneOf": [
          {
            "type": "string",
            "description": "The model does not call a function, and responds to the end-user.",
            "enum": [
              "none"
            ]
          },
          {
            "type": "string",
            "description": "The model can pick between an end-user or calling a function.",
            "enum": [
              "auto"
            ]
          },
          {
            "type": "object",
            "description": "Forces the model to call the specified function.",
            "required": [
              "Function"
            ],
            "properties": {
              "Function": {
                "type": "object",
                "description": "Forces the model to call the specified function.",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "ChatCompletionFunctions": {
        "type": "object",
        "required": [
          "name",
          "parameters"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "parameters": {
            "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.\n\nOmitting `parameters` defines a function with an empty parameter list."
          }
        },
        "deprecated": true
      },
      "ChatCompletionMessageToolCall": {
        "type": "object",
        "required": [
          "id",
          "type",
          "function"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tool call."
          },
          "type": {
            "$ref": "#/components/schemas/ChatCompletionToolType",
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "$ref": "#/components/schemas/FunctionCall",
            "description": "The function that the model called."
          }
        }
      },
      "ChatCompletionMessageToolCallChunk": {
        "type": "object",
        "required": [
          "index"
        ],
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The ID of the tool call."
          },
          "type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionToolType",
                "description": "The type of the tool. Currently, only `function` is supported."
              }
            ]
          },
          "function": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FunctionCallStream"
              }
            ]
          }
        }
      },
      "ChatCompletionModalities": {
        "type": "string",
        "description": "Output types that you would like the model to generate for this request.\n\nMost models are capable of generating text, which is the default: `[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to [generate\naudio](https://platform.openai.com/docs/guides/audio). To request that this model generate both text and audio responses, you can use: `[\"text\", \"audio\"]`",
        "enum": [
          "text",
          "audio"
        ]
      },
      "ChatCompletionNamedToolChoice": {
        "type": "object",
        "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
        "required": [
          "type",
          "function"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ChatCompletionToolType",
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "$ref": "#/components/schemas/FunctionName"
          }
        }
      },
      "ChatCompletionRequestAssistantMessage": {
        "type": "object",
        "properties": {
          "content": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessageContent",
                "description": "The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."
              }
            ]
          },
          "refusal": {
            "type": [
              "string",
              "null"
            ],
            "description": "The refusal message by the assistant."
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          },
          "audio": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessageAudio",
                "description": "Data about a previous audio response from the model.\n[Learn more](https://platform.openai.com/docs/guides/audio)."
              }
            ]
          },
          "tool_calls": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChatCompletionMessageToolCall"
            }
          },
          "function_call": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FunctionCall",
                "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model."
              }
            ]
          }
        }
      },
      "ChatCompletionRequestAssistantMessageAudio": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for a previous audio response from the model."
          }
        }
      },
      "ChatCompletionRequestAssistantMessageContent": {
        "oneOf": [
          {
            "type": "string",
            "description": "The text contents of the message."
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessageContentPart"
            },
            "description": "An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`."
          }
        ]
      },
      "ChatCompletionRequestAssistantMessageContentPart": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "text"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartRefusal"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "refusal"
                    ]
                  }
                }
              }
            ]
          }
        ]
      },
      "ChatCompletionRequestDeveloperMessage": {
        "type": "object",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ChatCompletionRequestDeveloperMessageContent",
            "description": "The contents of the developer message."
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          }
        }
      },
      "ChatCompletionRequestDeveloperMessageContent": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
            }
          }
        ]
      },
      "ChatCompletionRequestFunctionMessage": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "content": {
            "type": [
              "string",
              "null"
            ],
            "description": "The return value from the function call, to return to the model."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        }
      },
      "ChatCompletionRequestMessage": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestDeveloperMessage"
              },
              {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "developer"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestSystemMessage"
              },
              {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "system"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestUserMessage"
              },
              {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "user"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessage"
              },
              {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "assistant"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestToolMessage"
              },
              {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "tool"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestFunctionMessage"
              },
              {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "function"
                    ]
                  }
                }
              }
            ]
          }
        ]
      },
      "ChatCompletionRequestMessageContentPartAudio": {
        "type": "object",
        "description": "Learn about [audio inputs](https://platform.openai.com/docs/guides/audio).",
        "required": [
          "input_audio"
        ],
        "properties": {
          "input_audio": {
            "$ref": "#/components/schemas/InputAudio"
          }
        }
      },
      "ChatCompletionRequestMessageContentPartImage": {
        "type": "object",
        "required": [
          "image_url"
        ],
        "properties": {
          "image_url": {
            "$ref": "#/components/schemas/ImageUrl"
          }
        }
      },
      "ChatCompletionRequestMessageContentPartRefusal": {
        "type": "object",
        "required": [
          "refusal"
        ],
        "properties": {
          "refusal": {
            "type": "string",
            "description": "The refusal message generated by the model."
          }
        }
      },
      "ChatCompletionRequestMessageContentPartText": {
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string"
          }
        }
      },
      "ChatCompletionRequestSystemMessage": {
        "type": "object",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ChatCompletionRequestSystemMessageContent",
            "description": "The contents of the system message."
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          }
        }
      },
      "ChatCompletionRequestSystemMessageContent": {
        "oneOf": [
          {
            "type": "string",
            "description": "The text contents of the system message."
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestSystemMessageContentPart"
            },
            "description": "An array of content parts with a defined type. For system messages, only type `text` is supported."
          }
        ]
      },
      "ChatCompletionRequestSystemMessageContentPart": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "text"
                    ]
                  }
                }
              }
            ]
          }
        ]
      },
      "ChatCompletionRequestToolMessage": {
        "type": "object",
        "description": "Tool message",
        "required": [
          "content",
          "tool_call_id"
        ],
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ChatCompletionRequestToolMessageContent",
            "description": "The contents of the tool message."
          },
          "tool_call_id": {
            "type": "string"
          }
        }
      },
      "ChatCompletionRequestToolMessageContent": {
        "oneOf": [
          {
            "type": "string",
            "description": "The text contents of the tool message."
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestToolMessageContentPart"
            },
            "description": "An array of content parts with a defined type. For tool messages, only type `text` is supported."
          }
        ]
      },
      "ChatCompletionRequestToolMessageContentPart": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "text"
                    ]
                  }
                }
              }
            ]
          }
        ]
      },
      "ChatCompletionRequestUserMessage": {
        "type": "object",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ChatCompletionRequestUserMessageContent",
            "description": "The contents of the user message."
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          }
        }
      },
      "ChatCompletionRequestUserMessageContent": {
        "oneOf": [
          {
            "type": "string",
            "description": "The text contents of the message."
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestUserMessageContentPart"
            },
            "description": "An array of content parts with a defined type. Supported options differ based on the [model](https://platform.openai.com/docs/models) being used to generate the response. Can contain text, image, or audio inputs."
          }
        ]
      },
      "ChatCompletionRequestUserMessageContentPart": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "text"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartImage"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "image_url"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartAudio"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "input_audio"
                    ]
                  }
                }
              }
            ]
          }
        ]
      },
      "ChatCompletionResponseMessage": {
        "type": "object",
        "description": "A chat completion message generated by the model.",
        "required": [
          "role"
        ],
        "properties": {
          "content": {
            "type": [
              "string",
              "null"
            ],
            "description": "The contents of the message."
          },
          "refusal": {
            "type": [
              "string",
              "null"
            ],
            "description": "The refusal message generated by the model."
          },
          "tool_calls": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChatCompletionMessageToolCall"
            },
            "description": "The tool calls generated by the model, such as function calls."
          },
          "role": {
            "$ref": "#/components/schemas/Role",
            "description": "The role of the author of this message."
          },
          "function_call": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FunctionCall",
                "description": "Deprecated and replaced by `tool_calls`.\nThe name and arguments of a function that should be called, as generated by the model."
              }
            ]
          },
          "audio": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionResponseMessageAudio",
                "description": "If the audio output modality is requested, this object contains data about the audio response from the model. [Learn more](https://platform.openai.com/docs/guides/audio)."
              }
            ]
          }
        }
      },
      "ChatCompletionResponseMessageAudio": {
        "type": "object",
        "required": [
          "id",
          "expires_at",
          "data",
          "transcript"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this audio response."
          },
          "expires_at": {
            "type": "integer",
            "format": "int32",
            "description": "The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations.",
            "minimum": 0
          },
          "data": {
            "type": "string",
            "description": "Base64 encoded audio bytes generated by the model, in the format specified in the request."
          },
          "transcript": {
            "type": "string",
            "description": "Transcript of the audio generated by the model."
          }
        }
      },
      "ChatCompletionStreamOptions": {
        "type": "object",
        "description": "Options for streaming response. Only set this when you set `stream: true`.",
        "required": [
          "include_usage"
        ],
        "properties": {
          "include_usage": {
            "type": "boolean",
            "description": "If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value."
          }
        }
      },
      "ChatCompletionStreamResponseDelta": {
        "type": "object",
        "description": "A chat completion delta generated by streamed model responses.",
        "properties": {
          "content": {
            "type": [
              "string",
              "null"
            ],
            "description": "The contents of the chunk message."
          },
          "function_call": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FunctionCallStream",
                "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model."
              }
            ]
          },
          "tool_calls": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChatCompletionMessageToolCallChunk"
            }
          },
          "role": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Role",
                "description": "The role of the author of this message."
              }
            ]
          },
          "refusal": {
            "type": [
              "string",
              "null"
            ],
            "description": "The refusal message generated by the model."
          }
        }
      },
      "ChatCompletionTokenLogprob": {
        "type": "object",
        "required": [
          "token",
          "logprob",
          "top_logprobs"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The token."
          },
          "logprob": {
            "type": "number",
            "format": "float",
            "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely."
          },
          "bytes": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token."
          },
          "top_logprobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopLogprobs"
            },
            "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned."
          }
        }
      },
      "ChatCompletionTool": {
        "type": "object",
        "required": [
          "type",
          "function"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ChatCompletionToolType"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionObject"
          }
        }
      },
      "ChatCompletionToolChoiceOption": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "none"
            ]
          },
          {
            "type": "string",
            "enum": [
              "auto"
            ]
          },
          {
            "type": "string",
            "enum": [
              "required"
            ]
          },
          {
            "type": "object",
            "required": [
              "named"
            ],
            "properties": {
              "named": {
                "$ref": "#/components/schemas/ChatCompletionNamedToolChoice"
              }
            }
          }
        ],
        "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present."
      },
      "ChatCompletionToolType": {
        "type": "string",
        "enum": [
          "function"
        ]
      },
      "ChatRequest": {
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "properties": {
          "model": {
            "type": "string"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "stream": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "format": {
            "type": [
              "string",
              "null"
            ]
          },
          "keep_alive": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          },
          "options": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Options"
              }
            ]
          }
        }
      },
      "CompletionTokensDetails": {
        "type": "object",
        "description": "Breakdown of tokens used in a completion.",
        "properties": {
          "accepted_prediction_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "audio_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Audio input tokens generated by the model.",
            "minimum": 0
          },
          "reasoning_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Tokens generated by the model for reasoning.",
            "minimum": 0
          },
          "rejected_prediction_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": " When using Predicted Outputs, the number of tokens in the\nprediction that did not appear in the completion. However, like\nreasoning tokens, these tokens are still counted in the total\ncompletion tokens for purposes of billing, output, and context\nwindow limits.",
            "minimum": 0
          }
        }
      },
      "CompletionUsage": {
        "type": "object",
        "description": "Usage statistics for the completion request.",
        "required": [
          "prompt_tokens",
          "completion_tokens",
          "total_tokens"
        ],
        "properties": {
          "prompt_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "Number of tokens in the prompt.",
            "minimum": 0
          },
          "completion_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "Number of tokens in the generated completion.",
            "minimum": 0
          },
          "total_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of tokens used in the request (prompt + completion).",
            "minimum": 0
          },
          "prompt_tokens_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PromptTokensDetails",
                "description": "Breakdown of tokens used in the prompt."
              }
            ]
          },
          "completion_tokens_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CompletionTokensDetails",
                "description": "Breakdown of tokens used in a completion."
              }
            ]
          }
        }
      },
      "CreateAliasRequest": {
        "type": "object",
        "required": [
          "alias",
          "repo",
          "filename"
        ],
        "properties": {
          "alias": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "snapshot": {
            "type": [
              "string",
              "null"
            ]
          },
          "request_params": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/OAIRequestParams"
              }
            ]
          },
          "context_params": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateApiModelRequest": {
        "type": "object",
        "description": "Request to create a new API model configuration",
        "required": [
          "api_format",
          "base_url",
          "api_key",
          "models"
        ],
        "properties": {
          "api_format": {
            "$ref": "#/components/schemas/ApiFormat",
            "description": "API format/protocol (e.g., \"openai\")"
          },
          "base_url": {
            "type": "string",
            "description": "API base URL"
          },
          "api_key": {
            "type": "string",
            "description": "API key for authentication"
          },
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of available models"
          },
          "prefix": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional prefix for model namespacing (e.g., \"azure/\" for \"azure/gpt-4\", \"openai:\" for \"openai:gpt-4\")"
          }
        },
        "example": {
          "api_format": "openai",
          "api_key": "sk-...",
          "base_url": "https://api.openai.com/v1",
          "models": [
            "gpt-4",
            "gpt-3.5-turbo"
          ],
          "prefix": "openai"
        }
      },
      "CreateApiTokenRequest": {
        "type": "object",
        "description": "Request to create a new API token",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Descriptive name for the API token (minimum 3 characters)",
            "example": "My Integration Token",
            "maxLength": 100,
            "minLength": 3
          }
        },
        "example": {
          "name": "My Integration Token"
        }
      },
      "CreateChatCompletionRequest": {
        "type": "object",
        "required": [
          "messages",
          "model"
        ],
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestMessage"
            },
            "description": "A list of messages comprising the conversation so far. Depending on the [model](https://platform.openai.com/docs/models) you use, different message types (modalities) are supported, like [text](https://platform.openai.com/docs/guides/text-generation), [images](https://platform.openai.com/docs/guides/vision), and [audio](https://platform.openai.com/docs/guides/audio)."
          },
          "model": {
            "type": "string",
            "description": "ID of the model to use.\nSee the [model endpoint compatibility](https://platform.openai.com/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API."
          },
          "store": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether or not to store the output of this chat completion request\n\nfor use in our [model distillation](https://platform.openai.com/docs/guides/distillation) or [evals](https://platform.openai.com/docs/guides/evals) products."
          },
          "reasoning_effort": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ReasoningEffort",
                "description": "**o1 models only**\n\nConstrains effort on reasoning for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\nCurrently supported values are `low`, `medium`, and `high`. Reducing\n\nreasoning effort can result in faster responses and fewer tokens\nused on reasoning in a response."
              }
            ]
          },
          "metadata": {
            "description": "Developer-defined tags and values used for filtering completions in the [dashboard](https://platform.openai.com/chat-completions)."
          },
          "frequency_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim."
          },
          "logit_bias": {
            "type": [
              "object",
              "null"
            ],
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100.\nMathematically, the bias is added to the logits generated by the model prior to sampling.\nThe exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection;\nvalues like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
            "additionalProperties": {},
            "propertyNames": {
              "type": "string"
            }
          },
          "logprobs": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`."
          },
          "top_logprobs": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
            "minimum": 0
          },
          "max_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "The maximum number of [tokens](https://platform.openai.com/tokenizer) that can be generated in the chat completion.\n\nThis value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.\nThis value is now deprecated in favor of `max_completion_tokens`, and is\nnot compatible with [o1 series models](https://platform.openai.com/docs/guides/reasoning).",
            "deprecated": true,
            "minimum": 0
          },
          "max_completion_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).",
            "minimum": 0
          },
          "n": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.",
            "minimum": 0
          },
          "modalities": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChatCompletionModalities"
            }
          },
          "prediction": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PredictionContent",
                "description": "Configuration for a [Predicted Output](https://platform.openai.com/docs/guides/predicted-outputs),which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content."
              }
            ]
          },
          "audio": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionAudio",
                "description": "Parameters for audio output. Required when audio output is requested with `modalities: [\"audio\"]`. [Learn more](https://platform.openai.com/docs/guides/audio)."
              }
            ]
          },
          "presence_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics."
          },
          "response_format": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ResponseFormat",
                "description": "An object specifying the format that the model must output. Compatible with [GPT-4o](https://platform.openai.com/docs/models/gpt-4o), [GPT-4o mini](https://platform.openai.com/docs/models/gpt-4o-mini), [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which guarantees the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length."
              }
            ]
          },
          "seed": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": " This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests\nwith the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend."
          },
          "service_tier": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ServiceTier",
                "description": "Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:\n- If set to 'auto', the system will utilize scale tier credits until they are exhausted.\n- If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\n- When not set, the default behavior is 'auto'.\n\nWhen this parameter is set, the response body will include the `service_tier` utilized."
              }
            ]
          },
          "stop": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Stop",
                "description": "Up to 4 sequences where the API will stop generating further tokens."
              }
            ]
          },
          "stream": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "If set, partial message deltas will be sent, like in ChatGPT.\nTokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\nas they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions)."
          },
          "stream_options": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionStreamOptions"
              }
            ]
          },
          "temperature": {
            "type": [
              "number",
              "null"
            ],
            "format": "float",
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,\nwhile lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both."
          },
          "top_p": {
            "type": [
              "number",
              "null"
            ],
            "format": "float",
            "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability mass.\nSo 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\n We generally recommend altering this or `temperature` but not both."
          },
          "tools": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChatCompletionTool"
            },
            "description": "A list of tools the model may call. Currently, only functions are supported as a tool.\nUse this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported."
          },
          "tool_choice": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionToolChoiceOption"
              }
            ]
          },
          "parallel_tool_calls": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling) during tool use."
          },
          "user": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids)."
          },
          "web_search_options": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/WebSearchOptions",
                "description": "This tool searches the web for relevant results to use in a response.\nLearn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat)."
              }
            ]
          },
          "function_call": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionFunctionCall",
                "description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n`none` means the model will not call a function and instead generates a message.\n`auto` means the model can pick between generating a message or calling a function.\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto` is the default if functions are present."
              }
            ]
          },
          "functions": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChatCompletionFunctions"
            },
            "description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.",
            "deprecated": true
          }
        }
      },
      "CreateChatCompletionResponse": {
        "type": "object",
        "description": "Represents a chat completion response returned by model, based on the provided input.",
        "required": [
          "id",
          "choices",
          "created",
          "model",
          "object"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChoice"
            },
            "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1."
          },
          "created": {
            "type": "integer",
            "format": "int32",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created.",
            "minimum": 0
          },
          "model": {
            "type": "string",
            "description": "The model used for the chat completion."
          },
          "service_tier": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ServiceTierResponse",
                "description": "The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request."
              }
            ]
          },
          "system_fingerprint": {
            "type": [
              "string",
              "null"
            ],
            "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always `chat.completion`."
          },
          "usage": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CompletionUsage"
              }
            ]
          }
        }
      },
      "CreateChatCompletionStreamResponse": {
        "type": "object",
        "description": "Represents a streamed chunk of a chat completion response returned by model, based on the provided input.",
        "required": [
          "id",
          "choices",
          "created",
          "model",
          "object"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion. Each chunk has the same ID."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChoiceStream"
            },
            "description": "A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the last chunk if you set `stream_options: {\"include_usage\": true}`."
          },
          "created": {
            "type": "integer",
            "format": "int32",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.",
            "minimum": 0
          },
          "model": {
            "type": "string",
            "description": "The model to generate the completion."
          },
          "service_tier": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ServiceTierResponse",
                "description": "The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request."
              }
            ]
          },
          "system_fingerprint": {
            "type": [
              "string",
              "null"
            ],
            "description": "This fingerprint represents the backend configuration that the model runs with.\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always `chat.completion.chunk`."
          },
          "usage": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CompletionUsage",
                "description": "An optional field that will only be present when you set `stream_options: {\"include_usage\": true}` in your request.\nWhen present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request."
              }
            ]
          }
        }
      },
      "CreateEmbeddingRequest": {
        "type": "object",
        "required": [
          "model",
          "input"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "ID of the model to use. You can use the\n[List models](https://platform.openai.com/docs/api-reference/models/list)\nAPI to see all of your available models, or see our\n[Model overview](https://platform.openai.com/docs/models/overview)\nfor descriptions of them."
          },
          "input": {
            "$ref": "#/components/schemas/EmbeddingInput",
            "description": "Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens."
          },
          "encoding_format": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/EncodingFormat",
                "description": "The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/). Defaults to float"
              }
            ]
          },
          "user": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique identifier representing your end-user, which will help OpenAI\n to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/usage-policies/end-user-ids)."
          },
          "dimensions": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.",
            "minimum": 0
          }
        }
      },
      "CreateEmbeddingResponse": {
        "type": "object",
        "required": [
          "object",
          "model",
          "data",
          "usage"
        ],
        "properties": {
          "object": {
            "type": "string"
          },
          "model": {
            "type": "string",
            "description": "The name of the model used to generate the embedding."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Embedding"
            },
            "description": "The list of embeddings generated by the model."
          },
          "usage": {
            "$ref": "#/components/schemas/EmbeddingUsage",
            "description": "The usage information for the request."
          }
        }
      },
      "DownloadRequest": {
        "type": "object",
        "required": [
          "id",
          "repo",
          "filename",
          "status",
          "created_at",
          "updated_at",
          "started_at"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/DownloadStatus"
          },
          "error": {
            "type": [
              "string",
              "null"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T04:52:06.786Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T04:52:06.786Z"
          },
          "total_bytes": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "downloaded_bytes": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T04:52:06.786Z"
          }
        }
      },
      "DownloadStatus": {
        "type": "string",
        "enum": [
          "pending",
          "completed",
          "error"
        ]
      },
      "Duration": {
        "type": "string"
      },
      "Embedding": {
        "type": "object",
        "description": "Represents an embedding vector returned by embedding endpoint.",
        "required": [
          "index",
          "object",
          "embedding"
        ],
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the embedding in the list of embeddings.",
            "minimum": 0
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"embedding\"."
          },
          "embedding": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The embedding vector, which is a list of floats. The length of vector\ndepends on the model as listed in the [embedding guide](https://platform.openai.com/docs/guides/embeddings)."
          }
        }
      },
      "EmbeddingInput": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          }
        ]
      },
      "EmbeddingUsage": {
        "type": "object",
        "required": [
          "prompt_tokens",
          "total_tokens"
        ],
        "properties": {
          "prompt_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "The number of tokens used by the prompt.",
            "minimum": 0
          },
          "total_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of tokens used by the request.",
            "minimum": 0
          }
        }
      },
      "EncodingFormat": {
        "type": "string",
        "enum": [
          "float",
          "base64"
        ]
      },
      "ErrorBody": {
        "type": "object",
        "required": [
          "message",
          "type"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Human-readable error message describing what went wrong",
            "example": "Validation failed: name is required"
          },
          "type": {
            "type": "string",
            "description": "Error type categorizing the kind of error that occurred",
            "example": "invalid_request_error"
          },
          "code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Specific error code for programmatic error handling",
            "example": "validation_error"
          },
          "param": {
            "type": [
              "string",
              "null"
            ],
            "description": "Parameter name that caused the error (for validation errors)",
            "example": "name"
          }
        },
        "example": {
          "code": "validation_error",
          "message": "Validation failed: name is required",
          "param": "name",
          "type": "invalid_request_error"
        }
      },
      "FetchModelsRequest": {
        "type": "object",
        "description": "Request to fetch available models from provider",
        "required": [
          "base_url"
        ],
        "properties": {
          "api_key": {
            "type": "string",
            "description": "API key for authentication (provide either api_key OR id, api_key takes preference if both provided)"
          },
          "id": {
            "type": "string",
            "description": "API model ID to look up stored credentials (provide either api_key OR id, api_key takes preference if both provided)"
          },
          "base_url": {
            "type": "string",
            "description": "API base URL (optional when using id)"
          }
        },
        "example": {
          "api_key": "sk-...",
          "base_url": "https://api.openai.com/v1"
        }
      },
      "FetchModelsResponse": {
        "type": "object",
        "description": "Response containing available models from provider",
        "required": [
          "models"
        ],
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "models": [
            "gpt-4",
            "gpt-3.5-turbo",
            "gpt-4-turbo"
          ]
        }
      },
      "FinishReason": {
        "type": "string",
        "enum": [
          "stop",
          "length",
          "tool_calls",
          "content_filter",
          "function_call"
        ]
      },
      "FunctionCall": {
        "type": "object",
        "description": "The name and arguments of a function that should be called, as generated by the model.",
        "required": [
          "name",
          "arguments"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          },
          "arguments": {
            "type": "string",
            "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
          }
        }
      },
      "FunctionCallStream": {
        "type": "object",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The name of the function to call."
          },
          "arguments": {
            "type": [
              "string",
              "null"
            ],
            "description": "The arguments to call the function with, as generated by the model in JSON format.\nNote that the model does not always generate valid JSON, and may hallucinate\nparameters not defined by your function schema. Validate the arguments in your\ncode before calling your function."
          }
        }
      },
      "FunctionName": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        }
      },
      "FunctionObject": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "parameters": {
            "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.\n\nOmitting `parameters` defines a function with an empty parameter list."
          },
          "strict": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling)."
          }
        }
      },
      "ImageDetail": {
        "type": "string",
        "enum": [
          "auto",
          "low",
          "high"
        ]
      },
      "ImageUrl": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "Either a URL of the image or the base64 encoded image data."
          },
          "detail": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ImageDetail",
                "description": "Specifies the detail level of the image. Learn more in the [Vision guide](https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding)."
              }
            ]
          }
        }
      },
      "InputAudio": {
        "type": "object",
        "required": [
          "data",
          "format"
        ],
        "properties": {
          "data": {
            "type": "string",
            "description": "Base64 encoded audio data."
          },
          "format": {
            "$ref": "#/components/schemas/InputAudioFormat",
            "description": "The format of the encoded audio data. Currently supports \"wav\" and \"mp3\"."
          }
        }
      },
      "InputAudioFormat": {
        "type": "string",
        "enum": [
          "wav",
          "mp3"
        ]
      },
      "ListModelResponse": {
        "type": "object",
        "required": [
          "object",
          "data"
        ],
        "properties": {
          "object": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Describes an OpenAI model offering that can be used with the API.",
              "required": [
                "id",
                "object",
                "created",
                "owned_by"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The model identifier, which can be referenced in the API endpoints."
                },
                "object": {
                  "type": "string",
                  "description": "The object type, which is always \"model\"."
                },
                "created": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The Unix timestamp (in seconds) when the model was created.",
                  "minimum": 0
                },
                "owned_by": {
                  "type": "string",
                  "description": "The organization that owns the model."
                }
              }
            }
          }
        }
      },
      "ListUsersParams": {
        "type": "object",
        "description": "List users query parameters",
        "properties": {
          "page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "example": 1,
            "minimum": 0
          },
          "page_size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "example": 10,
            "minimum": 0
          }
        }
      },
      "LocalModelResponse": {
        "type": "object",
        "required": [
          "repo",
          "filename",
          "snapshot",
          "model_params"
        ],
        "properties": {
          "repo": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "snapshot": {
            "type": "string"
          },
          "size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "model_params": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "type": "string"
            }
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "images": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Model": {
        "type": "object",
        "required": [
          "model",
          "modified_at",
          "size",
          "digest",
          "details"
        ],
        "properties": {
          "model": {
            "type": "string"
          },
          "modified_at": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "digest": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/ModelDetails"
          }
        }
      },
      "ModelAlias": {
        "type": "object",
        "required": [
          "alias",
          "repo",
          "filename",
          "snapshot"
        ],
        "properties": {
          "alias": {
            "type": "string"
          },
          "repo": {
            "type": "string",
            "format": "string"
          },
          "filename": {
            "type": "string"
          },
          "snapshot": {
            "type": "string"
          }
        }
      },
      "ModelDetails": {
        "type": "object",
        "required": [
          "format",
          "family",
          "parameter_size",
          "quantization_level"
        ],
        "properties": {
          "parent_model": {
            "type": [
              "string",
              "null"
            ]
          },
          "format": {
            "type": "string"
          },
          "family": {
            "type": "string"
          },
          "families": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "parameter_size": {
            "type": "string"
          },
          "quantization_level": {
            "type": "string"
          }
        }
      },
      "ModelResponse": {
        "type": "object",
        "description": "Describes an OpenAI model offering that can be used with the API.",
        "required": [
          "id",
          "object",
          "created",
          "owned_by"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The model identifier, which can be referenced in the API endpoints."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"model\"."
          },
          "created": {
            "type": "integer",
            "format": "int32",
            "description": "The Unix timestamp (in seconds) when the model was created.",
            "minimum": 0
          },
          "owned_by": {
            "type": "string",
            "description": "The organization that owns the model."
          }
        }
      },
      "ModelsResponse": {
        "type": "object",
        "required": [
          "models"
        ],
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Model"
            }
          }
        }
      },
      "NewDownloadRequest": {
        "type": "object",
        "description": "Request to pull a model file from HuggingFace",
        "required": [
          "repo",
          "filename"
        ],
        "properties": {
          "repo": {
            "type": "string",
            "description": "HuggingFace repository name in format 'username/repository-name'",
            "example": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
            "pattern": "^[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$"
          },
          "filename": {
            "type": "string",
            "description": "Model file name to download (typically .gguf format)",
            "example": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
            "pattern": ".*\\.(gguf|bin|safetensors)$"
          }
        },
        "example": {
          "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
          "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF"
        }
      },
      "OAIRequestParams": {
        "type": "object",
        "properties": {
          "frequency_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "max_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "presence_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "seed": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "stop": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "temperature": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "top_p": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "user": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "OllamaError": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "OpenAIApiError": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorBody",
            "description": "Error details following OpenAI API error format"
          }
        },
        "example": {
          "error": {
            "code": "validation_error",
            "message": "Validation failed: name is required",
            "param": "name",
            "type": "invalid_request_error"
          }
        }
      },
      "Options": {
        "type": "object",
        "properties": {
          "num_keep": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "seed": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "num_predict": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "top_k": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "top_p": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "tfs_z": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "typical_p": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "repeat_last_n": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "temperature": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "repeat_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "presence_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "frequency_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "mirostat": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "mirostat_tau": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "mirostat_eta": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "penalize_newline": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "stop": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "numa": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "num_ctx": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "num_batch": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "num_gpu": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "main_gpu": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "low_vram": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "f16_kv": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "logits_all": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "vocab_only": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "use_mmap": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "use_mlock": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "num_thread": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          }
        }
      },
      "PaginatedAliasResponse": {
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Alias"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginatedApiModelResponse": {
        "type": "object",
        "description": "Paginated response for API model listings",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiModelResponse"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginatedApiTokenResponse": {
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiToken"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginatedDownloadResponse": {
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownloadRequest"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginatedLocalModelResponse": {
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalModelResponse"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginatedUserAccessResponse": {
        "type": "object",
        "description": "Paginated response for access requests",
        "required": [
          "requests",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessRequest"
            },
            "description": "List of access requests"
          },
          "total": {
            "type": "integer",
            "description": "Total number of requests",
            "minimum": 0
          },
          "page": {
            "type": "integer",
            "description": "Current page number",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "description": "Number of items per page",
            "minimum": 0
          }
        },
        "example": {
          "page": 1,
          "page_size": 20,
          "requests": [
            {
              "created_at": "2024-01-01T12:00:00Z",
              "email": "user@example.com",
              "id": 1,
              "reviewer": null,
              "status": "pending",
              "updated_at": "2024-01-01T12:00:00Z"
            }
          ],
          "total": 1
        }
      },
      "PaginatedUserAliasResponse": {
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAliasResponse"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginationSortParams": {
        "type": "object",
        "description": "Query parameters for pagination and sorting",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Page number (1-based indexing)",
            "example": 1,
            "minimum": 1
          },
          "page_size": {
            "type": "integer",
            "description": "Number of items to return per page (maximum 100)",
            "example": 30,
            "maximum": 100,
            "minimum": 1
          },
          "sort": {
            "type": [
              "string",
              "null"
            ],
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "example": "updated_at"
          },
          "sort_order": {
            "type": "string",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "example": "desc",
            "pattern": "^(asc|desc)$"
          }
        }
      },
      "PingResponse": {
        "type": "object",
        "description": "Response to the ping endpoint",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Simple ping response message",
            "example": "pong"
          }
        },
        "example": {
          "message": "pong"
        }
      },
      "PredictionContent": {
        "oneOf": [
          {
            "type": "object",
            "description": "The type of the predicted content you want to provide. This type is\ncurrently always `content`.",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "content": {
                "$ref": "#/components/schemas/PredictionContentContent",
                "description": "The type of the predicted content you want to provide. This type is\ncurrently always `content`."
              },
              "type": {
                "type": "string",
                "enum": [
                  "content"
                ]
              }
            }
          }
        ],
        "description": "Static predicted output content, such as the content of a text file that is being regenerated."
      },
      "PredictionContentContent": {
        "oneOf": [
          {
            "type": "string",
            "description": "The content used for a Predicted Output. This is often the text of a file you are regenerating with minor changes."
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
            },
            "description": "An array of content parts with a defined type. Supported options differ based on the [model](https://platform.openai.com/docs/models) being used to generate the response. Can contain text inputs."
          }
        ],
        "description": "The content that should be matched when generating a model response. If generated tokens would match this content, the entire model response can be returned much more quickly."
      },
      "PromptTokensDetails": {
        "type": "object",
        "description": "Breakdown of tokens used in a completion.",
        "properties": {
          "audio_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Audio input tokens present in the prompt.",
            "minimum": 0
          },
          "cached_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Cached tokens present in the prompt.",
            "minimum": 0
          }
        }
      },
      "ReasoningEffort": {
        "type": "string",
        "enum": [
          "minimal",
          "low",
          "medium",
          "high"
        ]
      },
      "RedirectResponse": {
        "type": "object",
        "required": [
          "location"
        ],
        "properties": {
          "location": {
            "type": "string",
            "description": "The URL to redirect to (OAuth authorization URL or application home page)",
            "example": "https://oauth.example.com/auth?client_id=test&redirect_uri=..."
          }
        },
        "example": {
          "location": "https://oauth.example.com/auth?client_id=test&redirect_uri=..."
        }
      },
      "ResourceRole": {
        "type": "string",
        "enum": [
          "resource_user",
          "resource_power_user",
          "resource_manager",
          "resource_admin"
        ]
      },
      "ResponseFormat": {
        "oneOf": [
          {
            "type": "object",
            "description": "The type of response format being defined: `text`",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "text"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "The type of response format being defined: `json_object`",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "json_object"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "The type of response format being defined: `json_schema`",
            "required": [
              "json_schema",
              "type"
            ],
            "properties": {
              "json_schema": {
                "$ref": "#/components/schemas/ResponseFormatJsonSchema"
              },
              "type": {
                "type": "string",
                "enum": [
                  "json_schema"
                ]
              }
            }
          }
        ]
      },
      "ResponseFormatJsonSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description of what the response format is for, used by the model to determine how to respond in the format."
          },
          "name": {
            "type": "string",
            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "schema": {
            "description": "The schema for the response format, described as a JSON Schema object."
          },
          "strict": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs)."
          }
        }
      },
      "Role": {
        "type": "string",
        "enum": [
          "system",
          "user",
          "assistant",
          "tool",
          "function"
        ]
      },
      "ServiceTier": {
        "type": "string",
        "enum": [
          "auto",
          "default",
          "flex",
          "scale",
          "priority"
        ]
      },
      "ServiceTierResponse": {
        "type": "string",
        "enum": [
          "scale",
          "default",
          "flex",
          "priority"
        ]
      },
      "SettingInfo": {
        "type": "object",
        "required": [
          "key",
          "current_value",
          "default_value",
          "source",
          "metadata"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "current_value": {},
          "default_value": {},
          "source": {
            "$ref": "#/components/schemas/SettingSource"
          },
          "metadata": {
            "$ref": "#/components/schemas/SettingMetadata"
          }
        }
      },
      "SettingMetadata": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "string"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "min",
              "max",
              "type"
            ],
            "properties": {
              "min": {
                "type": "integer",
                "format": "int64"
              },
              "max": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "number"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "boolean"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "options",
              "type"
            ],
            "properties": {
              "options": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "option"
                ]
              }
            }
          }
        ]
      },
      "SettingSource": {
        "type": "string",
        "enum": [
          "system",
          "command_line",
          "environment",
          "settings_file",
          "default"
        ]
      },
      "SetupRequest": {
        "type": "object",
        "description": "Request to setup the application in authenticated mode",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Server name for identification (minimum 10 characters)",
            "example": "My Bodhi Server",
            "maxLength": 100,
            "minLength": 10
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional description of the server's purpose",
            "example": "My personal AI server",
            "maxLength": 500
          }
        },
        "example": {
          "description": "My personal AI server",
          "name": "My Bodhi Server"
        }
      },
      "SetupResponse": {
        "type": "object",
        "description": "Response containing the updated application status after setup",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AppStatus",
            "description": "New application status after successful setup"
          }
        },
        "example": {
          "status": "resource-admin"
        }
      },
      "ShowRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ShowResponse": {
        "type": "object",
        "required": [
          "details",
          "license",
          "model_info",
          "modelfile",
          "modified_at",
          "parameters",
          "template"
        ],
        "properties": {
          "details": {
            "$ref": "#/components/schemas/ModelDetails"
          },
          "license": {
            "type": "string"
          },
          "model_info": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "type": "string"
            }
          },
          "modelfile": {
            "type": "string"
          },
          "modified_at": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "parameters": {
            "type": "string"
          },
          "template": {
            "type": "string"
          }
        }
      },
      "Stop": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ]
      },
      "TestPromptRequest": {
        "type": "object",
        "description": "Request to test API connectivity with a prompt",
        "required": [
          "base_url",
          "model",
          "prompt"
        ],
        "properties": {
          "api_key": {
            "type": "string",
            "description": "API key for authentication (provide either api_key OR id, api_key takes preference if both provided)"
          },
          "id": {
            "type": "string",
            "description": "API model ID to look up stored credentials (provide either api_key OR id, api_key takes preference if both provided)"
          },
          "base_url": {
            "type": "string",
            "description": "API base URL (optional when using id)"
          },
          "model": {
            "type": "string",
            "description": "Model to use for testing"
          },
          "prompt": {
            "type": "string",
            "description": "Test prompt (max 30 characters for cost control)"
          }
        },
        "example": {
          "api_key": "sk-...",
          "base_url": "https://api.openai.com/v1",
          "model": "gpt-4",
          "prompt": "Hello, how are you?"
        }
      },
      "TestPromptResponse": {
        "type": "object",
        "description": "Response from testing API connectivity",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          },
          "response": {
            "type": [
              "string",
              "null"
            ]
          },
          "error": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "example": {
          "error": null,
          "response": "Hello! I'm doing well, thank you.",
          "success": true
        }
      },
      "TokenScope": {
        "type": "string",
        "enum": [
          "scope_token_user",
          "scope_token_power_user",
          "scope_token_manager",
          "scope_token_admin"
        ]
      },
      "TokenStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive"
        ]
      },
      "TopLogprobs": {
        "type": "object",
        "required": [
          "token",
          "logprob"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The token."
          },
          "logprob": {
            "type": "number",
            "format": "float",
            "description": "The log probability of this token."
          },
          "bytes": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token."
          }
        }
      },
      "UpdateAliasRequest": {
        "type": "object",
        "required": [
          "repo",
          "filename"
        ],
        "properties": {
          "repo": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "snapshot": {
            "type": [
              "string",
              "null"
            ]
          },
          "request_params": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/OAIRequestParams"
              }
            ]
          },
          "context_params": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateApiModelRequest": {
        "type": "object",
        "description": "Request to update an existing API model configuration",
        "required": [
          "api_format",
          "base_url",
          "models"
        ],
        "properties": {
          "api_format": {
            "$ref": "#/components/schemas/ApiFormat",
            "description": "API format/protocol (required)"
          },
          "base_url": {
            "type": "string",
            "description": "API base URL (required)"
          },
          "api_key": {
            "type": [
              "string",
              "null"
            ],
            "description": "API key for authentication (optional, only update if provided for security)"
          },
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of available models (required)"
          },
          "prefix": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional prefix for model namespacing"
          }
        },
        "example": {
          "api_format": "openai",
          "api_key": "sk-new-key",
          "base_url": "https://api.openai.com/v1",
          "models": [
            "gpt-4-turbo",
            "gpt-3.5-turbo"
          ],
          "prefix": "openai"
        }
      },
      "UpdateApiTokenRequest": {
        "type": "object",
        "description": "Request to update an existing API token",
        "required": [
          "name",
          "status"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "New descriptive name for the token (minimum 3 characters)",
            "example": "Updated Token Name",
            "maxLength": 100,
            "minLength": 3
          },
          "status": {
            "$ref": "#/components/schemas/TokenStatus",
            "description": "New status for the token (active/inactive)"
          }
        },
        "example": {
          "name": "Updated Token Name",
          "status": "inactive"
        }
      },
      "UpdateSettingRequest": {
        "type": "object",
        "description": "Request to update a setting value",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "description": "New value for the setting (type depends on setting metadata)"
          }
        },
        "example": {
          "value": "debug"
        }
      },
      "UserAccessRequest": {
        "type": "object",
        "required": [
          "id",
          "username",
          "user_id",
          "status",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the request"
          },
          "username": {
            "type": "string",
            "description": "Username of the requesting user"
          },
          "user_id": {
            "type": "string",
            "description": "User ID (UUID) of the requesting user"
          },
          "reviewer": {
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/UserAccessRequestStatus",
            "description": "Current status of the request"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "UserAccessRequestStatus": {
        "type": "string",
        "enum": [
          "pending",
          "approved",
          "rejected"
        ]
      },
      "UserAccessStatusResponse": {
        "type": "object",
        "description": "Response for checking access request status",
        "required": [
          "username",
          "status",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of the requesting user"
          },
          "status": {
            "$ref": "#/components/schemas/UserAccessRequestStatus",
            "description": "Current status of the request (pending, approved, rejected)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        },
        "example": {
          "created_at": "2024-01-01T12:00:00Z",
          "status": "pending"
        }
      },
      "UserAlias": {
        "type": "object",
        "required": [
          "alias",
          "repo",
          "filename",
          "snapshot"
        ],
        "properties": {
          "alias": {
            "type": "string"
          },
          "repo": {
            "type": "string",
            "format": "string"
          },
          "filename": {
            "type": "string"
          },
          "snapshot": {
            "type": "string"
          },
          "request_params": {
            "$ref": "#/components/schemas/OAIRequestParams"
          },
          "context_params": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserAliasResponse": {
        "type": "object",
        "required": [
          "alias",
          "repo",
          "filename",
          "snapshot",
          "source",
          "model_params",
          "request_params",
          "context_params"
        ],
        "properties": {
          "alias": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "snapshot": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "model_params": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "type": "string"
            }
          },
          "request_params": {
            "$ref": "#/components/schemas/OAIRequestParams"
          },
          "context_params": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "required": [
          "user_id",
          "username"
        ],
        "properties": {
          "user_id": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "username": {
            "type": "string",
            "example": "user@example.com"
          },
          "first_name": {
            "type": [
              "string",
              "null"
            ],
            "example": "John"
          },
          "last_name": {
            "type": [
              "string",
              "null"
            ],
            "example": "Doe"
          },
          "role": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AppRole"
              }
            ]
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "required": [
          "client_id",
          "users",
          "page",
          "page_size",
          "total_pages",
          "total_users",
          "has_next",
          "has_previous"
        ],
        "properties": {
          "client_id": {
            "type": "string",
            "example": "resource-abc123def456"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInfo"
            }
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "minimum": 0
          },
          "total_pages": {
            "type": "integer",
            "format": "int32",
            "example": 5,
            "minimum": 0
          },
          "total_users": {
            "type": "integer",
            "format": "int32",
            "example": 45,
            "minimum": 0
          },
          "has_next": {
            "type": "boolean",
            "example": true
          },
          "has_previous": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "UserResponse": {
        "oneOf": [
          {
            "type": "object",
            "description": "User is not authenticated",
            "required": [
              "auth_status"
            ],
            "properties": {
              "auth_status": {
                "type": "string",
                "enum": [
                  "logged_out"
                ]
              }
            }
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserInfo",
                "description": "User is authenticated with details"
              },
              {
                "type": "object",
                "required": [
                  "auth_status"
                ],
                "properties": {
                  "auth_status": {
                    "type": "string",
                    "enum": [
                      "logged_in"
                    ]
                  }
                }
              }
            ],
            "description": "User is authenticated with details"
          }
        ],
        "description": "User authentication response with discriminated union",
        "example": {
          "auth_status": "logged_in",
          "role": "resource_user",
          "user_id": "550e8400-e29b-41d4-a716-446655440000",
          "username": "user@example.com"
        }
      },
      "UserScope": {
        "type": "string",
        "enum": [
          "scope_user_user",
          "scope_user_power_user",
          "scope_user_manager",
          "scope_user_admin"
        ]
      },
      "WebSearchContextSize": {
        "type": "string",
        "description": "The amount of context window space to use for the search.",
        "enum": [
          "low",
          "medium",
          "high"
        ]
      },
      "WebSearchLocation": {
        "type": "object",
        "description": "Approximate location parameters for the search.",
        "properties": {
          "country": {
            "type": [
              "string",
              "null"
            ],
            "description": "The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user, e.g. `US`."
          },
          "region": {
            "type": [
              "string",
              "null"
            ],
            "description": "Free text input for the region of the user, e.g. `California`."
          },
          "city": {
            "type": [
              "string",
              "null"
            ],
            "description": "Free text input for the city of the user, e.g. `San Francisco`."
          },
          "timezone": {
            "type": [
              "string",
              "null"
            ],
            "description": "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the user, e.g. `America/Los_Angeles`."
          }
        }
      },
      "WebSearchOptions": {
        "type": "object",
        "description": "Options for the web search tool.",
        "properties": {
          "search_context_size": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/WebSearchContextSize",
                "description": "High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default."
              }
            ]
          },
          "user_location": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/WebSearchUserLocation",
                "description": "Approximate location parameters for the search."
              }
            ]
          }
        }
      },
      "WebSearchUserLocation": {
        "type": "object",
        "required": [
          "type",
          "approximate"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/WebSearchUserLocationType"
          },
          "approximate": {
            "$ref": "#/components/schemas/WebSearchLocation"
          }
        }
      },
      "WebSearchUserLocationType": {
        "type": "string",
        "enum": [
          "approximate"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "system",
      "description": "System information and operations"
    },
    {
      "name": "setup",
      "description": "Application setup and initialization"
    },
    {
      "name": "auth",
      "description": "Authentication and session management"
    },
    {
      "name": "api-keys",
      "description": "API keys management"
    },
    {
      "name": "api-models",
      "description": "Remote AI API model configuration"
    },
    {
      "name": "models",
      "description": "Model files and aliases"
    },
    {
      "name": "settings",
      "description": "Application settings management"
    },
    {
      "name": "openai",
      "description": "OpenAI-compatible API endpoints"
    },
    {
      "name": "ollama",
      "description": "Ollama-compatible API endpoints"
    }
  ],
  "externalDocs": {
    "url": "https://getbodhi.app/docs/api",
    "description": "Find more info here"
  }
}