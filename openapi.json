{
  "openapi": "3.1.0",
  "info": {
    "title": "Bodhi App APIs",
    "description": "API documentation for Bodhi App.\n\n## Authentication\nThis API supports two authentication methods:\n\n1. **Browser Session** (Default)\n   - Login via `/bodhi/v1/auth/initiate` endpoint\n   - Session cookie will be used automatically\n   - Best for browser-based access\n\n2. **API Token**\n   - Create API Token using the app Menu > Settings > API Tokens\n   - Use the API Token as the Authorization Bearer token in API calls\n   - Best for programmatic access\n\n## Authorization\nAPIs require different privilege levels:\n\n- **User Level**: Requires `resource_user` role or `scope_token_user`\n- **Power User Level**: Requires `resource_power_user` role or `scope_token_power_user`\n\nFor API keys, specify required scope when creating the token.\n",
    "contact": {
      "name": "Bodhi API Support",
      "url": "https://github.com/BodhiSearch/BodhiApp/issues",
      "email": "support@getbodhi.app"
    },
    "license": {
      "name": ""
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "http://localhost:1135",
      "description": "Local running instance"
    }
  ],
  "paths": {
    "/api/chat": {
      "post": {
        "tags": [
          "ollama"
        ],
        "summary": "Chat with Model (Ollama Compatible)",
        "description": "Creates a chat completion using Ollama API format. Supports both streaming and non-streaming responses with Ollama-specific options and response format.",
        "operationId": "chatOllamaModel",
        "requestBody": {
          "description": "Chat request in Ollama format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              },
              "example": {
                "messages": [
                  {
                    "content": "You are a helpful assistant.",
                    "role": "system"
                  },
                  {
                    "content": "Hello!",
                    "role": "user"
                  }
                ],
                "model": "llama2:chat",
                "options": {
                  "num_predict": 100,
                  "temperature": 0.7
                },
                "stream": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Chat response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "created_at": "2024-01-20T12:00:00.000000000Z",
                  "done": true,
                  "done_reason": "stop",
                  "eval_count": 10,
                  "eval_duration": "-1",
                  "load_duration": "-1",
                  "message": {
                    "content": "Hello! How can I help you today?",
                    "images": null,
                    "role": "assistant"
                  },
                  "model": "llama2:chat",
                  "prompt_eval_count": 20,
                  "prompt_eval_duration": "-1",
                  "total_duration": 0.0
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OllamaError"
                },
                "example": {
                  "error": "invalid request parameters"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OllamaError"
                },
                "example": {
                  "error": "model not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OllamaError"
                },
                "example": {
                  "error": "chat completion error: failed to process request"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/show": {
      "post": {
        "tags": [
          "ollama"
        ],
        "summary": "Show Model Details (Ollama Compatible)",
        "description": "Retrieves detailed information about a specific model in Ollama API compatible format. Includes model parameters, template, license, and configuration details.",
        "operationId": "showOllamaModel",
        "requestBody": {
          "description": "Model name to get details for",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShowRequest"
              },
              "example": {
                "name": "llama2:chat"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Model details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShowResponse"
                },
                "example": {
                  "details": {
                    "families": null,
                    "family": "unknown",
                    "format": "gguf",
                    "parameter_size": "",
                    "parent_model": null,
                    "quantization_level": ""
                  },
                  "license": "",
                  "model_info": {},
                  "modelfile": "",
                  "modified_at": "2024-01-20T12:00:00.000000000Z",
                  "parameters": "n_keep: 24\nstop:\n- <|start_header_id|>\n- <|end_header_id|>\n- <|eot_id|>\n",
                  "template": "llama2"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OllamaError"
                },
                "example": {
                  "error": "model not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OllamaError"
                },
                "example": {
                  "error": "Failed to get model details"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/tags": {
      "get": {
        "tags": [
          "ollama"
        ],
        "summary": "List Available Models (Ollama Compatible)",
        "description": "Returns a list of all available models in Ollama API compatible format. Includes model metadata such as size, modification time, and format details.",
        "operationId": "listOllamaModels",
        "responses": {
          "200": {
            "description": "List of available models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsResponse"
                },
                "example": {
                  "models": [
                    {
                      "details": {
                        "families": null,
                        "family": "unknown",
                        "format": "gguf",
                        "parameter_size": "",
                        "parent_model": null,
                        "quantization_level": ""
                      },
                      "digest": "sha256:abc123",
                      "model": "llama2:chat",
                      "modified_at": "2024-01-20T12:00:00.000000000Z",
                      "size": 0
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OllamaError"
                },
                "example": {
                  "error": "Failed to list models"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/api-models": {
      "get": {
        "tags": [
          "api-models"
        ],
        "summary": "List API Model Configurations",
        "description": "Retrieves paginated list of all configured API model aliases including external API formats like OpenAI, etc. API keys are masked in list view for security.",
        "operationId": "listApiModels",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API model configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApiModelResponse"
                },
                "example": {
                  "data": [
                    {
                      "api_format": "openai",
                      "api_key": "sk-****",
                      "base_url": "https://api.openai.com/v1",
                      "id": "openai-gpt4"
                    }
                  ],
                  "page": 1,
                  "page_size": 10,
                  "total": 1
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during API model retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "database_error",
                    "message": "Database connection failed",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "api-models"
        ],
        "summary": "Create a new API model configuration",
        "operationId": "createApiModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "API model created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiModelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "409": {
            "description": "Alias already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/api-models/api-formats": {
      "get": {
        "tags": [
          "api-models"
        ],
        "summary": "Get Available API Formats",
        "description": "Retrieves list of supported API formats/protocols (e.g., OpenAI).",
        "operationId": "getApiFormats",
        "responses": {
          "200": {
            "description": "API formats retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFormatsResponse"
                },
                "example": {
                  "data": [
                    "openai"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during API format retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "service_error",
                    "message": "Service unavailable",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/api-models/fetch-models": {
      "post": {
        "tags": [
          "api-models"
        ],
        "summary": "Fetch available models from the API",
        "operationId": "fetchApiModels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchModelsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Available models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchModelsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/api-models/test": {
      "post": {
        "tags": [
          "api-models"
        ],
        "summary": "Test API connectivity with a prompt",
        "operationId": "testApiModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestPromptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Test result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestPromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/api-models/{alias}": {
      "put": {
        "tags": [
          "api-models"
        ],
        "summary": "Update an existing API model configuration",
        "operationId": "updateApiModel",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "API model alias",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API model updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiModelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "404": {
            "description": "API model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "api-models"
        ],
        "summary": "Delete an API model configuration",
        "operationId": "deleteApiModel",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "API model alias",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "API model deleted"
          },
          "404": {
            "description": "API model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/api-models/{id}": {
      "get": {
        "tags": [
          "api-models"
        ],
        "summary": "Get API Model Configuration",
        "description": "Retrieves detailed configuration for a specific API model alias by ID. API keys are masked for security unless explicitly requested.",
        "operationId": "getApiModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the API model alias",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "openai-gpt4"
          }
        ],
        "responses": {
          "200": {
            "description": "API model configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiModelResponse"
                },
                "example": {
                  "api_format": "openai",
                  "api_key": "sk-****",
                  "base_url": "https://api.openai.com/v1",
                  "id": "openai-gpt4",
                  "model": "gpt-4"
                }
              }
            }
          },
          "404": {
            "description": "API model with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "entity_not_found",
                    "message": "API model 'invalid-model' not found",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during model retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "database_error",
                    "message": "Database query failed",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          },
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/auth/callback": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Complete OAuth Authentication",
        "description": "Completes the OAuth authentication flow by exchanging authorization code for tokens and establishing user session.",
        "operationId": "completeOAuthFlow",
        "requestBody": {
          "description": "OAuth callback parameters from authorization server",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthCallbackRequest"
              },
              "example": {
                "code": "auth_code_123",
                "state": "random_state_456"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuth flow completed successfully, user authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedirectResponse"
                },
                "example": {
                  "location": "https://app.example.com/dashboard"
                }
              }
            }
          },
          "422": {
            "description": "OAuth error, invalid request parameters, or state mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "oauth_state_mismatch",
                    "message": "State parameter mismatch",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during token exchange",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "oauth_token_exchange_error",
                    "message": "Failed to exchange authorization code for tokens",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/auth/initiate": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Initiate OAuth Authentication",
        "description": "Initiates OAuth authentication flow. Returns OAuth authorization URL for unauthenticated users or home page URL for already authenticated users.",
        "operationId": "initiateOAuthFlow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "default": null
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User already authenticated, home page URL provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedirectResponse"
                },
                "example": {
                  "location": "https://app.example.com/dashboard"
                }
              }
            }
          },
          "201": {
            "description": "User not authenticated, OAuth authorization URL provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedirectResponse"
                },
                "example": {
                  "location": "https://auth.example.com/auth?client_id=bodhi&redirect_uri=..."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during OAuth initialization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "app_reg_info_missing",
                    "message": "Application not registered with auth server",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/auth/request-access": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Request Resource Access",
        "description": "Requests access permissions for an application client to access this resource server's protected resources.",
        "operationId": "requestAccess",
        "requestBody": {
          "description": "Application client requesting access",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestAccessRequest"
              },
              "example": {
                "app_client_id": "my_app_client_123"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Access granted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestAccessResponse"
                },
                "example": {
                  "scope": "scope_resource_bodhi-server"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request, application not registered, or incorrect app status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "app_reg_info_not_found",
                    "message": "Application registration information not found",
                    "type": "invalid_app_state"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during access request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "auth_service_error",
                    "message": "Failed to communicate with authorization server",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/info": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get Application Information",
        "description": "Retrieves current application version and status information including setup state",
        "operationId": "getAppInfo",
        "responses": {
          "200": {
            "description": "Application information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfo"
                },
                "example": {
                  "status": "ready",
                  "version": "0.1.0"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "system_error",
                    "message": "Failed to retrieve application status",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout User",
        "description": "Logs out the current user by destroying their session and returns redirect URL to login page",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedirectResponse"
                },
                "example": {
                  "location": "https://app.example.com/login"
                }
              }
            }
          },
          "500": {
            "description": "Session deletion failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "session_delete_error",
                    "message": "Failed to delete user session",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/modelfiles": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "List Local Model Files",
        "description": "Retrieves paginated list of GGUF model files available in the local HuggingFace cache directory with metadata including repository, filename, snapshot ID, and file size.",
        "operationId": "listModelFiles",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Local model files retrieved successfully from cache",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLocalModelResponse"
                },
                "example": {
                  "data": [
                    {
                      "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
                      "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                      "size": 4815162,
                      "snapshot_id": "ab12cd34"
                    }
                  ],
                  "page": 1,
                  "page_size": 10,
                  "total": 1
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/modelfiles/pull": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "List Model Download Requests",
        "description": "Retrieves paginated list of all model download requests with their current status, progress, and metadata. Includes both active downloads and completed/failed requests.",
        "operationId": "listDownloads",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model download requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDownloadResponse"
                },
                "example": {
                  "data": [
                    {
                      "created_at": "2024-01-15T10:30:00Z",
                      "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
                      "id": "download_123",
                      "progress": 45.5,
                      "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                      "status": "downloading",
                      "updated_at": "2024-01-15T10:35:00Z"
                    }
                  ],
                  "page": 1,
                  "page_size": 10,
                  "total": 1
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during download list retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "database_error",
                    "message": "Database connection failed",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Start Model File Download",
        "description": "Initiates a new model file download from HuggingFace repository. Creates a download request that can be tracked for progress. Returns existing request if download is already in progress.",
        "operationId": "pullModelFile",
        "requestBody": {
          "description": "Model file download specification with repository and filename",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDownloadRequest"
              },
              "example": {
                "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Existing download request found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadRequest"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "error": null,
                  "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                  "status": "pending",
                  "updated_at": "2024-11-10T04:52:06.786Z"
                }
              }
            }
          },
          "201": {
            "description": "Download request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadRequest"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "error": null,
                  "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                  "status": "pending",
                  "updated_at": "2024-11-10T04:52:06.786Z"
                }
              }
            }
          },
          "400": {
            "description": "File already exists or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "pull_error-file_already_exists",
                    "message": "file 'mistral-7b-instruct-v0.1.Q8_0.gguf' already exists in repo 'TheBloke/Mistral-7B-Instruct-v0.1-GGUF' with snapshot 'main'",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "internal_error",
                    "message": "Internal server error occurred",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/modelfiles/pull/{alias}": {
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Download Model by Alias",
        "description": "Initiates a model download using a predefined alias that maps to specific repository and file combinations. This provides a convenient way to download popular models without specifying exact repository details.",
        "operationId": "pullModelByAlias",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "Predefined model alias. Available aliases include popular models like llama2:chat, mistral:instruct, phi3:mini, etc. Use the /models endpoint to see all available aliases.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "llama2:chat"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing download request found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadRequest"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "error": null,
                  "filename": "llama-2-7b-chat.Q8_0.gguf",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                  "status": "pending",
                  "updated_at": "2024-11-10T04:52:06.786Z"
                }
              }
            }
          },
          "201": {
            "description": "Download request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadRequest"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "error": null,
                  "filename": "llama-2-7b-chat.Q8_0.gguf",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                  "status": "pending",
                  "updated_at": "2024-11-10T04:52:06.786Z"
                }
              }
            }
          },
          "400": {
            "description": "File already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "pull_error-file_already_exists",
                    "message": "file 'llama-2-7b-chat.Q8_0.gguf' already exists in repo 'TheBloke/Llama-2-7B-Chat-GGUF' with snapshot 'main'",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Alias not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "remote_model_not_found_error",
                    "message": "remote model alias 'invalid:model' not found, check your alias and try again",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "internal_error",
                    "message": "Internal server error occurred",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/modelfiles/pull/{id}": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "Get Download Request Status",
        "description": "Retrieves the current status and progress information for a specific model download request. Includes download progress, error details, and completion status.",
        "operationId": "getDownloadStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the download request (UUID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        ],
        "responses": {
          "200": {
            "description": "Download request found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadRequest"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "error": null,
                  "filename": "mistral-7b-instruct-v0.1.Q8_0.gguf",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                  "status": "completed",
                  "updated_at": "2024-01-20T12:00:10Z"
                }
              }
            }
          },
          "404": {
            "description": "Download request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "item_not_found",
                    "message": "item '550e8400-e29b-41d4-a716-446655440000' of type 'download_requests' not found in db",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "internal_error",
                    "message": "Internal server error occurred",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/models": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "List All Model Aliases",
        "description": "Retrieves paginated list of all configured model aliases including user-defined aliases, model aliases, and API provider aliases with filtering and sorting options.",
        "operationId": "listAllModels",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of model aliases retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAliasResponse"
                },
                "example": {
                  "data": [
                    {
                      "alias": "llama2:chat",
                      "context_params": [
                        "--ctx_size",
                        "4096"
                      ],
                      "filename": "llama-2-7b-chat.Q4_K_M.gguf",
                      "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                      "request_params": {
                        "temperature": 0.7,
                        "top_p": 0.95
                      },
                      "snapshot": "abc123",
                      "source": "user"
                    },
                    {
                      "alias": "TheBloke/Llama-2-7B-Chat-GGUF:Q4_K_M",
                      "filename": "llama-2-7b-chat.Q4_K_M.gguf",
                      "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                      "snapshot": "abc123",
                      "source": "model"
                    },
                    {
                      "api_format": "openai",
                      "base_url": "https://api.openai.com/v1",
                      "created_at": "2024-01-01T00:00:00Z",
                      "id": "openai-gpt4",
                      "models": [
                        "gpt-4",
                        "gpt-3.5-turbo"
                      ],
                      "source": "api",
                      "updated_at": "2024-01-01T00:00:00Z"
                    }
                  ],
                  "page": 1,
                  "page_size": 10,
                  "total": 3
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Create Alias",
        "operationId": "createAlias",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAliasRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Alias created succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAliasResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/models/{alias}": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "Get details for a specific model alias",
        "operationId": "getAlias",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "Alias identifier for the model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model alias details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAliasResponse"
                },
                "example": {
                  "alias": "llama2:chat",
                  "chat_template": "llama2",
                  "context_params": {
                    "n_keep": 24,
                    "stop": [
                      "<|end_of_turn|>"
                    ]
                  },
                  "filename": "llama-2-7b-chat.Q8_0.gguf",
                  "model_params": {},
                  "repo": "TheBloke/Llama-2-7B-Chat-GGUF",
                  "request_params": {
                    "frequency_penalty": 0.0,
                    "presence_penalty": 0.0,
                    "temperature": 0.7,
                    "top_p": 1.0
                  },
                  "snapshot": "sha256:abc123",
                  "source": "config"
                }
              }
            }
          },
          "404": {
            "description": "Alias not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "alias_not_found",
                    "message": "Alias 'unknown:model' not found",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/models/{id}": {
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Update Alias",
        "operationId": "updateAlias",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Alias identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "llama--3"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAliasRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Alias created succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAliasResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "List Application Settings",
        "description": "Retrieves all configurable application settings with their current values, default values, sources, and metadata including validation constraints.",
        "operationId": "listSettings",
        "responses": {
          "200": {
            "description": "Application settings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingInfo"
                  }
                },
                "example": [
                  {
                    "current_value": "info",
                    "default_value": "warn",
                    "key": "BODHI_LOG_LEVEL",
                    "metadata": {
                      "options": [
                        "error",
                        "warn",
                        "info",
                        "debug",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "source": "environment"
                  },
                  {
                    "current_value": 1135,
                    "default_value": 1135,
                    "key": "BODHI_PORT",
                    "metadata": {
                      "max": 65535,
                      "min": 1025,
                      "type": "number"
                    },
                    "source": "default"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "settings_error-unauthorized",
                    "message": "Only administrators can view settings",
                    "type": "unauthorized_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/settings/{key}": {
      "put": {
        "tags": [
          "settings"
        ],
        "summary": "Update Application Setting",
        "description": "Updates the value of a specific application setting. The new value is validated against the setting's constraints and persisted to the settings file.",
        "operationId": "updateSetting",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Setting key identifier (e.g., BODHI_LOG_LEVEL, BODHI_PORT)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "BODHI_LOG_LEVEL"
          }
        ],
        "requestBody": {
          "description": "New setting value",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request to update a setting value",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "description": "New value for the setting (type depends on setting metadata)"
                  }
                },
                "example": {
                  "value": "debug"
                }
              },
              "example": {
                "value": "debug"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Setting updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingInfo"
                },
                "example": {
                  "current_value": "debug",
                  "default_value": "warn",
                  "key": "BODHI_LOG_LEVEL",
                  "metadata": {
                    "options": [
                      "error",
                      "warn",
                      "info",
                      "debug",
                      "trace"
                    ],
                    "type": "option"
                  },
                  "source": "settings_file"
                }
              }
            }
          },
          "400": {
            "description": "Invalid setting or value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "settings_error-validation_error",
                    "message": "Invalid value for setting: value out of range",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Setting not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "settings_error-invalid_setting",
                    "message": "Setting not found: INVALID_KEY",
                    "type": "not_found_error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "settings"
        ],
        "summary": "Reset Setting to Default",
        "description": "Resets a specific application setting to its default value by removing any custom overrides. Some critical settings like BODHI_HOME cannot be reset.",
        "operationId": "deleteSetting",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Setting key identifier to reset to default value",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "BODHI_LOG_LEVEL"
          }
        ],
        "responses": {
          "200": {
            "description": "Setting reset to default successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingInfo"
                },
                "example": {
                  "current_value": "warn",
                  "default_value": "warn",
                  "key": "BODHI_LOG_LEVEL",
                  "metadata": {
                    "options": [
                      "error",
                      "warn",
                      "info",
                      "debug",
                      "trace"
                    ],
                    "type": "option"
                  },
                  "source": "default"
                }
              }
            }
          },
          "404": {
            "description": "Setting not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "settings_error-not_found",
                    "message": "Setting not found: INVALID_KEY",
                    "type": "not_found_error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/setup": {
      "post": {
        "tags": [
          "setup"
        ],
        "summary": "Setup Application",
        "description": "Initializes the application with authentication configuration and registers with the auth server",
        "operationId": "setupApp",
        "requestBody": {
          "description": "Application setup configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupRequest"
              },
              "example": {
                "description": "My personal AI server",
                "name": "My Bodhi Server"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Application setup completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupResponse"
                },
                "example": {
                  "status": "resource-admin"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or application already setup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "validation_error",
                    "message": "Server name must be at least 10 characters long",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during setup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "auth_service_error",
                    "message": "Failed to register with auth server",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bodhi/v1/tokens": {
      "get": {
        "tags": [
          "api-keys"
        ],
        "summary": "List API Tokens",
        "description": "Retrieves paginated list of API tokens owned by the current user. Includes token metadata but not the actual token values for security.",
        "operationId": "listApiTokens",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based indexing)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items to return per page (maximum 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of API tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApiTokenResponse"
                },
                "example": {
                  "data": [
                    {
                      "created_at": "2024-11-10T04:52:06.786Z",
                      "id": "550e8400-e29b-41d4-a716-446655440000",
                      "name": "Development Token",
                      "status": "active",
                      "token_id": "jwt-token-id-1",
                      "updated_at": "2024-11-10T04:52:06.786Z",
                      "user_id": "user@email.com"
                    },
                    {
                      "created_at": "2024-11-10T04:52:06.786Z",
                      "id": "660e8400-e29b-41d4-a716-446655440000",
                      "name": "Test Token",
                      "status": "inactive",
                      "token_id": "jwt-token-id-2",
                      "updated_at": "2024-11-10T04:52:06.786Z",
                      "user_id": "user@email.com"
                    }
                  ],
                  "page": 1,
                  "page_size": 10,
                  "total": 2
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Token missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "api_token_error-token_missing",
                    "message": "access token is not present in request",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "internal_error",
                    "message": "Internal server error occurred",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "api-keys"
        ],
        "summary": "Create API Token",
        "description": "Creates a new API token for programmatic access to the API. The token can be used for bearer authentication in API requests. This feature is currently not available.",
        "operationId": "createApiToken",
        "requestBody": {
          "description": "API token creation parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiTokenRequest"
              },
              "example": {
                "name": "My Integration Token",
                "scopes": [
                  "scope_token_user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "API token created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTokenResponse"
                },
                "example": {
                  "offline_token": "bapp_1234567890abcdef"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters or token name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "validation_error",
                    "message": "Token name must be at least 3 characters long",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during token creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "token_generation_error",
                    "message": "Failed to generate secure token",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/tokens/{id}": {
      "put": {
        "tags": [
          "api-keys"
        ],
        "summary": "Update API Token",
        "description": "Updates the name and status of an existing API token. Only the token owner can update their tokens. Token values cannot be changed after creation.",
        "operationId": "updateApiToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the API token to update",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        ],
        "requestBody": {
          "description": "Token update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiTokenRequest"
              },
              "example": {
                "name": "Updated Token Name",
                "status": "inactive"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiToken"
                },
                "example": {
                  "created_at": "2024-11-10T04:52:06.786Z",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "name": "Updated Token Name",
                  "status": "inactive",
                  "token_id": "jwt-token-id-1",
                  "updated_at": "2024-11-10T04:52:06.786Z",
                  "user_id": "auth0|123456789"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Token missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "api_token_error-token_missing",
                    "message": "access token is not present in request",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Token not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "entity_error-not_found",
                    "message": "Token not found",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "internal_error",
                    "message": "Internal server error occurred",
                    "type": "internal_server_error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/bodhi/v1/user": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Current User Information",
        "description": "Retrieves information about the currently authenticated user including email, roles, token type, and authentication source.",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "Current user information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                },
                "example": {
                  "email": "user@example.com",
                  "logged_in": true,
                  "role": "admin",
                  "role_source": "role",
                  "token_type": "bearer"
                }
              }
            }
          },
          "500": {
            "description": "Authentication error or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "token_error-invalid_token",
                    "message": "token is invalid",
                    "type": "authentication_error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Health Check",
        "description": "Comprehensive health check to verify all application components are operational",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "Application is healthy and fully operational",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                },
                "example": {
                  "message": "pong"
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Ping Server",
        "description": "Simple connectivity check to verify the server is responding",
        "operationId": "pingServer",
        "responses": {
          "200": {
            "description": "Server is responding normally",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                },
                "example": {
                  "message": "pong"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chat/completions": {
      "post": {
        "tags": [
          "openai"
        ],
        "summary": "Create Chat Completion (OpenAI Compatible)",
        "description": "Creates a chat completion response using the specified model. Supports both streaming and non-streaming responses. Fully compatible with OpenAI's chat completions API format.",
        "operationId": "createChatCompletion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {},
              "example": {
                "max_tokens": 100,
                "messages": [
                  {
                    "content": "You are a helpful assistant.",
                    "role": "system"
                  },
                  {
                    "content": "Hello!",
                    "role": "user"
                  }
                ],
                "model": "llama2:chat",
                "stream": false,
                "temperature": 0.7
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Chat completion response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "choices": [
                    {
                      "finish_reason": "stop",
                      "index": 0,
                      "message": {
                        "content": "Hello! How can I help you today?",
                        "role": "assistant"
                      }
                    }
                  ],
                  "created": 1677610602,
                  "id": "chatcmpl-123",
                  "model": "llama2:chat",
                  "object": "chat.completion",
                  "usage": {
                    "completion_tokens": 10,
                    "prompt_tokens": 20,
                    "total_tokens": 30
                  }
                }
              }
            }
          },
          "201": {
            "description": "Chat completion stream, the status is 200, using 201 to avoid OpenAPI format limitation.",
            "headers": {
              "Cache-Control": {
                "schema": {
                  "type": "string"
                },
                "description": "No-cache directive"
              }
            },
            "content": {
              "text/event-stream": {
                "schema": {},
                "example": {
                  "choices": [
                    {
                      "delta": {
                        "content": "Hello"
                      },
                      "finish_reason": null,
                      "index": 0
                    }
                  ],
                  "created": 1694268190,
                  "id": "chatcmpl-123",
                  "model": "llama2:chat",
                  "object": "chat.completion.chunk"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "model_not_found",
                    "message": "Invalid model specified",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "invalid_api_key",
                    "message": "Invalid authentication token",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/v1/models": {
      "get": {
        "tags": [
          "openai"
        ],
        "summary": "List Available Models (OpenAI Compatible)",
        "description": "Returns a list of all available models in OpenAI API compatible format. Includes user aliases, model aliases, and API provider aliases that can be used with the chat completions endpoint.",
        "operationId": "listModels",
        "responses": {
          "200": {
            "description": "List of available models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListModelResponse"
                },
                "example": {
                  "data": [
                    {
                      "created": 1677610602,
                      "id": "llama2:chat",
                      "object": "model",
                      "owned_by": "bodhi"
                    },
                    {
                      "created": 1677610602,
                      "id": "mistral:instruct",
                      "object": "model",
                      "owned_by": "bodhi"
                    }
                  ],
                  "object": "list"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "invalid_api_key",
                    "message": "Invalid authentication token",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/v1/models/{id}": {
      "get": {
        "tags": [
          "openai"
        ],
        "summary": "Get Model Details (OpenAI Compatible)",
        "description": "Retrieves details for a specific model by ID in OpenAI API compatible format. The model ID can be a user alias, model alias, or API provider alias.",
        "operationId": "getModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model identifier - can be user alias (e.g., 'llama2:chat'), model alias, or API provider alias",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "llama2:chat"
          }
        ],
        "responses": {
          "200": {
            "description": "Model details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelResponse"
                },
                "example": {
                  "created": 1677610602,
                  "id": "llama2:chat",
                  "object": "model",
                  "owned_by": "system"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "invalid_api_key",
                    "message": "Invalid authentication token",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                },
                "example": {
                  "error": {
                    "code": "model_not_found",
                    "message": "Model 'unknown:model' not found",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Alias": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserAlias",
                "description": "User-defined local model (source: \"user\")"
              },
              {
                "type": "object",
                "required": [
                  "source"
                ],
                "properties": {
                  "source": {
                    "type": "string",
                    "enum": [
                      "user"
                    ]
                  }
                }
              }
            ],
            "description": "User-defined local model (source: \"user\")"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelAlias",
                "description": "Auto-discovered local model (source: \"model\")"
              },
              {
                "type": "object",
                "required": [
                  "source"
                ],
                "properties": {
                  "source": {
                    "type": "string",
                    "enum": [
                      "model"
                    ]
                  }
                }
              }
            ],
            "description": "Auto-discovered local model (source: \"model\")"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAlias",
                "description": "Remote API model (source: \"api\")"
              },
              {
                "type": "object",
                "required": [
                  "source"
                ],
                "properties": {
                  "source": {
                    "type": "string",
                    "enum": [
                      "api"
                    ]
                  }
                }
              }
            ],
            "description": "Remote API model (source: \"api\")"
          }
        ],
        "description": "Flat enum representing all types of model aliases\nEach variant is identified by the source field"
      },
      "ApiAlias": {
        "type": "object",
        "required": [
          "id",
          "api_format",
          "base_url",
          "models",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "api_format": {
            "$ref": "#/components/schemas/ApiFormat"
          },
          "base_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prefix": {
            "type": [
              "string",
              "null"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiFormat": {
        "type": "string",
        "description": "API format/protocol specification",
        "enum": [
          "openai",
          "placeholder"
        ]
      },
      "ApiFormatsResponse": {
        "type": "object",
        "description": "Response containing available API formats",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiFormat"
            }
          }
        },
        "example": {
          "data": [
            "openai"
          ]
        }
      },
      "ApiModelResponse": {
        "type": "object",
        "description": "Response containing API model configuration",
        "required": [
          "id",
          "api_format",
          "base_url",
          "api_key_masked",
          "models",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "api_format": {
            "$ref": "#/components/schemas/ApiFormat"
          },
          "api_key_masked": {
            "type": "string"
          },
          "base_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prefix": {
            "type": [
              "string",
              "null"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "api_format": "openai",
          "api_key_masked": "sk-...abc123",
          "base_url": "https://api.openai.com/v1",
          "created_at": "2024-01-01T00:00:00Z",
          "id": "openai-gpt4",
          "models": [
            "gpt-4",
            "gpt-3.5-turbo"
          ],
          "prefix": "openai",
          "updated_at": "2024-01-01T00:00:00Z"
        }
      },
      "ApiToken": {
        "type": "object",
        "required": [
          "id",
          "user_id",
          "name",
          "token_id",
          "token_hash",
          "status",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T04:52:06.786Z"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TokenStatus"
          },
          "token_hash": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T04:52:06.786Z"
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "ApiTokenResponse": {
        "type": "object",
        "required": [
          "offline_token"
        ],
        "properties": {
          "offline_token": {
            "type": "string",
            "description": "API token with bapp_ prefix for programmatic access",
            "example": "bapp_1234567890abcdef"
          }
        },
        "example": {
          "offline_token": "bapp_1234567890abcdef"
        }
      },
      "AppInfo": {
        "type": "object",
        "description": "Application information and status",
        "required": [
          "version",
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AppStatus",
            "description": "Current application setup and operational status"
          },
          "version": {
            "type": "string",
            "description": "Application version number (semantic versioning)",
            "example": "0.1.0"
          }
        },
        "example": {
          "status": "ready",
          "version": "0.1.0"
        }
      },
      "AppStatus": {
        "type": "string",
        "enum": [
          "setup",
          "ready",
          "resource-admin"
        ],
        "example": "ready"
      },
      "AuthCallbackRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": [
              "string",
              "null"
            ],
            "description": "OAuth authorization code from successful authentication (required for success flow)",
            "example": "auth_code_123"
          },
          "error": {
            "type": [
              "string",
              "null"
            ],
            "description": "OAuth error code if authentication failed (e.g., \"access_denied\")",
            "example": "access_denied"
          },
          "error_description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human-readable OAuth error description if authentication failed",
            "example": "The user denied the request"
          },
          "state": {
            "type": [
              "string",
              "null"
            ],
            "description": "OAuth state parameter for CSRF protection (must match initiated request)",
            "example": "random_state_456"
          }
        },
        "additionalProperties": {
          "type": "string",
          "description": "Additional OAuth 2.1 parameters sent by the authorization server",
          "additionalProperties": true
        },
        "example": {
          "code": "auth_code_123",
          "state": "random_state_456"
        }
      },
      "ChatRequest": {
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "properties": {
          "format": {
            "type": [
              "string",
              "null"
            ]
          },
          "keep_alive": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "model": {
            "type": "string"
          },
          "options": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Options"
              }
            ]
          },
          "stream": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "CreateAliasRequest": {
        "type": "object",
        "required": [
          "alias",
          "repo",
          "filename"
        ],
        "properties": {
          "alias": {
            "type": "string"
          },
          "context_params": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "filename": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "request_params": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/OAIRequestParams"
              }
            ]
          },
          "snapshot": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "CreateApiModelRequest": {
        "type": "object",
        "description": "Request to create a new API model configuration",
        "required": [
          "id",
          "api_format",
          "base_url",
          "api_key",
          "models"
        ],
        "properties": {
          "api_format": {
            "$ref": "#/components/schemas/ApiFormat",
            "description": "API format/protocol (e.g., \"openai\")"
          },
          "api_key": {
            "type": "string",
            "description": "API key for authentication"
          },
          "base_url": {
            "type": "string",
            "description": "API base URL"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for this API configuration"
          },
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of available models"
          },
          "prefix": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional prefix for model namespacing (e.g., \"azure/\" for \"azure/gpt-4\", \"openai:\" for \"openai:gpt-4\")"
          }
        },
        "example": {
          "api_format": "openai",
          "api_key": "sk-...",
          "base_url": "https://api.openai.com/v1",
          "id": "openai-gpt4",
          "models": [
            "gpt-4",
            "gpt-3.5-turbo"
          ],
          "prefix": "openai"
        }
      },
      "CreateApiTokenRequest": {
        "type": "object",
        "description": "Request to create a new API token",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Descriptive name for the API token (minimum 3 characters)",
            "example": "My Integration Token",
            "maxLength": 100,
            "minLength": 3
          }
        },
        "example": {
          "name": "My Integration Token"
        }
      },
      "DownloadRequest": {
        "type": "object",
        "required": [
          "id",
          "repo",
          "filename",
          "status",
          "created_at",
          "updated_at",
          "started_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T04:52:06.786Z"
          },
          "downloaded_bytes": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "error": {
            "type": [
              "string",
              "null"
            ]
          },
          "filename": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T04:52:06.786Z"
          },
          "status": {
            "$ref": "#/components/schemas/DownloadStatus"
          },
          "total_bytes": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T04:52:06.786Z"
          }
        }
      },
      "DownloadStatus": {
        "type": "string",
        "enum": [
          "pending",
          "completed",
          "error"
        ]
      },
      "Duration": {
        "type": "string"
      },
      "ErrorBody": {
        "type": "object",
        "required": [
          "message",
          "type"
        ],
        "properties": {
          "code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Specific error code for programmatic error handling",
            "example": "validation_error"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message describing what went wrong",
            "example": "Validation failed: name is required"
          },
          "param": {
            "type": [
              "string",
              "null"
            ],
            "description": "Parameter name that caused the error (for validation errors)",
            "example": "name"
          },
          "type": {
            "type": "string",
            "description": "Error type categorizing the kind of error that occurred",
            "example": "invalid_request_error"
          }
        },
        "example": {
          "code": "validation_error",
          "message": "Validation failed: name is required",
          "param": "name",
          "type": "invalid_request_error"
        }
      },
      "FetchModelsRequest": {
        "type": "object",
        "description": "Request to fetch available models from provider",
        "required": [
          "base_url"
        ],
        "properties": {
          "api_key": {
            "type": "string",
            "description": "API key for authentication (provide either api_key OR id, api_key takes preference if both provided)"
          },
          "base_url": {
            "type": "string",
            "description": "API base URL (optional when using id)"
          },
          "id": {
            "type": "string",
            "description": "API model ID to look up stored credentials (provide either api_key OR id, api_key takes preference if both provided)"
          }
        },
        "example": {
          "api_key": "sk-...",
          "base_url": "https://api.openai.com/v1"
        }
      },
      "FetchModelsResponse": {
        "type": "object",
        "description": "Response containing available models from provider",
        "required": [
          "models"
        ],
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "models": [
            "gpt-4",
            "gpt-3.5-turbo",
            "gpt-4-turbo"
          ]
        }
      },
      "ListModelResponse": {
        "type": "object",
        "required": [
          "object",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Describes an OpenAI model offering that can be used with the API.",
              "required": [
                "id",
                "object",
                "created",
                "owned_by"
              ],
              "properties": {
                "created": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The Unix timestamp (in seconds) when the model was created.",
                  "minimum": 0
                },
                "id": {
                  "type": "string",
                  "description": "The model identifier, which can be referenced in the API endpoints."
                },
                "object": {
                  "type": "string",
                  "description": "The object type, which is always \"model\"."
                },
                "owned_by": {
                  "type": "string",
                  "description": "The organization that owns the model."
                }
              }
            }
          },
          "object": {
            "type": "string"
          }
        }
      },
      "LocalModelResponse": {
        "type": "object",
        "required": [
          "repo",
          "filename",
          "snapshot",
          "model_params"
        ],
        "properties": {
          "filename": {
            "type": "string"
          },
          "model_params": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "type": "string"
            }
          },
          "repo": {
            "type": "string"
          },
          "size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "snapshot": {
            "type": "string"
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "images": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "role": {
            "type": "string"
          }
        }
      },
      "Model": {
        "type": "object",
        "required": [
          "model",
          "modified_at",
          "size",
          "digest",
          "details"
        ],
        "properties": {
          "details": {
            "$ref": "#/components/schemas/ModelDetails"
          },
          "digest": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "modified_at": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ModelAlias": {
        "type": "object",
        "required": [
          "alias",
          "repo",
          "filename",
          "snapshot"
        ],
        "properties": {
          "alias": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "repo": {
            "type": "string",
            "format": "string"
          },
          "snapshot": {
            "type": "string"
          }
        }
      },
      "ModelDetails": {
        "type": "object",
        "required": [
          "format",
          "family",
          "parameter_size",
          "quantization_level"
        ],
        "properties": {
          "families": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "family": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "parameter_size": {
            "type": "string"
          },
          "parent_model": {
            "type": [
              "string",
              "null"
            ]
          },
          "quantization_level": {
            "type": "string"
          }
        }
      },
      "ModelResponse": {
        "type": "object",
        "description": "Describes an OpenAI model offering that can be used with the API.",
        "required": [
          "id",
          "object",
          "created",
          "owned_by"
        ],
        "properties": {
          "created": {
            "type": "integer",
            "format": "int32",
            "description": "The Unix timestamp (in seconds) when the model was created.",
            "minimum": 0
          },
          "id": {
            "type": "string",
            "description": "The model identifier, which can be referenced in the API endpoints."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"model\"."
          },
          "owned_by": {
            "type": "string",
            "description": "The organization that owns the model."
          }
        }
      },
      "ModelsResponse": {
        "type": "object",
        "required": [
          "models"
        ],
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Model"
            }
          }
        }
      },
      "NewDownloadRequest": {
        "type": "object",
        "description": "Request to pull a model file from HuggingFace",
        "required": [
          "repo",
          "filename"
        ],
        "properties": {
          "filename": {
            "type": "string",
            "description": "Model file name to download (typically .gguf format)",
            "example": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
            "pattern": ".*\\.(gguf|bin|safetensors)$"
          },
          "repo": {
            "type": "string",
            "description": "HuggingFace repository name in format 'username/repository-name'",
            "example": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
            "pattern": "^[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$"
          }
        },
        "example": {
          "filename": "mistral-7b-instruct-v0.1.Q4_K_M.gguf",
          "repo": "TheBloke/Mistral-7B-Instruct-v0.1-GGUF"
        }
      },
      "OAIRequestParams": {
        "type": "object",
        "properties": {
          "frequency_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "max_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "presence_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "seed": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "stop": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "temperature": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "top_p": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "user": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "OllamaError": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "OpenAIApiError": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorBody",
            "description": "Error details following OpenAI API error format"
          }
        },
        "example": {
          "error": {
            "code": "validation_error",
            "message": "Validation failed: name is required",
            "param": "name",
            "type": "invalid_request_error"
          }
        }
      },
      "Options": {
        "type": "object",
        "properties": {
          "f16_kv": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "frequency_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "logits_all": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "low_vram": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "main_gpu": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "mirostat": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "mirostat_eta": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "mirostat_tau": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "num_batch": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "num_ctx": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "num_gpu": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "num_keep": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "num_predict": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "num_thread": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "numa": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "penalize_newline": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "presence_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "repeat_last_n": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "repeat_penalty": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "seed": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "stop": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "temperature": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "tfs_z": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "top_k": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "top_p": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "typical_p": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "use_mlock": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "use_mmap": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "vocab_only": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "PaginatedAliasResponse": {
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Alias"
            }
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginatedApiModelResponse": {
        "type": "object",
        "description": "Paginated response for API model listings",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiModelResponse"
            }
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginatedApiTokenResponse": {
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiToken"
            }
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginatedDownloadResponse": {
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownloadRequest"
            }
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginatedLocalModelResponse": {
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalModelResponse"
            }
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginatedUserAliasResponse": {
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "page_size"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAliasResponse"
            }
          },
          "page": {
            "type": "integer",
            "minimum": 0
          },
          "page_size": {
            "type": "integer",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PaginationSortParams": {
        "type": "object",
        "description": "Query parameters for pagination and sorting",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Page number (1-based indexing)",
            "example": 1,
            "minimum": 1
          },
          "page_size": {
            "type": "integer",
            "description": "Number of items to return per page (maximum 100)",
            "example": 30,
            "maximum": 100,
            "minimum": 1
          },
          "sort": {
            "type": [
              "string",
              "null"
            ],
            "description": "Field to sort by. Common values: repo, filename, size, updated_at, snapshot, created_at",
            "example": "updated_at"
          },
          "sort_order": {
            "type": "string",
            "description": "Sort order: 'asc' for ascending, 'desc' for descending",
            "example": "desc",
            "pattern": "^(asc|desc)$"
          }
        }
      },
      "PingResponse": {
        "type": "object",
        "description": "Response to the ping endpoint",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Simple ping response message",
            "example": "pong"
          }
        },
        "example": {
          "message": "pong"
        }
      },
      "RedirectResponse": {
        "type": "object",
        "required": [
          "location"
        ],
        "properties": {
          "location": {
            "type": "string",
            "description": "The URL to redirect to (OAuth authorization URL or application home page)",
            "example": "https://oauth.example.com/auth?client_id=test&redirect_uri=..."
          }
        },
        "example": {
          "location": "https://oauth.example.com/auth?client_id=test&redirect_uri=..."
        }
      },
      "RequestAccessRequest": {
        "type": "object",
        "required": [
          "app_client_id"
        ],
        "properties": {
          "app_client_id": {
            "type": "string"
          }
        }
      },
      "RequestAccessResponse": {
        "type": "object",
        "required": [
          "scope"
        ],
        "properties": {
          "scope": {
            "type": "string"
          }
        }
      },
      "RoleSource": {
        "type": "string",
        "description": "Role Source\n`role` - client level user role\n`scope_token` - scope granted token role\n`scope_user` - scope granted user role",
        "enum": [
          "role",
          "scope_token",
          "scope_user"
        ]
      },
      "SettingInfo": {
        "type": "object",
        "required": [
          "key",
          "current_value",
          "default_value",
          "source",
          "metadata"
        ],
        "properties": {
          "current_value": {},
          "default_value": {},
          "key": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/SettingMetadata"
          },
          "source": {
            "$ref": "#/components/schemas/SettingSource"
          }
        }
      },
      "SettingMetadata": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "string"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "min",
              "max",
              "type"
            ],
            "properties": {
              "max": {
                "type": "integer",
                "format": "int64"
              },
              "min": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "number"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "boolean"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "options",
              "type"
            ],
            "properties": {
              "options": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "option"
                ]
              }
            }
          }
        ]
      },
      "SettingSource": {
        "type": "string",
        "enum": [
          "system",
          "command_line",
          "environment",
          "settings_file",
          "default"
        ]
      },
      "SetupRequest": {
        "type": "object",
        "description": "Request to setup the application in authenticated mode",
        "required": [
          "name"
        ],
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional description of the server's purpose",
            "example": "My personal AI server",
            "maxLength": 500
          },
          "name": {
            "type": "string",
            "description": "Server name for identification (minimum 10 characters)",
            "example": "My Bodhi Server",
            "maxLength": 100,
            "minLength": 10
          }
        },
        "example": {
          "description": "My personal AI server",
          "name": "My Bodhi Server"
        }
      },
      "SetupResponse": {
        "type": "object",
        "description": "Response containing the updated application status after setup",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AppStatus",
            "description": "New application status after successful setup"
          }
        },
        "example": {
          "status": "resource-admin"
        }
      },
      "ShowRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ShowResponse": {
        "type": "object",
        "required": [
          "details",
          "license",
          "model_info",
          "modelfile",
          "modified_at",
          "parameters",
          "template"
        ],
        "properties": {
          "details": {
            "$ref": "#/components/schemas/ModelDetails"
          },
          "license": {
            "type": "string"
          },
          "model_info": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "type": "string"
            }
          },
          "modelfile": {
            "type": "string"
          },
          "modified_at": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "parameters": {
            "type": "string"
          },
          "template": {
            "type": "string"
          }
        }
      },
      "TestPromptRequest": {
        "type": "object",
        "description": "Request to test API connectivity with a prompt",
        "required": [
          "base_url",
          "model",
          "prompt"
        ],
        "properties": {
          "api_key": {
            "type": "string",
            "description": "API key for authentication (provide either api_key OR id, api_key takes preference if both provided)"
          },
          "base_url": {
            "type": "string",
            "description": "API base URL (optional when using id)"
          },
          "id": {
            "type": "string",
            "description": "API model ID to look up stored credentials (provide either api_key OR id, api_key takes preference if both provided)"
          },
          "model": {
            "type": "string",
            "description": "Model to use for testing"
          },
          "prompt": {
            "type": "string",
            "description": "Test prompt (max 30 characters for cost control)"
          }
        },
        "example": {
          "api_key": "sk-...",
          "base_url": "https://api.openai.com/v1",
          "model": "gpt-4",
          "prompt": "Hello, how are you?"
        }
      },
      "TestPromptResponse": {
        "type": "object",
        "description": "Response from testing API connectivity",
        "required": [
          "success"
        ],
        "properties": {
          "error": {
            "type": [
              "string",
              "null"
            ]
          },
          "response": {
            "type": [
              "string",
              "null"
            ]
          },
          "success": {
            "type": "boolean"
          }
        },
        "example": {
          "error": null,
          "response": "Hello! I'm doing well, thank you.",
          "success": true
        }
      },
      "TokenStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive"
        ]
      },
      "TokenType": {
        "type": "string",
        "description": "Token Type\n`session` - token stored in cookie based http session\n`bearer` - token received from http authorization header as bearer token",
        "enum": [
          "session",
          "bearer"
        ]
      },
      "UpdateAliasRequest": {
        "type": "object",
        "required": [
          "repo",
          "filename"
        ],
        "properties": {
          "context_params": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "filename": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "request_params": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/OAIRequestParams"
              }
            ]
          },
          "snapshot": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "UpdateApiModelRequest": {
        "type": "object",
        "description": "Request to update an existing API model configuration",
        "required": [
          "api_format",
          "base_url",
          "models"
        ],
        "properties": {
          "api_format": {
            "$ref": "#/components/schemas/ApiFormat",
            "description": "API format/protocol (required)"
          },
          "api_key": {
            "type": [
              "string",
              "null"
            ],
            "description": "API key for authentication (optional, only update if provided for security)"
          },
          "base_url": {
            "type": "string",
            "description": "API base URL (required)"
          },
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of available models (required)"
          },
          "prefix": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional prefix for model namespacing"
          }
        },
        "example": {
          "api_format": "openai",
          "api_key": "sk-new-key",
          "base_url": "https://api.openai.com/v1",
          "models": [
            "gpt-4-turbo",
            "gpt-3.5-turbo"
          ],
          "prefix": "openai"
        }
      },
      "UpdateApiTokenRequest": {
        "type": "object",
        "description": "Request to update an existing API token",
        "required": [
          "name",
          "status"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "New descriptive name for the token (minimum 3 characters)",
            "example": "Updated Token Name",
            "maxLength": 100,
            "minLength": 3
          },
          "status": {
            "$ref": "#/components/schemas/TokenStatus",
            "description": "New status for the token (active/inactive)"
          }
        },
        "example": {
          "name": "Updated Token Name",
          "status": "inactive"
        }
      },
      "UpdateSettingRequest": {
        "type": "object",
        "description": "Request to update a setting value",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "description": "New value for the setting (type depends on setting metadata)"
          }
        },
        "example": {
          "value": "debug"
        }
      },
      "UserAlias": {
        "type": "object",
        "required": [
          "alias",
          "repo",
          "filename",
          "snapshot"
        ],
        "properties": {
          "alias": {
            "type": "string"
          },
          "context_params": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filename": {
            "type": "string"
          },
          "repo": {
            "type": "string",
            "format": "string"
          },
          "request_params": {
            "$ref": "#/components/schemas/OAIRequestParams"
          },
          "snapshot": {
            "type": "string"
          }
        }
      },
      "UserAliasResponse": {
        "type": "object",
        "required": [
          "alias",
          "repo",
          "filename",
          "snapshot",
          "source",
          "model_params",
          "request_params",
          "context_params"
        ],
        "properties": {
          "alias": {
            "type": "string"
          },
          "context_params": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filename": {
            "type": "string"
          },
          "model_params": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "type": "string"
            }
          },
          "repo": {
            "type": "string"
          },
          "request_params": {
            "$ref": "#/components/schemas/OAIRequestParams"
          },
          "snapshot": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "description": "Information about the currently logged in user",
        "required": [
          "logged_in"
        ],
        "properties": {
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "User's email address"
          },
          "logged_in": {
            "type": "boolean",
            "description": "If user is logged in"
          },
          "role": {
            "type": [
              "string",
              "null"
            ],
            "description": "List of roles assigned to the user"
          },
          "role_source": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RoleSource",
                "description": "Role source"
              }
            ]
          },
          "token_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TokenType",
                "description": "Token type"
              }
            ]
          }
        },
        "example": {
          "email": "user@example.com",
          "logged_in": true,
          "roles": [
            "admin",
            "user"
          ]
        }
      }
    }
  },
  "tags": [
    {
      "name": "system",
      "description": "System information and operations"
    },
    {
      "name": "setup",
      "description": "Application setup and initialization"
    },
    {
      "name": "auth",
      "description": "Authentication and session management"
    },
    {
      "name": "api-keys",
      "description": "API keys management"
    },
    {
      "name": "api-models",
      "description": "Remote AI API model configuration"
    },
    {
      "name": "models",
      "description": "Model files and aliases"
    },
    {
      "name": "settings",
      "description": "Application settings management"
    },
    {
      "name": "openai",
      "description": "OpenAI-compatible API endpoints"
    },
    {
      "name": "ollama",
      "description": "Ollama-compatible API endpoints"
    }
  ],
  "externalDocs": {
    "url": "https://getbodhi.app/docs/api",
    "description": "Find more info here"
  }
}