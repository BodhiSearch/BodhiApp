diff --git a/.devcontainer/postCreateCommand.sh b/.devcontainer/postCreateCommand.sh
index 4452df4..adc500f 100755
--- a/.devcontainer/postCreateCommand.sh
+++ b/.devcontainer/postCreateCommand.sh
@@ -12,3 +12,5 @@ export NEXT_TELEMETRY_DISABLED=1
 cd /workspaces/BodhiApp/llamacpp-sys && pre-commit install
 cd /workspaces/BodhiApp/llamacpp-sys/llama.cpp && pre-commit install
 cd /workspaces/BodhiApp
+cargo fetch
+cargo check --all-targets --workspace --frozen || echo "cargo check completed with errors"
diff --git a/Cargo.toml b/Cargo.toml
index 41c74ca..a66bc54 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -15,6 +15,7 @@ members = [
   "crates/server_app",
   "crates/bodhiui/src-tauri",
   "crates/integration-tests",
+  "crates/app",
 ]
 resolver = "2"
 exclude = ["crates/chatapp/bodhi"]
@@ -34,6 +35,7 @@ routes_all = { path = "crates/routes_all" }
 server_app = { path = "crates/server_app" }
 # bodhi = { path = "app/bodhi" }
 bodhiui = { path = "crates/bodhiui/src-tauri" }
+app = { path = "crates/app" }
 
 anyhow = "1.0.81"
 anyhow_trace = "0.1.3"
diff --git a/crates/app/Cargo.toml b/crates/app/Cargo.toml
new file mode 100644
index 0000000..2e17900
--- /dev/null
+++ b/crates/app/Cargo.toml
@@ -0,0 +1,45 @@
+[package]
+name = "app"
+version = "0.1.16-dev"
+edition = "2021"
+description = "Bodhi App | Run LLMs locally"
+license = "MIT"
+authors = ["Amir Nagri <amir.nagri@gmail.com>"]
+
+[dependencies]
+errmeta_derive = { workspace = true }
+objs = { workspace = true }
+services = { workspace = true }
+commands = { workspace = true }
+server_core = { workspace = true }
+auth_middleware = { workspace = true }
+routes_oai = { workspace = true }
+routes_app = { workspace = true }
+routes_all = { workspace = true }
+server_app = { workspace = true }
+
+axum = { workspace = true }
+clap = { workspace = true, features = ["derive"] }
+derive-new = { workspace = true }
+dotenv = { workspace = true }
+include_dir = { workspace = true }
+thiserror = { workspace = true }
+tokio = { workspace = true, features = ["full"] }
+tower-serve-static = { workspace = true }
+tracing = { workspace = true, features = ["async-await", "log"] }
+tracing-appender = { workspace = true }
+tracing-subscriber = { workspace = true, features = ["env-filter"] }
+
+[dev-dependencies]
+anyhow = { workspace = true }
+anyhow_trace = { workspace = true }
+rstest = { workspace = true }
+serial_test = { workspace = true }
+
+[build-dependencies]
+anyhow = { workspace = true }
+
+[features]
+native = []
+production = []
+test-utils = []
\ No newline at end of file
diff --git a/crates/app/build.rs b/crates/app/build.rs
new file mode 100644
index 0000000..26a8075
--- /dev/null
+++ b/crates/app/build.rs
@@ -0,0 +1,28 @@
+use std::path::Path;
+use std::process::Command;
+
+fn main() -> anyhow::Result<()> {
+  generate_static_assets()?;
+  Ok(())
+}
+
+fn generate_static_assets() -> Result<(), anyhow::Error> {
+  println!("cargo:rerun-if-changed=../bodhiui/src");
+  let bodhiui_dir = Path::new("../bodhiui");
+  if !bodhiui_dir.exists() {
+    return Err(anyhow::anyhow!("bodhiui directory not found"));
+  }
+  let output = Command::new("npm")
+    .arg("run")
+    .arg("build")
+    .current_dir(bodhiui_dir)
+    .output()?;
+  if !output.status.success() {
+    return Err(anyhow::anyhow!(
+      "npm run build failed: {}",
+      String::from_utf8_lossy(&output.stderr)
+    ));
+  }
+  println!("cargo:warning=npm run build completed successfully");
+  Ok(())
+}
diff --git a/crates/chatapp/bodhi/src/app.rs b/crates/app/src/app.rs
similarity index 95%
rename from crates/chatapp/bodhi/src/app.rs
rename to crates/app/src/app.rs
index 4e1b0de..4963883 100644
--- a/crates/chatapp/bodhi/src/app.rs
+++ b/crates/app/src/app.rs
@@ -3,6 +3,7 @@ use crate::{
     build_create_command, build_list_command, build_manage_alias_command, build_pull_command,
     build_run_command, build_serve_command,
   },
+  error::Result,
   native::NativeCommand,
 };
 use axum::Router;
@@ -21,14 +22,14 @@ use tower_serve_static::ServeDir;
 use tracing_appender::non_blocking::WorkerGuard;
 use tracing_subscriber::{fmt, layer::SubscriberExt, util::SubscriberInitExt, EnvFilter};
 
-static ASSETS: Dir<'static> = include_dir!("$CARGO_MANIFEST_DIR/../out");
+static ASSETS: Dir<'static> = include_dir!("$CARGO_MANIFEST_DIR/../bodhiui/out");
 
-pub fn main_internal(env_service: Arc<DefaultEnvService>) -> super::Result<()> {
+pub fn main_internal(env_service: Arc<DefaultEnvService>) -> Result<()> {
   let runtime = Builder::new_multi_thread().enable_all().build()?;
   runtime.block_on(async move { aexecute(env_service).await })
 }
 
-async fn aexecute(env_service: Arc<DefaultEnvService>) -> super::Result<()> {
+async fn aexecute(env_service: Arc<DefaultEnvService>) -> Result<()> {
   let bodhi_home = env_service.bodhi_home();
   let hf_cache = env_service.hf_cache();
   let data_service = LocalDataService::new(bodhi_home.clone());
@@ -142,7 +143,7 @@ async fn aexecute(env_service: Arc<DefaultEnvService>) -> super::Result<()> {
   Ok(())
 }
 
-pub fn setup_logs(logs_dir: &Path) -> super::Result<WorkerGuard> {
+pub fn setup_logs(logs_dir: &Path) -> Result<WorkerGuard> {
   let file_appender = tracing_appender::rolling::daily(logs_dir, "bodhi.log");
   let (non_blocking, guard) = tracing_appender::non_blocking(file_appender);
   let filter = EnvFilter::try_from_default_env().unwrap_or_else(|_| EnvFilter::new("info"));
diff --git a/crates/chatapp/bodhi/src/convert.rs b/crates/app/src/convert.rs
similarity index 100%
rename from crates/chatapp/bodhi/src/convert.rs
rename to crates/app/src/convert.rs
diff --git a/crates/chatapp/bodhi/src/error.rs b/crates/app/src/error.rs
similarity index 90%
rename from crates/chatapp/bodhi/src/error.rs
rename to crates/app/src/error.rs
index 3d6504e..a49030f 100644
--- a/crates/chatapp/bodhi/src/error.rs
+++ b/crates/app/src/error.rs
@@ -18,9 +18,6 @@ pub enum BodhiError {
   #[error(transparent)]
   Io(#[from] IoError),
   #[error(transparent)]
-  #[error_meta(error_type = ErrorType::InternalServer, status = 500, code = "tauri_error", args_delegate = false)]
-  Tauri(#[from] tauri::Error),
-  #[error(transparent)]
   Db(#[from] DbError),
   #[error(transparent)]
   BuilderError(#[from] BuilderError),
diff --git a/crates/chatapp/bodhi/src/lib.rs b/crates/app/src/lib.rs
similarity index 89%
copy from crates/chatapp/bodhi/src/lib.rs
copy to crates/app/src/lib.rs
index ec6859f..8303adc 100644
--- a/crates/chatapp/bodhi/src/lib.rs
+++ b/crates/app/src/lib.rs
@@ -6,11 +6,9 @@ pub mod test_utils;
 mod app;
 mod convert;
 mod error;
-mod native;
 
 pub use app::{main_internal, setup_logs};
 pub use error::BodhiError;
-pub(crate) use error::Result;
 
 pub mod l10n {
   use include_dir::Dir;
diff --git a/crates/chatapp/bodhi/src/main.rs b/crates/app/src/main.rs
similarity index 82%
rename from crates/chatapp/bodhi/src/main.rs
rename to crates/app/src/main.rs
index d639017..51a1801 100644
--- a/crates/chatapp/bodhi/src/main.rs
+++ b/crates/app/src/main.rs
@@ -1,8 +1,8 @@
 // Prevents additional console window on Windows in release, DO NOT REMOVE!!
 #![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]
 
-use bodhi::{main_internal, setup_logs, BodhiError};
-use objs::{ApiError, OpenAIApiError};
+use app::{main_internal, setup_logs, BodhiError};
+use objs::{ApiError, OpenAIApiError, NativeMode};
 use services::{DefaultEnvService, DefaultEnvWrapper};
 use std::sync::Arc;
 use tracing_appender::non_blocking::WorkerGuard;
@@ -25,11 +25,17 @@ mod env_config {
   pub static AUTH_REALM: &str = "bodhi";
 }
 
+#[cfg(feature = "native")]
+pub static NATIVE_MODE: NativeMode = NativeMode::Enabled;
+#[cfg(not(feature = "native"))]
+pub static NATIVE_MODE: NativeMode = NativeMode::Disabled;
+
 pub use env_config::*;
 
 pub fn main() {
   let mut env_service = DefaultEnvService::new(
-    ENV_TYPE.clone(),
+    ENV_TYPE,
+    NATIVE_MODE,
     AUTH_URL.to_string(),
     AUTH_REALM.to_string(),
     Arc::new(DefaultEnvWrapper::default()),
@@ -50,7 +56,7 @@ pub fn main() {
   if _guard.is_err() {
     eprintln!("failed to configure logging, will be skipped");
   };
-  let result = main_internal(Arc::new(env_service));
+  let result = crate::app::main_internal(Arc::new(env_service));
   if let Err(err) = result {
     tracing::warn!(?err, "application exited with error");
     let err: ApiError = err.into();
diff --git a/crates/chatapp/bodhi/src/resources/en-US/messages.ftl b/crates/app/src/resources/messages.ftl
similarity index 100%
rename from crates/chatapp/bodhi/src/resources/en-US/messages.ftl
rename to crates/app/src/resources/messages.ftl
diff --git a/crates/app/src/test_utils/mod.rs b/crates/app/src/test_utils/mod.rs
new file mode 100644
index 0000000..e69de29
diff --git a/crates/bodhiui/package-lock.json b/crates/bodhiui/package-lock.json
index a0c5973..74be110 100644
--- a/crates/bodhiui/package-lock.json
+++ b/crates/bodhiui/package-lock.json
@@ -1,11 +1,11 @@
 {
-  "name": "bodhi-ui",
+  "name": "bodhiui",
   "version": "0.1.0",
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
     "": {
-      "name": "bodhi-ui",
+      "name": "bodhiui",
       "version": "0.1.0",
       "dependencies": {
         "@ducanh2912/next-pwa": "^10.2.8",
diff --git a/crates/bodhiui/src-tauri/Cargo.toml b/crates/bodhiui/src-tauri/Cargo.toml
index 0fff2d9..cd5bf33 100644
--- a/crates/bodhiui/src-tauri/Cargo.toml
+++ b/crates/bodhiui/src-tauri/Cargo.toml
@@ -7,12 +7,12 @@ edition = "2021"
 name = "app_lib"
 crate-type = ["staticlib", "cdylib", "rlib"]
 
-[build-dependencies]
-tauri-build = { version = "2.0.1", features = [] }
-
 [dependencies]
 log = { workspace = true }
 serde = { workspace = true, features = ["derive"] }
 serde_json = { workspace = true }
 tauri = { version = "2.0.6", features = [] }
 tauri-plugin-log = "2.0.0-rc"
+
+[build-dependencies]
+tauri-build = { version = "2.0.1", features = [] }
diff --git a/crates/bodhiui/src-tauri/src/lib.rs b/crates/bodhiui/src-tauri/src/lib.rs
index 9c3118c..20dddae 100644
--- a/crates/bodhiui/src-tauri/src/lib.rs
+++ b/crates/bodhiui/src-tauri/src/lib.rs
@@ -1,4 +1,5 @@
-#[cfg_attr(mobile, tauri::mobile_entry_point)]
+pub mod native;
+
 pub fn run() {
   tauri::Builder::default()
     .setup(|app| {
diff --git a/crates/bodhiui/src-tauri/src/main.rs b/crates/bodhiui/src-tauri/src/main.rs
deleted file mode 100644
index ad5fe83..0000000
--- a/crates/bodhiui/src-tauri/src/main.rs
+++ /dev/null
@@ -1,6 +0,0 @@
-// Prevents additional console window on Windows in release, DO NOT REMOVE!!
-#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]
-
-fn main() {
-  app_lib::run();
-}
diff --git a/crates/chatapp/bodhi/src/native.rs b/crates/bodhiui/src-tauri/src/native.rs
similarity index 87%
rename from crates/chatapp/bodhi/src/native.rs
rename to crates/bodhiui/src-tauri/src/native.rs
index d9bc2ea..2904923 100644
--- a/crates/chatapp/bodhi/src/native.rs
+++ b/crates/bodhiui/src-tauri/src/native.rs
@@ -35,8 +35,23 @@ impl NativeCommand {
         .add_item(CustomMenuItem::new("homepage", "Open Homepage"))
         .add_item(CustomMenuItem::new("quit".to_string(), "Quit")),
     );
+    launch_tauri(server_handle, ui, addr, system_tray, addr_clone)?;
+    Ok(())
+  }
+}
+
+#[cfg_attr(mobile, tauri::mobile_entry_point)]
+fn launch_tauri(server_handle: !, ui: bool, addr: String, system_tray: _, addr_clone: String) -> Result<(), _> {
     tauri::Builder::default()
       .setup(move |app| {
+        if cfg!(debug_assertions) {
+          app.handle().plugin(
+            tauri_plugin_log::Builder::default()
+              .level(log::LevelFilter::Info)
+              .build(),
+          )?;
+        }
+
         #[cfg(target_os = "macos")]
         app.set_activation_policy(tauri::ActivationPolicy::Accessory);
 
@@ -60,13 +75,13 @@ impl NativeCommand {
         }
       })
       .build(tauri::generate_context!())?
+      .run(tauri::generate_context!())
       .run(|_app_handle, event| {
         if let RunEvent::ExitRequested { api, .. } = event {
           api.prevent_exit();
         }
       });
     Ok(())
-  }
 }
 
 fn on_system_tray_event(app: &AppHandle, event: SystemTrayEvent, addr: &str) {
diff --git a/crates/chatapp/bodhi/build.rs b/crates/chatapp/bodhi/build.rs
index ffefde8..d262253 100644
--- a/crates/chatapp/bodhi/build.rs
+++ b/crates/chatapp/bodhi/build.rs
@@ -15,9 +15,9 @@ fn main() -> anyhow::Result<()> {
 
 #[allow(dead_code)]
 fn build_non_native() -> anyhow::Result<()> {
-  println!("cargo:rerun-if-changed=../app/components");
-  println!("cargo:rerun-if-changed=../app/lib");
-  println!("cargo:rerun-if-changed=../app/pages");
+  println!("cargo:rerun-if-changed=../components");
+  println!("cargo:rerun-if-changed=../lib");
+  println!("cargo:rerun-if-changed=../pages");
   build_frontend()?;
   Ok(())
 }
diff --git a/crates/chatapp/bodhi/resources/bin/bodhi b/crates/chatapp/bodhi/resources/bin/bodhi
deleted file mode 100755
index 561b739..0000000
--- a/crates/chatapp/bodhi/resources/bin/bodhi
+++ /dev/null
@@ -1,9 +0,0 @@
-#!/bin/bash
-if [ $# -eq 0 ]; then
-  args="--help"
-else
-  args="$@"
-fi
-current_dir=$(dirname "$(realpath "$0")")
-bodhi_bin=$(realpath $current_dir/../../../MacOS/bodhi)
-$bodhi_bin $args
diff --git a/crates/chatapp/bodhi/resources/icon.png b/crates/chatapp/bodhi/resources/icon.png
deleted file mode 100644
index 6b76e4a..0000000
Binary files a/crates/chatapp/bodhi/resources/icon.png and /dev/null differ
diff --git a/crates/chatapp/bodhi/src/lib.rs b/crates/chatapp/bodhi/src/lib.rs
index ec6859f..036c80d 100644
--- a/crates/chatapp/bodhi/src/lib.rs
+++ b/crates/chatapp/bodhi/src/lib.rs
@@ -1,19 +1 @@
-#[cfg(feature = "test-utils")]
-pub mod test_utils;
-#[cfg(all(not(feature = "test-utils"), test))]
-pub mod test_utils;
-
-mod app;
-mod convert;
-mod error;
 mod native;
-
-pub use app::{main_internal, setup_logs};
-pub use error::BodhiError;
-pub(crate) use error::Result;
-
-pub mod l10n {
-  use include_dir::Dir;
-
-  pub const L10N_RESOURCES: &Dir = &include_dir::include_dir!("$CARGO_MANIFEST_DIR/src/resources");
-}
diff --git a/crates/chatapp/bodhi/src/test_utils/mod.rs b/crates/chatapp/bodhi/src/test_utils/mod.rs
deleted file mode 100644
index 8b13789..0000000
--- a/crates/chatapp/bodhi/src/test_utils/mod.rs
+++ /dev/null
@@ -1 +0,0 @@
-
diff --git a/crates/integration-tests/tests/utils/live_server_utils.rs b/crates/integration-tests/tests/utils/live_server_utils.rs
index be4c184..0b9abf2 100644
--- a/crates/integration-tests/tests/utils/live_server_utils.rs
+++ b/crates/integration-tests/tests/utils/live_server_utils.rs
@@ -1,7 +1,7 @@
 use dircpy::CopyBuilder;
 use mockall::predicate::eq;
 use objs::test_utils::setup_l10n;
-use objs::{EnvType, FluentLocalizationService};
+use objs::{EnvType, FluentLocalizationService, NativeMode};
 use rstest::fixture;
 use server_app::{ServeCommand, ServerShutdownHandle};
 use services::{
@@ -57,6 +57,7 @@ pub fn tinyllama(
   let env_wrapper = EnvWrapperStub::new(envs);
   let env_service = DefaultEnvService::new(
     EnvType::Development,
+    NativeMode::Disabled,
     "".to_string(),
     "".to_string(),
     Arc::new(env_wrapper),
diff --git a/crates/objs/src/envs.rs b/crates/objs/src/envs.rs
index f8dab82..0142cd5 100644
--- a/crates/objs/src/envs.rs
+++ b/crates/objs/src/envs.rs
@@ -5,3 +5,10 @@ pub enum EnvType {
   #[default]
   Development,
 }
+
+#[derive(Debug, Clone, PartialEq, strum::EnumString, strum::Display)]
+#[strum(serialize_all = "snake_case")]
+pub enum NativeMode {
+  Enabled,
+  Disabled,
+}
diff --git a/crates/services/src/env_service.rs b/crates/services/src/env_service.rs
index f6843d7..e8911fa 100644
--- a/crates/services/src/env_service.rs
+++ b/crates/services/src/env_service.rs
@@ -1,5 +1,5 @@
 use crate::{DataServiceError, EnvWrapper};
-use objs::{EnvType, IoDirCreateError, IoFileWriteError};
+use objs::{EnvType, IoDirCreateError, IoFileWriteError, NativeMode};
 use std::{
   collections::HashMap,
   fs::{self, File},
@@ -102,6 +102,7 @@ pub trait EnvService: Send + Sync + std::fmt::Debug {
 #[derive(Debug, Clone)]
 pub struct DefaultEnvService {
   env_type: EnvType,
+  native_mode: NativeMode,
   auth_url: String,
   auth_realm: String,
   version: String,
@@ -241,12 +242,14 @@ impl DefaultEnvService {
   #[allow(clippy::new_without_default)]
   pub fn new(
     env_type: EnvType,
+    native_mode: NativeMode,
     auth_url: String,
     auth_realm: String,
     env_wrapper: Arc<dyn EnvWrapper>,
   ) -> Self {
     DefaultEnvService {
       env_type,
+      native_mode,
       auth_url,
       auth_realm,
       version: env!("CARGO_PKG_VERSION").to_string(),
@@ -542,6 +545,8 @@ mod test {
     #[case] expected: String,
     temp_dir: TempDir,
   ) -> anyhow::Result<()> {
+    use objs::NativeMode;
+
     let mut envs = HashMap::from([
       ("HOME".to_string(), temp_dir.path().display().to_string()),
       (BODHI_HOST.to_string(), "0.0.0.0".to_string()),
@@ -558,6 +563,7 @@ mod test {
     let env_wrapper = EnvWrapperStub::new(envs);
     let mut result = DefaultEnvService::new(
       env_type,
+      NativeMode::Disabled,
       "https://id.getbodhi.app".to_string(),
       "bodhi-realm".to_string(),
       Arc::new(env_wrapper),
diff --git a/crates/services/src/test_utils/envs.rs b/crates/services/src/test_utils/envs.rs
index 8e9d446..86bcad5 100644
--- a/crates/services/src/test_utils/envs.rs
+++ b/crates/services/src/test_utils/envs.rs
@@ -2,7 +2,7 @@ use crate::{
   DefaultEnvService, EnvService, EnvWrapper, BODHI_FRONTEND_URL, BODHI_HOME, BODHI_HOST,
   BODHI_PORT, BODHI_SCHEME, HF_HOME, LOGS_DIR,
 };
-use objs::{test_utils::temp_dir, EnvType};
+use objs::{test_utils::temp_dir, EnvType, NativeMode};
 use rstest::fixture;
 use std::{
   collections::HashMap,
@@ -29,6 +29,7 @@ impl DefaultEnvService {
   pub fn test_new(env_wrapper: Arc<dyn EnvWrapper>) -> Self {
     Self::new(
       EnvType::Development,
+      NativeMode::Disabled,
       "".to_string(),
       "".to_string(),
       env_wrapper,
