- id: lmstudio-community/Mistral-Small-24B-Instruct-2501-GGUF
  base: mistralai/Mistral-Small-24B-Instruct-2501
  template: '{{ bos_token }}{% for message in messages %}{% if message[''role''] == ''user'' %}{{ ''[INST]'' + message[''content''] + ''[/INST]'' }}{% elif message[''role''] == ''system'' %}{{ ''[SYSTEM_PROMPT]'' + message[''content''] + ''[/SYSTEM_PROMPT]'' }}{% elif message[''role''] == ''assistant'' %}{{ message[''content''] + eos_token }}{% else %}{{ raise_exception(''Only user, system and assistant roles are supported!'') }}{% endif %}{% endfor %}'
- id: lmstudio-community/DeepSeek-R1-Distill-Qwen-7B-GGUF
  base: deepseek-ai/DeepSeek-R1-Distill-Qwen-7B
  template: '{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='''') %}{%- for message in messages %}{%- if message[''role''] == ''system'' %}{% set ns.system_prompt = message[''content''] %}{%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}{%- if message[''role''] == ''user'' %}{%- set ns.is_tool = false -%}{{''<｜User｜>'' + message[''content'']}}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is none %}{%- set ns.is_tool = false -%}{%- for tool in message[''tool_calls'']%}{%- if not ns.is_first %}{{''<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{%- set ns.is_first = true -%}{%- else %}{{''\n'' + ''<｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{{''<｜tool▁calls▁end｜><｜end▁of▁sentence｜>''}}{%- endif %}{%- endfor %}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is not none %}{%- if ns.is_tool %}{{''<｜tool▁outputs▁end｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}{%- set ns.is_tool = false -%}{%- else %}{% set content = message[''content''] %}{% if ''</think>'' in content %}{% set content = content.split(''</think>'')[-1] %}{% endif %}{{''<｜Assistant｜>'' + content + ''<｜end▁of▁sentence｜>''}}{%- endif %}{%- endif %}{%- if message[''role''] == ''tool'' %}{%- set ns.is_tool = true -%}{%- if ns.is_output_first %}{{''<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- set ns.is_output_first = false %}{%- else %}{{''\n<｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- endif %}{%- endif %}{%- endfor -%}{% if ns.is_tool %}{{''<｜tool▁outputs▁end｜>''}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{''<｜Assistant｜>''}}{% endif %}'
- id: lmstudio-community/Qwen2.5-7B-Instruct-1M-GGUF
  base: Qwen/Qwen2.5-7B-Instruct-1M
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/DeepSeek-R1-Distill-Llama-8B-GGUF
  base: deepseek-ai/DeepSeek-R1-Distill-Llama-8B
  template: '{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='''') %}{%- for message in messages %}{%- if message[''role''] == ''system'' %}{% set ns.system_prompt = message[''content''] %}{%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}{%- if message[''role''] == ''user'' %}{%- set ns.is_tool = false -%}{{''<｜User｜>'' + message[''content'']}}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is none %}{%- set ns.is_tool = false -%}{%- for tool in message[''tool_calls'']%}{%- if not ns.is_first %}{{''<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{%- set ns.is_first = true -%}{%- else %}{{''\n'' + ''<｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{{''<｜tool▁calls▁end｜><｜end▁of▁sentence｜>''}}{%- endif %}{%- endfor %}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is not none %}{%- if ns.is_tool %}{{''<｜tool▁outputs▁end｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}{%- set ns.is_tool = false -%}{%- else %}{% set content = message[''content''] %}{% if ''</think>'' in content %}{% set content = content.split(''</think>'')[-1] %}{% endif %}{{''<｜Assistant｜>'' + content + ''<｜end▁of▁sentence｜>''}}{%- endif %}{%- endif %}{%- if message[''role''] == ''tool'' %}{%- set ns.is_tool = true -%}{%- if ns.is_output_first %}{{''<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- set ns.is_output_first = false %}{%- else %}{{''\n<｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- endif %}{%- endif %}{%- endfor -%}{% if ns.is_tool %}{{''<｜tool▁outputs▁end｜>''}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{''<｜Assistant｜>''}}{% endif %}'
- id: lmstudio-community/Qwen2.5-14B-Instruct-1M-GGUF
  base: Qwen/Qwen2.5-14B-Instruct-1M
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/DeepSeek-R1-Distill-Qwen-14B-GGUF
  base: deepseek-ai/DeepSeek-R1-Distill-Qwen-14B
  template: '{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='''') %}{%- for message in messages %}{%- if message[''role''] == ''system'' %}{% set ns.system_prompt = message[''content''] %}{%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}{%- if message[''role''] == ''user'' %}{%- set ns.is_tool = false -%}{{''<｜User｜>'' + message[''content'']}}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is none %}{%- set ns.is_tool = false -%}{%- for tool in message[''tool_calls'']%}{%- if not ns.is_first %}{{''<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{%- set ns.is_first = true -%}{%- else %}{{''\n'' + ''<｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{{''<｜tool▁calls▁end｜><｜end▁of▁sentence｜>''}}{%- endif %}{%- endfor %}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is not none %}{%- if ns.is_tool %}{{''<｜tool▁outputs▁end｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}{%- set ns.is_tool = false -%}{%- else %}{% set content = message[''content''] %}{% if ''</think>'' in content %}{% set content = content.split(''</think>'')[-1] %}{% endif %}{{''<｜Assistant｜>'' + content + ''<｜end▁of▁sentence｜>''}}{%- endif %}{%- endif %}{%- if message[''role''] == ''tool'' %}{%- set ns.is_tool = true -%}{%- if ns.is_output_first %}{{''<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- set ns.is_output_first = false %}{%- else %}{{''\n<｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- endif %}{%- endif %}{%- endfor -%}{% if ns.is_tool %}{{''<｜tool▁outputs▁end｜>''}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{''<｜Assistant｜>''}}{% endif %}'
- id: lmstudio-community/DeepSeek-R1-GGUF
  base: deepseek-ai/DeepSeek-R1
  template: '{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='''', is_first_sp=true) %}{%- for message in messages %}{%- if message[''role''] == ''system'' %}{%- if ns.is_first_sp %}{% set ns.system_prompt = ns.system_prompt + message[''content''] %}{% set ns.is_first_sp = false %}{%- else %}{% set ns.system_prompt = ns.system_prompt + ''\n\n'' + message[''content''] %}{%- endif %}{%- endif %}{%- endfor %}{{ bos_token }}{{ ns.system_prompt }}{%- for message in messages %}{%- if message[''role''] == ''user'' %}{%- set ns.is_tool = false -%}{{''<｜User｜>'' + message[''content'']}}{%- endif %}{%- if message[''role''] == ''assistant'' and ''tool_calls'' in message %}{%- set ns.is_tool = false -%}{%- for tool in message[''tool_calls''] %}{%- if not ns.is_first %}{%- if message[''content''] is none %}{{''<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{%- else %}{{''<｜Assistant｜>'' + message[''content''] + ''<｜tool▁calls▁begin｜><｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{%- endif %}{%- set ns.is_first = true -%}{%- else %}{{''\n'' + ''<｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{%- endif %}{%- endfor %}{{''<｜tool▁calls▁end｜><｜end▁of▁sentence｜>''}}{%- endif %}{%- if message[''role''] == ''assistant'' and ''tool_calls'' not in message %}{%- if ns.is_tool %}{{''<｜tool▁outputs▁end｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}{%- set ns.is_tool = false -%}{%- else %}{% set content = message[''content''] %}{% if ''</think>'' in content %}{% set content = content.split(''</think>'')[-1] %}{% endif %}{{''<｜Assistant｜>'' + content + ''<｜end▁of▁sentence｜>''}}{%- endif %}{%- endif %}{%- if message[''role''] == ''tool'' %}{%- set ns.is_tool = true -%}{%- if ns.is_output_first %}{{''<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- set ns.is_output_first = false %}{%- else %}{{''<｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- endif %}{%- endif %}{%- endfor -%}{% if ns.is_tool %}{{''<｜tool▁outputs▁end｜>''}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{''<｜Assistant｜>''}}{% endif %}'
- id: lmstudio-community/DeepSeek-R1-Distill-Qwen-32B-GGUF
  base: deepseek-ai/DeepSeek-R1-Distill-Qwen-32B
  template: '{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='''') %}{%- for message in messages %}{%- if message[''role''] == ''system'' %}{% set ns.system_prompt = message[''content''] %}{%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}{%- if message[''role''] == ''user'' %}{%- set ns.is_tool = false -%}{{''<｜User｜>'' + message[''content'']}}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is none %}{%- set ns.is_tool = false -%}{%- for tool in message[''tool_calls'']%}{%- if not ns.is_first %}{{''<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{%- set ns.is_first = true -%}{%- else %}{{''\n'' + ''<｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{{''<｜tool▁calls▁end｜><｜end▁of▁sentence｜>''}}{%- endif %}{%- endfor %}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is not none %}{%- if ns.is_tool %}{{''<｜tool▁outputs▁end｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}{%- set ns.is_tool = false -%}{%- else %}{% set content = message[''content''] %}{% if ''</think>'' in content %}{% set content = content.split(''</think>'')[-1] %}{% endif %}{{''<｜Assistant｜>'' + content + ''<｜end▁of▁sentence｜>''}}{%- endif %}{%- endif %}{%- if message[''role''] == ''tool'' %}{%- set ns.is_tool = true -%}{%- if ns.is_output_first %}{{''<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- set ns.is_output_first = false %}{%- else %}{{''\n<｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- endif %}{%- endif %}{%- endfor -%}{% if ns.is_tool %}{{''<｜tool▁outputs▁end｜>''}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{''<｜Assistant｜>''}}{% endif %}'
- id: lmstudio-community/phi-4-GGUF
  base: microsoft/phi-4
  template: '{% for message in messages %}{% if (message[''role''] == ''system'') %}{{''<|im_start|>system<|im_sep|>'' + message[''content''] + ''<|im_end|>''}}{% elif (message[''role''] == ''user'') %}{{''<|im_start|>user<|im_sep|>'' + message[''content''] + ''<|im_end|>''}}{% elif (message[''role''] == ''assistant'') %}{{''<|im_start|>assistant<|im_sep|>'' + message[''content''] + ''<|im_end|>''}}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ ''<|im_start|>assistant<|im_sep|>'' }}{% endif %}'
- id: lmstudio-community/DeepSeek-R1-Distill-Qwen-1.5B-GGUF
  base: deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B
  template: '{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='''') %}{%- for message in messages %}{%- if message[''role''] == ''system'' %}{% set ns.system_prompt = message[''content''] %}{%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}{%- if message[''role''] == ''user'' %}{%- set ns.is_tool = false -%}{{''<｜User｜>'' + message[''content'']}}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is none %}{%- set ns.is_tool = false -%}{%- for tool in message[''tool_calls'']%}{%- if not ns.is_first %}{{''<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{%- set ns.is_first = true -%}{%- else %}{{''\n'' + ''<｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{{''<｜tool▁calls▁end｜><｜end▁of▁sentence｜>''}}{%- endif %}{%- endfor %}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is not none %}{%- if ns.is_tool %}{{''<｜tool▁outputs▁end｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}{%- set ns.is_tool = false -%}{%- else %}{% set content = message[''content''] %}{% if ''</think>'' in content %}{% set content = content.split(''</think>'')[-1] %}{% endif %}{{''<｜Assistant｜>'' + content + ''<｜end▁of▁sentence｜>''}}{%- endif %}{%- endif %}{%- if message[''role''] == ''tool'' %}{%- set ns.is_tool = true -%}{%- if ns.is_output_first %}{{''<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- set ns.is_output_first = false %}{%- else %}{{''\n<｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- endif %}{%- endif %}{%- endfor -%}{% if ns.is_tool %}{{''<｜tool▁outputs▁end｜>''}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{''<｜Assistant｜>''}}{% endif %}'
- id: lmstudio-community/DeepSeek-Coder-V2-Lite-Instruct-GGUF
  base: deepseek-ai/DeepSeek-Coder-V2-Lite-Instruct
  template: |-
    {% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{{ bos_token }}{% for message in messages %}{% if message['role'] == 'user' %}{{ 'User: ' + message['content'] + '

    ' }}{% elif message['role'] == 'assistant' %}{{ 'Assistant: ' + message['content'] + eos_token }}{% elif message['role'] == 'system' %}{{ message['content'] + '

    ' }}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ 'Assistant:' }}{% endif %}
- id: lmstudio-community/Qwen2.5-Coder-7B-Instruct-GGUF
  base: Qwen/Qwen2.5-Coder-7B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/UI-TARS-7B-DPO-GGUF
  base: bytedance-research/UI-TARS-7B-DPO
  template: |-
    {% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% for message in messages %}{{ message['role'].title() + ': ' + message['content'] | trim + eos_token + '
    ' }}{% endfor %}{% if add_generation_prompt %}{{ 'Assistant: ' }}{% endif %}
- id: lmstudio-community/Llama-3.1-Tulu-3-405B-GGUF
  base: allenai/Llama-3.1-Tulu-3-405B
  template: |-
    {% for message in messages %}{% if message['role'] == 'system' %}{{ '<|system|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'user' %}{{ '<|user|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'assistant' %}{% if not loop.last %}{{ '<|assistant|>
    '  + message['content'] + eos_token + '
    ' }}{% else %}{{ '<|assistant|>
    '  + message['content'] + eos_token }}{% endif %}{% endif %}{% if loop.last and add_generation_prompt %}{{ '<|assistant|>
    ' }}{% endif %}{% endfor %}
- id: lmstudio-community/dolphin-2.8-mistral-7b-v02-GGUF
  base: alpindale/Mistral-7B-v0.2-hf
  template: |-
    {% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% for message in messages %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/Mistral-7B-Instruct-v0.3-GGUF
  base: mistralai/Mistral-7B-Instruct-v0.3
  template: '{{ bos_token }}{% for message in messages %}{% if (message[''role''] == ''user'') != (loop.index0 % 2 == 0) %}{{ raise_exception(''Conversation roles must alternate user/assistant/user/assistant/...'') }}{% endif %}{% if message[''role''] == ''user'' %}{{ ''[INST] '' + message[''content''] + '' [/INST]'' }}{% elif message[''role''] == ''assistant'' %}{{ message[''content''] + eos_token}}{% else %}{{ raise_exception(''Only user and assistant roles are supported!'') }}{% endif %}{% endfor %}'
- id: lmstudio-community/gemma-2-9b-it-GGUF
  base: google/gemma-2-9b-it
  template: |-
    {{ bos_token }}{% if messages[0]['role'] == 'system' %}{{ raise_exception('System role not supported') }}{% endif %}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if (message['role'] == 'assistant') %}{% set role = 'model' %}{% else %}{% set role = message['role'] %}{% endif %}{{ '<start_of_turn>' + role + '
    ' + message['content'] | trim + '<end_of_turn>
    ' }}{% endfor %}{% if add_generation_prompt %}{{'<start_of_turn>model
    '}}{% endif %}
- id: lmstudio-community/Meta-Llama-3.1-8B-Instruct-GGUF
  base: meta-llama/Meta-Llama-3.1-8B-Instruct
  template: |
    {{- bos_token }}
    {%- if custom_tools is defined %}
        {%- set tools = custom_tools %}
    {%- endif %}
    {%- if not tools_in_user_message is defined %}
        {%- set tools_in_user_message = true %}
    {%- endif %}
    {%- if not date_string is defined %}
        {%- set date_string = "26 Jul 2024" %}
    {%- endif %}

    {#- This block extracts the system message, so we can slot it into the right place. #}
    {%- if messages[0]['role'] == 'system' %}
        {%- set system_message = messages[0]['content']|trim %}
        {%- set messages = messages[1:] %}
    {%- else %}
        {%- set system_message = "" %}
    {%- endif %}

    {#- System message + builtin tools #}
    {{- "<|start_header_id|>system<|end_header_id|>\n\n" }}
    {%- if builtin_tools is defined or tools is not none %}
        {{- "Environment: ipython\n" }}
    {%- endif %}
    {%- if builtin_tools is defined %}
        {{- "Tools: " + builtin_tools | reject('equalto', 'code_interpreter') | join(", ") + "\n\n"}}
    {%- endif %}
    {{- "Cutting Knowledge Date: December 2023\n" }}
    {{- "Today Date: " + date_string + "\n\n" }}
    {%- if tools is not none and not tools_in_user_message %}
        {{- "You have access to the following functions. To call a function, please respond with JSON for a function call." }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
    {%- endif %}
    {{- system_message }}
    {{- "<|eot_id|>" }}

    {#- Custom tools are passed in a user message with some extra guidance #}
    {%- if tools_in_user_message and not tools is none %}
        {#- Extract the first user message so we can plug it in here #}
        {%- if messages | length != 0 %}
            {%- set first_user_message = messages[0]['content']|trim %}
            {%- set messages = messages[1:] %}
        {%- else %}
            {{- raise_exception("Cannot put tools in the first user message when there's no first user message!") }}
    {%- endif %}
        {{- '<|start_header_id|>user<|end_header_id|>\n\n' -}}
        {{- "Given the following functions, please respond with a JSON for a function call " }}
        {{- "with its proper arguments that best answers the given prompt.\n\n" }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
        {{- first_user_message + "<|eot_id|>"}}
    {%- endif %}

    {%- for message in messages %}
        {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}
            {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\n\n'+ message['content'] | trim + '<|eot_id|>' }}
        {%- elif 'tool_calls' in message %}
            {%- if not message.tool_calls|length == 1 %}
                {{- raise_exception("This model only supports single tool-calls at once!") }}
            {%- endif %}
            {%- set tool_call = message.tool_calls[0].function %}
            {%- if builtin_tools is defined and tool_call.name in builtin_tools %}
                {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
                {{- "<|python_tag|>" + tool_call.name + ".call(" }}
                {%- for arg_name, arg_val in tool_call.arguments | items %}
                    {{- arg_name + '="' + arg_val + '"' }}
                    {%- if not loop.last %}
                        {{- ", " }}
                    {%- endif %}
                    {%- endfor %}
                {{- ")" }}
            {%- else  %}
                {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
                {{- '{"name": "' + tool_call.name + '", ' }}
                {{- '"parameters": ' }}
                {{- tool_call.arguments | tojson }}
                {{- "}" }}
            {%- endif %}
            {%- if builtin_tools is defined %}
                {#- This means we're in ipython mode #}
                {{- "<|eom_id|>" }}
            {%- else %}
                {{- "<|eot_id|>" }}
            {%- endif %}
        {%- elif message.role == "tool" or message.role == "ipython" %}
            {{- "<|start_header_id|>ipython<|end_header_id|>\n\n" }}
            {%- if message.content is mapping or message.content is iterable %}
                {{- message.content | tojson }}
            {%- else %}
                {{- message.content }}
            {%- endif %}
            {{- "<|eot_id|>" }}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' }}
    {%- endif %}
- id: lmstudio-community/Phi-3.1-mini-128k-instruct-GGUF
  base: microsoft/Phi-3-mini-128k-instruct
  template: |-
    {% for message in messages %}{% if message['role'] == 'system' %}{{'<|system|>
    ' + message['content'] + '<|end|>
    '}}{% elif message['role'] == 'user' %}{{'<|user|>
    ' + message['content'] + '<|end|>
    '}}{% elif message['role'] == 'assistant' %}{{'<|assistant|>
    ' + message['content'] + '<|end|>
    '}}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ '<|assistant|>
    ' }}{% else %}{{ eos_token }}{% endif %}
- id: lmstudio-community/gemma-2-2b-it-GGUF
  base: google/gemma-2-2b-it
  template: |-
    {{ bos_token }}{% if messages[0]['role'] == 'system' %}{{ raise_exception('System role not supported') }}{% endif %}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if (message['role'] == 'assistant') %}{% set role = 'model' %}{% else %}{% set role = message['role'] %}{% endif %}{{ '<start_of_turn>' + role + '
    ' + message['content'] | trim + '<end_of_turn>
    ' }}{% endfor %}{% if add_generation_prompt %}{{'<start_of_turn>model
    '}}{% endif %}
- id: lmstudio-community/Mistral-Nemo-Instruct-2407-GGUF
  base: mistralai/Mistral-Nemo-Instruct-2407
  template: |
    {%- if messages[0]["role"] == "system" %}
        {%- set system_message = messages[0]["content"] %}
        {%- set loop_messages = messages[1:] %}
    {%- else %}
        {%- set loop_messages = messages %}
    {%- endif %}
    {%- if not tools is defined %}
        {%- set tools = none %}
    {%- endif %}
    {%- set user_messages = loop_messages | selectattr("role", "equalto", "user") | list %}

    {#- This block checks for alternating user/assistant messages, skipping tool calling messages #}
    {%- set ns = namespace() %}
    {%- set ns.index = 0 %}
    {%- for message in loop_messages %}
        {%- if not (message.role == "tool" or message.role == "tool_results" or (message.tool_calls is defined and message.tool_calls is not none)) %}
            {%- if (message["role"] == "user") != (ns.index % 2 == 0) %}
                {{- raise_exception("After the optional system message, conversation roles must alternate user/assistant/user/assistant/...") }}
            {%- endif %}
            {%- set ns.index = ns.index + 1 %}
        {%- endif %}
    {%- endfor %}

    {{- bos_token }}
    {%- for message in loop_messages %}
        {%- if message["role"] == "user" %}
            {%- if tools is not none and (message == user_messages[-1]) %}
                {{- "[AVAILABLE_TOOLS][" }}
                {%- for tool in tools %}
                    {%- set tool = tool.function %}
                    {{- '{"type": "function", "function": {' }}
                    {%- for key, val in tool.items() if key != "return" %}
                        {%- if val is string %}
                            {{- '"' + key + '": "' + val + '"' }}
                        {%- else %}
                            {{- '"' + key + '": ' + val|tojson }}
                        {%- endif %}
                        {%- if not loop.last %}
                            {{- ", " }}
                        {%- endif %}
                    {%- endfor %}
                    {{- "}}" }}
                    {%- if not loop.last %}
                        {{- ", " }}
                    {%- else %}
                        {{- "]" }}
                    {%- endif %}
                {%- endfor %}
                {{- "[/AVAILABLE_TOOLS]" }}
                {%- endif %}
            {%- if loop.last and system_message is defined %}
                {{- "[INST]" + system_message + "\n\n" + message["content"] + "[/INST]" }}
            {%- else %}
                {{- "[INST]" + message["content"] + "[/INST]" }}
            {%- endif %}
        {%- elif (message.tool_calls is defined and message.tool_calls is not none) %}
            {{- "[TOOL_CALLS][" }}
            {%- for tool_call in message.tool_calls %}
                {%- set out = tool_call.function|tojson %}
                {{- out[:-1] }}
                {%- if not tool_call.id is defined or tool_call.id|length != 9 %}
                    {{- raise_exception("Tool call IDs should be alphanumeric strings with length 9!") }}
                {%- endif %}
                {{- ', "id": "' + tool_call.id + '"}' }}
                {%- if not loop.last %}
                    {{- ", " }}
                {%- else %}
                    {{- "]" + eos_token }}
                {%- endif %}
            {%- endfor %}
        {%- elif message["role"] == "assistant" %}
            {{- message["content"] + eos_token}}
        {%- elif message["role"] == "tool_results" or message["role"] == "tool" %}
            {%- if message.content is defined and message.content.content is defined %}
                {%- set content = message.content.content %}
            {%- else %}
                {%- set content = message.content %}
            {%- endif %}
            {{- '[TOOL_RESULTS]{"content": ' + content|string + ", " }}
            {%- if not message.tool_call_id is defined or message.tool_call_id|length != 9 %}
                {{- raise_exception("Tool call IDs should be alphanumeric strings with length 9!") }}
            {%- endif %}
            {{- '"call_id": "' + message.tool_call_id + '"}[/TOOL_RESULTS]' }}
        {%- else %}
            {{- raise_exception("Only user and assistant roles are supported, with the exception of an initial optional system message!") }}
        {%- endif %}
    {%- endfor %}
- id: lmstudio-community/xLAM-7b-r-GGUF
  base: Salesforce/xLAM-7b-r
  template: '{{ bos_token }}{% for message in messages %}{% if (message[''role''] == ''user'') != (loop.index0 % 2 == 0) %}{{ raise_exception(''Conversation roles must alternate user/assistant/user/assistant/...'') }}{% endif %}{% if message[''role''] == ''user'' %}{{ ''[INST] '' + message[''content''] + '' [/INST]'' }}{% elif message[''role''] == ''assistant'' %}{{ '' '' + message[''content''] + eos_token}}{% else %}{{ raise_exception(''Only user and assistant roles are supported!'') }}{% endif %}{% endfor %}'
- id: lmstudio-community/Qwen2.5-14B-Instruct-GGUF
  base: Qwen/Qwen2.5-14B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-7B-Instruct-GGUF
  base: Qwen/Qwen2.5-7B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-3B-Instruct-GGUF
  base: Qwen/Qwen2.5-3B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Llama-3.2-1B-Instruct-GGUF
  base: meta-llama/Llama-3.2-1B-Instruct
  template: '{% set loop_messages = messages %}{% for message in loop_messages %}{% set content = ''<|start_header_id|>'' + message[''role''] + ''<|end_header_id|> ''+ message[''content''] | trim + ''<|eot_id|>'' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{{ ''<|start_header_id|>assistant<|end_header_id|> '' }}'
- id: lmstudio-community/Llama-3.2-3B-Instruct-GGUF
  base: meta-llama/Llama-3.2-3B-Instruct
  template: |
    {{- bos_token }}
    {%- if custom_tools is defined %}
        {%- set tools = custom_tools %}
    {%- endif %}
    {%- if not tools_in_user_message is defined %}
        {%- set tools_in_user_message = true %}
    {%- endif %}
    {%- if not date_string is defined %}
        {%- if strftime_now is defined %}
            {%- set date_string = strftime_now("%d %b %Y") %}
        {%- else %}
            {%- set date_string = "26 Jul 2024" %}
        {%- endif %}
    {%- endif %}
    {%- if not tools is defined %}
        {%- set tools = none %}
    {%- endif %}

    {#- This block extracts the system message, so we can slot it into the right place. #}
    {%- if messages[0]['role'] == 'system' %}
        {%- set system_message = messages[0]['content']|trim %}
        {%- set messages = messages[1:] %}
    {%- else %}
        {%- set system_message = "" %}
    {%- endif %}

    {#- System message #}
    {{- "<|start_header_id|>system<|end_header_id|>\n\n" }}
    {%- if tools is not none %}
        {{- "Environment: ipython\n" }}
    {%- endif %}
    {{- "Cutting Knowledge Date: December 2023\n" }}
    {{- "Today Date: " + date_string + "\n\n" }}
    {%- if tools is not none and not tools_in_user_message %}
        {{- "You have access to the following functions. To call a function, please respond with JSON for a function call." }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
    {%- endif %}
    {{- system_message }}
    {{- "<|eot_id|>" }}

    {#- Custom tools are passed in a user message with some extra guidance #}
    {%- if tools_in_user_message and not tools is none %}
        {#- Extract the first user message so we can plug it in here #}
        {%- if messages | length != 0 %}
            {%- set first_user_message = messages[0]['content']|trim %}
            {%- set messages = messages[1:] %}
        {%- else %}
            {{- raise_exception("Cannot put tools in the first user message when there's no first user message!") }}
    {%- endif %}
        {{- '<|start_header_id|>user<|end_header_id|>\n\n' -}}
        {{- "Given the following functions, please respond with a JSON for a function call " }}
        {{- "with its proper arguments that best answers the given prompt.\n\n" }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
        {{- first_user_message + "<|eot_id|>"}}
    {%- endif %}

    {%- for message in messages %}
        {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}
            {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\n\n'+ message['content'] | trim + '<|eot_id|>' }}
        {%- elif 'tool_calls' in message %}
            {%- if not message.tool_calls|length == 1 %}
                {{- raise_exception("This model only supports single tool-calls at once!") }}
            {%- endif %}
            {%- set tool_call = message.tool_calls[0].function %}
            {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
            {{- '{"name": "' + tool_call.name + '", ' }}
            {{- '"parameters": ' }}
            {{- tool_call.arguments | tojson }}
            {{- "}" }}
            {{- "<|eot_id|>" }}
        {%- elif message.role == "tool" or message.role == "ipython" %}
            {{- "<|start_header_id|>ipython<|end_header_id|>\n\n" }}
            {%- if message.content is mapping or message.content is iterable %}
                {{- message.content | tojson }}
            {%- else %}
                {{- message.content }}
            {%- endif %}
            {{- "<|eot_id|>" }}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' }}
    {%- endif %}
- id: lmstudio-community/aya-expanse-32b-GGUF
  base: CohereForAI/aya-expanse-32b
  template: '{{ bos_token }}{% if messages[0][''role''] == ''system'' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0][''content''] %}{% elif false == true %}{% set loop_messages = messages %}{% set system_message = ''You are Aya, a brilliant, sophisticated, multilingual AI-assistant trained to assist human users by providing thorough responses. You are able to interact and respond to questions in 23 languages and you are powered by a multilingual model built by Cohere For AI.'' %}{% else %}{% set loop_messages = messages %}{% set system_message = false %}{% endif %}{% if system_message != false %}{{ ''<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>'' + system_message + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% for message in loop_messages %}{% if (message[''role''] == ''user'') != (loop.index0 % 2 == 0) %}{{ raise_exception(''Conversation roles must alternate user/assistant/user/assistant/...'') }}{% endif %}{% set content = message[''content''] %}{% if message[''role''] == ''user'' %}{{ ''<|START_OF_TURN_TOKEN|><|USER_TOKEN|>'' + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% elif message[''role''] == ''assistant'' %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>''  + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>'' }}{% endif %}'
- id: lmstudio-community/QwQ-32B-Preview-GGUF
  base: Qwen/QwQ-32B-Preview
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Llama-3.3-70B-Instruct-GGUF
  base: meta-llama/Llama-3.3-70B-Instruct
  template: |
    {{- bos_token }}
    {%- if custom_tools is defined %}
        {%- set tools = custom_tools %}
    {%- endif %}
    {%- if not tools_in_user_message is defined %}
        {%- set tools_in_user_message = true %}
    {%- endif %}
    {%- if not date_string is defined %}
        {%- set date_string = "26 Jul 2024" %}
    {%- endif %}
    {%- if not tools is defined %}
        {%- set tools = none %}
    {%- endif %}

    {#- This block extracts the system message, so we can slot it into the right place. #}
    {%- if messages[0]['role'] == 'system' %}
        {%- set system_message = messages[0]['content']|trim %}
        {%- set messages = messages[1:] %}
    {%- else %}
        {%- set system_message = "" %}
    {%- endif %}

    {#- System message + builtin tools #}
    {{- "<|start_header_id|>system<|end_header_id|>\n\n" }}
    {%- if builtin_tools is defined or tools is not none %}
        {{- "Environment: ipython\n" }}
    {%- endif %}
    {%- if builtin_tools is defined %}
        {{- "Tools: " + builtin_tools | reject('equalto', 'code_interpreter') | join(", ") + "\n\n"}}
    {%- endif %}
    {{- "Cutting Knowledge Date: December 2023\n" }}
    {{- "Today Date: " + date_string + "\n\n" }}
    {%- if tools is not none and not tools_in_user_message %}
        {{- "You have access to the following functions. To call a function, please respond with JSON for a function call." }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
    {%- endif %}
    {{- system_message }}
    {{- "<|eot_id|>" }}

    {#- Custom tools are passed in a user message with some extra guidance #}
    {%- if tools_in_user_message and not tools is none %}
        {#- Extract the first user message so we can plug it in here #}
        {%- if messages | length != 0 %}
            {%- set first_user_message = messages[0]['content']|trim %}
            {%- set messages = messages[1:] %}
        {%- else %}
            {{- raise_exception("Cannot put tools in the first user message when there's no first user message!") }}
    {%- endif %}
        {{- '<|start_header_id|>user<|end_header_id|>\n\n' -}}
        {{- "Given the following functions, please respond with a JSON for a function call " }}
        {{- "with its proper arguments that best answers the given prompt.\n\n" }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
        {{- first_user_message + "<|eot_id|>"}}
    {%- endif %}

    {%- for message in messages %}
        {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}
            {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\n\n'+ message['content'] | trim + '<|eot_id|>' }}
        {%- elif 'tool_calls' in message %}
            {%- if not message.tool_calls|length == 1 %}
                {{- raise_exception("This model only supports single tool-calls at once!") }}
            {%- endif %}
            {%- set tool_call = message.tool_calls[0].function %}
            {%- if builtin_tools is defined and tool_call.name in builtin_tools %}
                {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
                {{- "<|python_tag|>" + tool_call.name + ".call(" }}
                {%- for arg_name, arg_val in tool_call.arguments | items %}
                    {{- arg_name + '="' + arg_val + '"' }}
                    {%- if not loop.last %}
                        {{- ", " }}
                    {%- endif %}
                    {%- endfor %}
                {{- ")" }}
            {%- else  %}
                {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
                {{- '{"name": "' + tool_call.name + '", ' }}
                {{- '"parameters": ' }}
                {{- tool_call.arguments | tojson }}
                {{- "}" }}
            {%- endif %}
            {%- if builtin_tools is defined %}
                {#- This means we're in ipython mode #}
                {{- "<|eom_id|>" }}
            {%- else %}
                {{- "<|eot_id|>" }}
            {%- endif %}
        {%- elif message.role == "tool" or message.role == "ipython" %}
            {{- "<|start_header_id|>ipython<|end_header_id|>\n\n" }}
            {%- if message.content is mapping or message.content is iterable %}
                {{- message.content | tojson }}
            {%- else %}
                {{- message.content }}
            {%- endif %}
            {{- "<|eot_id|>" }}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2-VL-7B-Instruct-GGUF
  base: Qwen/Qwen2-VL-7B-Instruct
  template: |-
    {% set image_count = namespace(value=0) %}{% set video_count = namespace(value=0) %}{% for message in messages %}{% if loop.first and message['role'] != 'system' %}<|im_start|>system
    You are a helpful assistant.<|im_end|>
    {% endif %}<|im_start|>{{ message['role'] }}
    {% if message['content'] is string %}{{ message['content'] }}<|im_end|>
    {% else %}{% for content in message['content'] %}{% if content['type'] == 'image' or 'image' in content or 'image_url' in content %}{% set image_count.value = image_count.value + 1 %}{% if add_vision_id %}Picture {{ image_count.value }}: {% endif %}<|vision_start|><|image_pad|><|vision_end|>{% elif content['type'] == 'video' or 'video' in content %}{% set video_count.value = video_count.value + 1 %}{% if add_vision_id %}Video {{ video_count.value }}: {% endif %}<|vision_start|><|video_pad|><|vision_end|>{% elif 'text' in content %}{{ content['text'] }}{% endif %}{% endfor %}<|im_end|>
    {% endif %}{% endfor %}{% if add_generation_prompt %}<|im_start|>assistant
    {% endif %}
- id: lmstudio-community/Falcon3-10B-Instruct-GGUF
  base: tiiuae/Falcon3-10B-Instruct
  template: |-
    {% if tools %}{% for message in messages %}{% if message['role'] == 'system' %}{{ '<|system|>
    ' + message['content'] + '
    You are an expert in composing functions. You are given a question and a set of possible functions. 
    Based on the question, you will need to make one or more function/tool calls to achieve the purpose. 
    If none of the functions can be used, point it out and refuse to answer. 
    If the given question lacks the parameters required by the function, also point it out.

     You have access to the following tools:
    <tools>'  + tools|tojson + '</tools>

    The output MUST strictly adhere to the following format, and NO other text MUST be included.
    The example format is as follows. Please make sure the parameter type is correct. If no function call is needed, please make the tool calls an empty list [].
    <tool_call>[
    {"name": "function_name1", "arguments": {"argument1": "value1", "argument2": "value2"}},
    ... (more tool calls as required)
    ]</tool_call>' }}{% elif message['role'] == 'user' %}{{ '<|user|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'assistant' %}{% if not loop.last %}{{ '<|assistant|>
    ' + message['content'] + eos_token + '
    ' }}{% else %}{{ '<|assistant|>
    ' + message['content'] + eos_token }}{% endif %}{% endif %}{% if loop.last and add_generation_prompt %}{{ '<|assistant|>
    ' }}{% endif %}{% endfor %}{% else %}{% for message in messages %}{% if message['role'] == 'system' %}{{ '<|system|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'user' %}{{ '<|user|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'assistant' %}{% if not loop.last %}{{ '<|assistant|>
    ' + message['content'] + eos_token + '
    ' }}{% else %}{{ '<|assistant|>
    ' + message['content'] + eos_token }}{% endif %}{% endif %}{% if loop.last and add_generation_prompt %}{{ '<|assistant|>
    ' }}{% endif %}{% endfor %}{% endif %}
- id: lmstudio-community/Falcon3-7B-Instruct-GGUF
  base: tiiuae/Falcon3-7B-Instruct
  template: |-
    {% if tools %}{% for message in messages %}{% if message['role'] == 'system' %}{{ '<|system|>
    ' + message['content'] + '
    You are an expert in composing functions. You are given a question and a set of possible functions. 
    Based on the question, you will need to make one or more function/tool calls to achieve the purpose. 
    If none of the functions can be used, point it out and refuse to answer. 
    If the given question lacks the parameters required by the function, also point it out.

     You have access to the following tools:
    <tools>'  + tools|tojson + '</tools>

    The output MUST strictly adhere to the following format, and NO other text MUST be included.
    The example format is as follows. Please make sure the parameter type is correct. If no function call is needed, please make the tool calls an empty list [].
    <tool_call>[
    {"name": "function_name1", "arguments": {"argument1": "value1", "argument2": "value2"}},
    ... (more tool calls as required)
    ]</tool_call>' }}{% elif message['role'] == 'user' %}{{ '<|user|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'assistant' %}{% if not loop.last %}{{ '<|assistant|>
    ' + message['content'] + eos_token + '
    ' }}{% else %}{{ '<|assistant|>
    ' + message['content'] + eos_token }}{% endif %}{% endif %}{% if loop.last and add_generation_prompt %}{{ '<|assistant|>
    ' }}{% endif %}{% endfor %}{% else %}{% for message in messages %}{% if message['role'] == 'system' %}{{ '<|system|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'user' %}{{ '<|user|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'assistant' %}{% if not loop.last %}{{ '<|assistant|>
    ' + message['content'] + eos_token + '
    ' }}{% else %}{{ '<|assistant|>
    ' + message['content'] + eos_token }}{% endif %}{% endif %}{% if loop.last and add_generation_prompt %}{{ '<|assistant|>
    ' }}{% endif %}{% endfor %}{% endif %}
- id: lmstudio-community/granite-3.1-8b-instruct-GGUF
  base: ibm-granite/granite-3.1-8b-instruct
  template: '{%- if messages[0][''role''] == ''system'' %}{%- set system_message = messages[0][''content''] %}{%- set loop_messages = messages[1:] %}{%- else %}{%- set system_message = "Knowledge Cutoff Date: April 2024. You are Granite, developed by IBM." %}{%- if tools and documents %}{%- set system_message = system_message + " You are a helpful AI assistant with access to the following tools. When a tool is required to answer the user''s query, respond with <|tool_call|> followed by a JSON list of tools used. If a tool does not exist in the provided list of tools, notify the user that you do not have the ability to fulfill the request. Write the response to the user''s input by strictly aligning with the facts in the provided documents. If the information needed to answer the question is not available in the documents, inform the user that the question cannot be answered based on the available data." %}{%- elif tools %}{%- set system_message = system_message + " You are a helpful AI assistant with access to the following tools. When a tool is required to answer the user''s query, respond with <|tool_call|> followed by a JSON list of tools used. If a tool does not exist in the provided list of tools, notify the user that you do not have the ability to fulfill the request." %}{%- elif documents %}{%- set system_message = system_message + " Write the response to the user''s input by strictly aligning with the facts in the provided documents. If the information needed to answer the question is not available in the documents, inform the user that the question cannot be answered based on the available data." %}{%- else %}{%- set system_message = system_message + " You are a helpful AI assistant." %}{%- endif %}{%- if controls and ''citations'' in controls and documents %}{%- set system_message = system_message + '' In your response, use the symbols <co> and </co> to indicate when a fact comes from a document in the search result, e.g <co>0</co> for a fact from document 0. Afterwards, list all the citations with their corresponding documents in an ordered list.'' %}{%- endif %}{%- if controls and ''hallucinations'' in controls and documents %}{%- set system_message = system_message + '' Finally, after the response is written, include a numbered list of sentences from the response that are potentially hallucinated and not based in the documents.'' %}{%- endif %}{%- set loop_messages = messages %}{%- endif %}{{- ''<|start_of_role|>system<|end_of_role|>'' + system_message + ''<|end_of_text|> '' }}{%- if tools %}{{- ''<|start_of_role|>tools<|end_of_role|>'' }}{{- tools | tojson(indent=4) }}{{- ''<|end_of_text|> '' }}{%- endif %}{%- if documents %}{{- ''<|start_of_role|>documents<|end_of_role|>'' }}{%- for document in documents %}{{- ''Document '' + loop.index0 | string + '' '' }}{{- document[''text''] }}{%- if not loop.last %}{{- '' ''}}{%- endif%}{%- endfor %}{{- ''<|end_of_text|> '' }}{%- endif %}{%- for message in loop_messages %}{{- ''<|start_of_role|>'' + message[''role''] + ''<|end_of_role|>'' + message[''content''] + ''<|end_of_text|> '' }}{%- if loop.last and add_generation_prompt %}{{- ''<|start_of_role|>assistant'' }}{%- if controls %}{{- '' '' + controls | tojson()}}{%- endif %}{{- ''<|end_of_role|>'' }}{%- endif %}{%- endfor %}'
- id: lmstudio-community/QVQ-72B-Preview-GGUF
  base: Qwen/QVQ-72B-Preview
  template: |-
    {% set image_count = namespace(value=0) %}{% set video_count = namespace(value=0) %}{% for message in messages %}{% if loop.first and message['role'] != 'system' %}<|im_start|>system
    You are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>
    {% endif %}<|im_start|>{{ message['role'] }}
    {% if message['content'] is string %}{{ message['content'] }}<|im_end|>
    {% else %}{% for content in message['content'] %}{% if content['type'] == 'image' or 'image' in content or 'image_url' in content %}{% set image_count.value = image_count.value + 1 %}{% if add_vision_id %}Picture {{ image_count.value }}: {% endif %}<|vision_start|><|image_pad|><|vision_end|>{% elif content['type'] == 'video' or 'video' in content %}{% set video_count.value = video_count.value + 1 %}{% if add_vision_id %}Video {{ video_count.value }}: {% endif %}<|vision_start|><|video_pad|><|vision_end|>{% elif 'text' in content %}{{ content['text'] }}{% endif %}{% endfor %}<|im_end|>
    {% endif %}{% endfor %}{% if add_generation_prompt %}<|im_start|>assistant
    {% endif %}
- id: lmstudio-community/Phi-3.5-MoE-instruct-GGUF
  base: microsoft/Phi-3.5-MoE-instruct
  template: |-
    {% for message in messages %}{% if message['role'] == 'system' and message['content'] %}{{'<|system|>
    ' + message['content'] + '<|end|>
    '}}{% elif message['role'] == 'user' %}{{'<|user|>
    ' + message['content'] + '<|end|>
    '}}{% elif message['role'] == 'assistant' %}{{'<|assistant|>
    ' + message['content'] + '<|end|>
    '}}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ '<|assistant|>
    ' }}{% else %}{{ eos_token }}{% endif %}
- id: lmstudio-community/internlm3-8b-instruct-GGUF
  base: internlm/internlm3-8b-instruct
  template: |-
    {{ bos_token }}{% for message in messages %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/DeepSeek-R1-Distill-Llama-70B-GGUF
  base: deepseek-ai/DeepSeek-R1-Distill-Llama-70B
  template: '{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='''') %}{%- for message in messages %}{%- if message[''role''] == ''system'' %}{% set ns.system_prompt = message[''content''] %}{%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}{%- if message[''role''] == ''user'' %}{%- set ns.is_tool = false -%}{{''<｜User｜>'' + message[''content'']}}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is none %}{%- set ns.is_tool = false -%}{%- for tool in message[''tool_calls'']%}{%- if not ns.is_first %}{{''<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{%- set ns.is_first = true -%}{%- else %}{{''\n'' + ''<｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{{''<｜tool▁calls▁end｜><｜end▁of▁sentence｜>''}}{%- endif %}{%- endfor %}{%- endif %}{%- if message[''role''] == ''assistant'' and message[''content''] is not none %}{%- if ns.is_tool %}{{''<｜tool▁outputs▁end｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}{%- set ns.is_tool = false -%}{%- else %}{% set content = message[''content''] %}{% if ''</think>'' in content %}{% set content = content.split(''</think>'')[-1] %}{% endif %}{{''<｜Assistant｜>'' + content + ''<｜end▁of▁sentence｜>''}}{%- endif %}{%- endif %}{%- if message[''role''] == ''tool'' %}{%- set ns.is_tool = true -%}{%- if ns.is_output_first %}{{''<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- set ns.is_output_first = false %}{%- else %}{{''\n<｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}{%- endif %}{%- endif %}{%- endfor -%}{% if ns.is_tool %}{{''<｜tool▁outputs▁end｜>''}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{''<｜Assistant｜>''}}{% endif %}'
- id: lmstudio-community/UI-TARS-2B-SFT-GGUF
  base: bytedance-research/UI-TARS-2B-SFT
  template: |-
    {% set image_count = namespace(value=0) %}{% set video_count = namespace(value=0) %}{% for message in messages %}{% if loop.first and message['role'] != 'system' %}<|im_start|>system
    You are a helpful assistant.<|im_end|>
    {% endif %}<|im_start|>{{ message['role'] }}
    {% if message['content'] is string %}{{ message['content'] }}<|im_end|>
    {% else %}{% for content in message['content'] %}{% if content['type'] == 'image' or 'image' in content or 'image_url' in content %}{% set image_count.value = image_count.value + 1 %}{% if add_vision_id %}Picture {{ image_count.value }}: {% endif %}<|vision_start|><|image_pad|><|vision_end|>{% elif content['type'] == 'video' or 'video' in content %}{% set video_count.value = video_count.value + 1 %}{% if add_vision_id %}Video {{ video_count.value }}: {% endif %}<|vision_start|><|video_pad|><|vision_end|>{% elif 'text' in content %}{{ content['text'] }}{% endif %}{% endfor %}<|im_end|>
    {% endif %}{% endfor %}{% if add_generation_prompt %}<|im_start|>assistant
    {% endif %}
- id: lmstudio-community/UI-TARS-72B-DPO-GGUF
  base: bytedance-research/UI-TARS-72B-DPO
  template: |-
    {% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% for message in messages %}{{ message['role'].title() + ': ' + message['content'] | trim + eos_token + '
    ' }}{% endfor %}{% if add_generation_prompt %}{{ 'Assistant: ' }}{% endif %}
- id: lmstudio-community/MiniCPM-o-2_6-GGUF
  base: openbmb/MiniCPM-o-2_6
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Meta-Llama-3-8B-Instruct-GGUF
  base: meta-llama/Meta-Llama-3-8B-Instruct
  template: |-
    {% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '<|start_header_id|>' + message['role'] + '<|end_header_id|>

    '+ message['content'] | trim + '<|eot_id|>' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{{ '<|start_header_id|>assistant<|end_header_id|>

    ' }}
- id: lmstudio-community/Meta-Llama-3-70B-Instruct-GGUF
  base: meta-llama/Meta-Llama-3-70B-Instruct
  template: |-
    {% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '<|start_header_id|>' + message['role'] + '<|end_header_id|>

    '+ message['content'] | trim + '<|eot_id|>' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{{ '<|start_header_id|>assistant<|end_header_id|>

    ' }}
- id: lmstudio-community/starcoder2-15b-instruct-v0.1-GGUF
  base: bigcode/starcoder2-15b
  template: |-
    {{bos_token}}{{'You are an exceptionally intelligent coding assistant that consistently delivers accurate and reliable responses to user instructions.

    '}}
    {%- for message in messages %}
        {%- if message['role'] == 'system' %}
            {{ raise_exception('System messages are not allowed in this template.') }}
        {%- else %}
            {%- if message['role'] == 'user' %}
    {{'### Instruction
    ' + message['content'] + '

    '}}
            {%- else %}
    {{'### Response
    ' + message['content'] + eos_token + '

    '}}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {{'### Response
    '}}
- id: lmstudio-community/Meta-Llama-3-8B-Instruct-BPE-fix-GGUF
  base: meta-llama/Meta-Llama-3-8B-Instruct
  template: |-
    {% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '<|start_header_id|>' + message['role'] + '<|end_header_id|>

    '+ message['content'] | trim + '<|eot_id|>' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{% if add_generation_prompt %}{{ '<|start_header_id|>assistant<|end_header_id|>

    ' }}{% endif %}
- id: lmstudio-community/Meta-Llama-3-70B-Instruct-BPE-fix-GGUF
  base: meta-llama/Meta-Llama-3-70B-Instruct
  template: |-
    {% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '<|start_header_id|>' + message['role'] + '<|end_header_id|>

    '+ message['content'] | trim + '<|eot_id|>' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{% if add_generation_prompt %}{{ '<|start_header_id|>assistant<|end_header_id|>

    ' }}{% endif %}
- id: lmstudio-community/codegemma-1.1-7b-it-GGUF
  base: google/codegemma-1.1-7b-it
  template: |-
    {{ bos_token }}{% if messages[0]['role'] == 'system' %}{{ raise_exception('System role not supported') }}{% endif %}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if (message['role'] == 'assistant') %}{% set role = 'model' %}{% else %}{% set role = message['role'] %}{% endif %}{{ '<start_of_turn>' + role + '
    ' + message['content'] | trim + '<end_of_turn>
    ' }}{% endfor %}{% if add_generation_prompt %}{{'<start_of_turn>model
    '}}{% endif %}
- id: lmstudio-community/Llama3-ChatQA-1.5-8B-GGUF
  base: nvidia/Llama3-ChatQA-1.5-8B
  template: |-
    {% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '<|start_header_id|>' + message['role'] + '<|end_header_id|>

    '+ message['content'] | trim + '<|eot_id|>' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{% if add_generation_prompt %}{{ '<|start_header_id|>assistant<|end_header_id|>

    ' }}{% endif %}
- id: lmstudio-community/Meta-Llama-3-120B-Instruct-GGUF
  base:
    - mlabonne/Meta-Llama-3-120B-Instruct
  template: |-
    {% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '<|start_header_id|>' + message['role'] + '<|end_header_id|>

    '+ message['content'] | trim + '<|eot_id|>' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{% if add_generation_prompt %}{{ '<|start_header_id|>assistant<|end_header_id|>

    ' }}{% endif %}
- id: lmstudio-community/Yi-1.5-34B-Chat-GGUF
  base: 01-ai/Yi-1.5-34B-Chat
  template: '{% if messages[0][''role''] == ''system'' %}{% set system_message = messages[0][''content''] %}{% endif %}{% if system_message is defined %}{{ system_message }}{% endif %}{% for message in messages %}{% set content = message[''content''] %}{% if message[''role''] == ''user'' %}{{ ''<|im_start|>user\n'' + content + ''<|im_end|>\n<|im_start|>assistant\n'' }}{% elif message[''role''] == ''assistant'' %}{{ content + ''<|im_end|>'' + ''\n'' }}{% endif %}{% endfor %}'
- id: lmstudio-community/Yi-1.5-9B-Chat-GGUF
  base: 01-ai/Yi-1.5-9B-Chat
  template: '{% if messages[0][''role''] == ''system'' %}{% set system_message = messages[0][''content''] %}{% endif %}{% if system_message is defined %}{{ system_message }}{% endif %}{% for message in messages %}{% set content = message[''content''] %}{% if message[''role''] == ''user'' %}{{ ''<|im_start|>user\n'' + content + ''<|im_end|>\n<|im_start|>assistant\n'' }}{% elif message[''role''] == ''assistant'' %}{{ content + ''<|im_end|>'' + ''\n'' }}{% endif %}{% endfor %}'
- id: lmstudio-community/Yi-1.5-6B-Chat-GGUF
  base: 01-ai/Yi-1.5-6B-Chat
  template: '{% if messages[0][''role''] == ''system'' %}{% set system_message = messages[0][''content''] %}{% endif %}{% if system_message is defined %}{{ system_message }}{% endif %}{% for message in messages %}{% set content = message[''content''] %}{% if message[''role''] == ''user'' %}{{ ''<|im_start|>user\n'' + content + ''<|im_end|>\n<|im_start|>assistant\n'' }}{% elif message[''role''] == ''assistant'' %}{{ content + ''<|im_end|>'' + ''\n'' }}{% endif %}{% endfor %}'
- id: lmstudio-community/aya-23-8B-GGUF
  base: CohereForAI/aya-23-8B
  template: '{{ bos_token }}{% if messages[0][''role''] == ''system'' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0][''content''] %}{% elif false == true %}{% set loop_messages = messages %}{% set system_message = ''You are Command-R, a brilliant, sophisticated, AI-assistant trained to assist human users by providing thorough responses. You are trained by Cohere.'' %}{% else %}{% set loop_messages = messages %}{% set system_message = false %}{% endif %}{% if system_message != false %}{{ ''<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>'' + system_message + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% for message in loop_messages %}{% if (message[''role''] == ''user'') != (loop.index0 % 2 == 0) %}{{ raise_exception(''Conversation roles must alternate user/assistant/user/assistant/...'') }}{% endif %}{% set content = message[''content''] %}{% if message[''role''] == ''user'' %}{{ ''<|START_OF_TURN_TOKEN|><|USER_TOKEN|>'' + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% elif message[''role''] == ''assistant'' %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>''  + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>'' }}{% endif %}'
- id: lmstudio-community/aya-23-35B-GGUF
  base: CohereForAI/aya-23-35B
  template: '{{ bos_token }}{% if messages[0][''role''] == ''system'' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0][''content''] %}{% elif false == true %}{% set loop_messages = messages %}{% set system_message = ''You are Command-R, a brilliant, sophisticated, AI-assistant trained to assist human users by providing thorough responses. You are trained by Cohere.'' %}{% else %}{% set loop_messages = messages %}{% set system_message = false %}{% endif %}{% if system_message != false %}{{ ''<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>'' + system_message + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% for message in loop_messages %}{% if (message[''role''] == ''user'') != (loop.index0 % 2 == 0) %}{{ raise_exception(''Conversation roles must alternate user/assistant/user/assistant/...'') }}{% endif %}{% set content = message[''content''] %}{% if message[''role''] == ''user'' %}{{ ''<|START_OF_TURN_TOKEN|><|USER_TOKEN|>'' + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% elif message[''role''] == ''assistant'' %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>''  + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>'' }}{% endif %}'
- id: lmstudio-community/openchat-3.6-8b-20240522-GGUF
  base: openchat/openchat-3.6-8b-20240522
  template: |-
    {{ bos_token }}{% for message in messages %}{% if message['role'] in ['user', 'assistant'] %}{% set content = '<|start_header_id|>GPT4 Correct ' + message['role'].title() + '<|end_header_id|>

    ' + message['content'] | trim + '<|eot_id|>' %}{% elif message['role'] == 'system' %}{% set content = '<|start_header_id|>System<|end_header_id|>

    ' + message['content'] | trim + '<|eot_id|>' %}{% else %}{{ raise_exception('Only user, assistant and system roles are supported!') }}{% endif %}{{ content }}{% endfor %}{% if add_generation_prompt %}{{ '<|start_header_id|>GPT4 Correct Assistant<|end_header_id|>

    ' }}{% endif %}
- id: lmstudio-community/AlchemistCoder-DS-6.7B-GGUF
  base: internlm/AlchemistCoder-DS-6.7B
  template: |-
    {% if not add_generation_prompt is defined %}
    {% set add_generation_prompt = false %}
    {% endif %}
    {%- set ns = namespace(found=false) -%}
    {%- for message in messages -%}
        {%- if message['role'] == 'system' -%}
            {%- set ns.found = true -%}
        {%- endif -%}
    {%- endfor -%}
    {{bos_token}}{%- if not ns.found -%}
    {{'You are an AI programming assistant, utilizing the Deepseek Coder model, developed by Deepseek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer\n'}}
    {%- endif %}
    {%- for message in messages %}
        {%- if message['role'] == 'system' %}
    {{ message['content'] }}
        {%- else %}
            {%- if message['role'] == 'user' %}
    {{'### Instruction:\n' + message['content'] + '\n'}}
            {%- else %}
    {{'### Response:\n' + message['content'] + '\n<|EOT|>\n'}}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {% if add_generation_prompt %}
    {{'### Response:'}}
    {% endif %}
- id: lmstudio-community/internlm2-math-plus-7b-GGUF
  base: internlm/internlm2-math-plus-7b
  template: |-
    {{ bos_token }}{% for message in messages %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/DiscoPOP-zephyr-7b-gemma-GGUF
  base: SakanaAI/DiscoPOP-zephyr-7b-gemma
  template: |-
    {% if messages[0]['role'] == 'user' or messages[0]['role'] == 'system' %}{{ bos_token }}{% endif %}{% for message in messages %}{{ '<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    ' }}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% elif messages[-1]['role'] == 'assistant' %}{{ eos_token }}{% endif %}
- id: lmstudio-community/Qwen2-500M-Instruct-GGUF
  base: Qwen/Qwen2-0.5B-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and messages[0]['role'] != 'system' %}{{ '<|im_start|>system
    You are a helpful assistant.<|im_end|>
    ' }}{% endif %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/gemma-2-27b-it-GGUF
  base: google/gemma-2-27b-it
  template: |-
    {{ bos_token }}{% if messages[0]['role'] == 'system' %}{{ raise_exception('System role not supported') }}{% endif %}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if (message['role'] == 'assistant') %}{% set role = 'model' %}{% else %}{% set role = message['role'] %}{% endif %}{{ '<start_of_turn>' + role + '
    ' + message['content'] | trim + '<end_of_turn>
    ' }}{% endfor %}{% if add_generation_prompt %}{{'<start_of_turn>model
    '}}{% endif %}
- id: lmstudio-community/Phi-3.1-mini-4k-instruct-GGUF
  base: microsoft/Phi-3-mini-4k-instruct
  template: |-
    {% for message in messages %}{% if message['role'] == 'system' %}{{'<|system|>
    ' + message['content'] + '<|end|>
    '}}{% elif message['role'] == 'user' %}{{'<|user|>
    ' + message['content'] + '<|end|>
    '}}{% elif message['role'] == 'assistant' %}{{'<|assistant|>
    ' + message['content'] + '<|end|>
    '}}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ '<|assistant|>
    ' }}{% else %}{{ eos_token }}{% endif %}
- id: lmstudio-community/Llama-3-Groq-8B-Tool-Use-GGUF
  base: Groq/Llama-3-Groq-8B-Tool-Use
  template: |-
    {% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '<|start_header_id|>' + message['role'] + '<|end_header_id|>

    '+ message['content'] | trim + '<|eot_id|>' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{% if add_generation_prompt %}{{ '<|start_header_id|>assistant<|end_header_id|>

    ' }}{% endif %}
- id: lmstudio-community/Llama-3-Groq-70B-Tool-Use-GGUF
  base: Groq/Llama-3-Groq-8B-Tool-Use
  template: |-
    {% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '<|start_header_id|>' + message['role'] + '<|end_header_id|>

    '+ message['content'] | trim + '<|eot_id|>' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{% if add_generation_prompt %}{{ '<|start_header_id|>assistant<|end_header_id|>

    ' }}{% endif %}
- id: lmstudio-community/Athene-70B-GGUF
  base: Nexusflow/Athene-70B
  template: |-
    {% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '<|start_header_id|>' + message['role'] + '<|end_header_id|>

    '+ message['content'] | trim + '<|eot_id|>' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{% if add_generation_prompt %}{{ '<|start_header_id|>assistant<|end_header_id|>

    ' }}{% endif %}
- id: lmstudio-community/Meta-Llama-3.1-70B-Instruct-GGUF
  base: meta-llama/Meta-Llama-3.1-70B-Instruct
  template: |
    {{- bos_token }}
    {%- if custom_tools is defined %}
        {%- set tools = custom_tools %}
    {%- endif %}
    {%- if not tools_in_user_message is defined %}
        {%- set tools_in_user_message = true %}
    {%- endif %}
    {%- if not date_string is defined %}
        {%- set date_string = "26 Jul 2024" %}
    {%- endif %}

    {#- This block extracts the system message, so we can slot it into the right place. #}
    {%- if messages[0]['role'] == 'system' %}
        {%- set system_message = messages[0]['content']|trim %}
        {%- set messages = messages[1:] %}
    {%- else %}
        {%- set system_message = "" %}
    {%- endif %}

    {#- System message + builtin tools #}
    {{- "<|start_header_id|>system<|end_header_id|>\n\n" }}
    {%- if builtin_tools is defined or tools is not none %}
        {{- "Environment: ipython\n" }}
    {%- endif %}
    {%- if builtin_tools is defined %}
        {{- "Tools: " + builtin_tools | reject('equalto', 'code_interpreter') | join(", ") + "\n\n"}}
    {%- endif %}
    {{- "Cutting Knowledge Date: December 2023\n" }}
    {{- "Today Date: " + date_string + "\n\n" }}
    {%- if tools is not none and not tools_in_user_message %}
        {{- "You have access to the following functions. To call a function, please respond with JSON for a function call." }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
    {%- endif %}
    {{- system_message }}
    {{- "<|eot_id|>" }}

    {#- Custom tools are passed in a user message with some extra guidance #}
    {%- if tools_in_user_message and not tools is none %}
        {#- Extract the first user message so we can plug it in here #}
        {%- if messages | length != 0 %}
            {%- set first_user_message = messages[0]['content']|trim %}
            {%- set messages = messages[1:] %}
        {%- else %}
            {{- raise_exception("Cannot put tools in the first user message when there's no first user message!") }}
    {%- endif %}
        {{- '<|start_header_id|>user<|end_header_id|>\n\n' -}}
        {{- "Given the following functions, please respond with a JSON for a function call " }}
        {{- "with its proper arguments that best answers the given prompt.\n\n" }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
        {{- first_user_message + "<|eot_id|>"}}
    {%- endif %}

    {%- for message in messages %}
        {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}
            {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\n\n'+ message['content'] | trim + '<|eot_id|>' }}
        {%- elif 'tool_calls' in message %}
            {%- if not message.tool_calls|length == 1 %}
                {{- raise_exception("This model only supports single tool-calls at once!") }}
            {%- endif %}
            {%- set tool_call = message.tool_calls[0].function %}
            {%- if builtin_tools is defined and tool_call.name in builtin_tools %}
                {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
                {{- "<|python_tag|>" + tool_call.name + ".call(" }}
                {%- for arg_name, arg_val in tool_call.arguments | items %}
                    {{- arg_name + '="' + arg_val + '"' }}
                    {%- if not loop.last %}
                        {{- ", " }}
                    {%- endif %}
                    {%- endfor %}
                {{- ")" }}
            {%- else  %}
                {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
                {{- '{"name": "' + tool_call.name + '", ' }}
                {{- '"parameters": ' }}
                {{- tool_call.arguments | tojson }}
                {{- "}" }}
            {%- endif %}
            {%- if builtin_tools is defined %}
                {#- This means we're in ipython mode #}
                {{- "<|eom_id|>" }}
            {%- else %}
                {{- "<|eot_id|>" }}
            {%- endif %}
        {%- elif message.role == "tool" or message.role == "ipython" %}
            {{- "<|start_header_id|>ipython<|end_header_id|>\n\n" }}
            {%- if message.content is mapping or message.content is iterable %}
                {{- message.content | tojson }}
            {%- else %}
                {{- message.content }}
            {%- endif %}
            {{- "<|eot_id|>" }}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' }}
    {%- endif %}
- id: lmstudio-community/internlm2_5-20b-chat-GGUF
  base: internlm/internlm2_5-20b-chat
  template: |-
    {{ bos_token }}{% for message in messages %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/Qwen2-Math-1.5B-Instruct-GGUF
  base: Qwen/Qwen2-Math-1.5B-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and messages[0]['role'] != 'system' %}{{ '<|im_start|>system
    You are a helpful assistant.<|im_end|>
    ' }}{% endif %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/Qwen2-Math-7B-Instruct-GGUF
  base: Qwen/Qwen2-Math-7B-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and messages[0]['role'] != 'system' %}{{ '<|im_start|>system
    You are a helpful assistant.<|im_end|>
    ' }}{% endif %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/Qwen2-Math-72B-Instruct-GGUF
  base: Qwen/Qwen2-Math-72B-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and messages[0]['role'] != 'system' %}{{ '<|im_start|>system
    You are a helpful assistant.<|im_end|>
    ' }}{% endif %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/internlm2_5-1_8b-chat-GGUF
  base: internlm/internlm2_5-1_8b-chat
  template: |-
    {{ bos_token }}{% for message in messages %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/MiniCPM-V-2_6-GGUF
  base: openbmb/MiniCPM-V-2_6
  template: |-
    {% for message in messages %}{% if loop.first and messages[0]['role'] != 'system' %}{{ '<|im_start|>system
    You are a helpful assistant.<|im_end|>
    ' }}{% endif %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/xLAM-8x7b-r-GGUF
  base: Salesforce/xLAM-8x7b-r
  template: |
    {%- if messages[0]['role'] == 'system' %}
        {%- set system_message = messages[0]['content'] %}
        {%- set loop_messages = messages[1:] %}
    {%- else %}
        {%- set loop_messages = messages %}
    {%- endif %}

    {{- bos_token }}
    {%- for message in loop_messages %}
        {%- if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}
            {{- raise_exception('After the optional system message, conversation roles must alternate user/assistant/user/assistant/...') }}
        {%- endif %}
        {%- if message['role'] == 'user' %}
            {%- if loop.first and system_message is defined %}
                {{- ' [INST] ' + system_message + '\n\n' + message['content'] + ' [/INST]' }}
            {%- else %}
                {{- ' [INST] ' + message['content'] + ' [/INST]' }}
            {%- endif %}
        {%- elif message['role'] == 'assistant' %}
            {{- ' ' + message['content'] + eos_token}}
        {%- else %}
            {{- raise_exception('Only user and assistant roles are supported, with the exception of an initial optional system message!') }}
        {%- endif %}
    {%- endfor %}
- id: lmstudio-community/c4ai-command-r-08-2024-GGUF
  base: CohereForAI/c4ai-command-r-08-2024
  template: '{{ bos_token }}{% if messages[0][''role''] == ''system'' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0][''content''] %}{% elif false == true %}{% set loop_messages = messages %}{% set system_message = ''You are a large language model called Command R built by the company Cohere. You act as a brilliant, sophisticated, AI-assistant chatbot trained to assist human users by providing thorough responses.'' %}{% else %}{% set loop_messages = messages %}{% set system_message = false %}{% endif %}{% if system_message != false %}{{ ''<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>'' + system_message + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% for message in loop_messages %}{% if (message[''role''] == ''user'') != (loop.index0 % 2 == 0) %}{{ raise_exception(''Conversation roles must alternate user/assistant/user/assistant/...'') }}{% endif %}{% set content = message[''content''] %}{% if message[''role''] == ''user'' %}{{ ''<|START_OF_TURN_TOKEN|><|USER_TOKEN|>'' + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% elif message[''role''] == ''assistant'' %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>''  + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>'' }}{% endif %}'
- id: lmstudio-community/c4ai-command-r-plus-08-2024-GGUF
  base: CohereForAI/c4ai-command-r-plus-08-2024
  template: '{{ bos_token }}{% if messages[0][''role''] == ''system'' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0][''content''] %}{% elif false == true %}{% set loop_messages = messages %}{% set system_message = ''You are a large language model called Command R+ built by the company Cohere. You act as a brilliant, sophisticated, AI-assistant chatbot trained to assist human users by providing thorough responses.'' %}{% else %}{% set loop_messages = messages %}{% set system_message = false %}{% endif %}{% if system_message != false %}{{ ''<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>'' + system_message + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% for message in loop_messages %}{% if (message[''role''] == ''user'') != (loop.index0 % 2 == 0) %}{{ raise_exception(''Conversation roles must alternate user/assistant/user/assistant/...'') }}{% endif %}{% set content = message[''content''] %}{% if message[''role''] == ''user'' %}{{ ''<|START_OF_TURN_TOKEN|><|USER_TOKEN|>'' + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% elif message[''role''] == ''assistant'' %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>''  + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>'' }}{% endif %}'
- id: lmstudio-community/Yi-Coder-9B-Chat-GGUF
  base: 01-ai/Yi-Coder-9B-Chat
  template: |-
    {% if messages[0]['role'] == 'system' %}{% set system_message = messages[0]['content'] %}{% endif %}{% if system_message is defined %}{{ '<|im_start|>system
    ' + system_message + '<|im_end|>
    ' }}{% endif %}{% for message in messages %}{% set content = message['content'] %}{% if message['role'] == 'user' %}{{ '<|im_start|>user
    ' + content + '<|im_end|>
    <|im_start|>assistant
    ' }}{% elif message['role'] == 'assistant' %}{{ content + '<|im_end|>' + '
    ' }}{% endif %}{% endfor %}
- id: lmstudio-community/Yi-Coder-1.5B-Chat-GGUF
  base: 01-ai/Yi-Coder-1.5B-Chat
  template: |-
    {% if messages[0]['role'] == 'system' %}{% set system_message = messages[0]['content'] %}{% endif %}{% if system_message is defined %}{{ '<|im_start|>system
    ' + system_message + '<|im_end|>
    ' }}{% endif %}{% for message in messages %}{% set content = message['content'] %}{% if message['role'] == 'user' %}{{ '<|im_start|>user
    ' + content + '<|im_end|>
    <|im_start|>assistant
    ' }}{% elif message['role'] == 'assistant' %}{{ content + '<|im_end|>' + '
    ' }}{% endif %}{% endfor %}
- id: lmstudio-community/DeepSeek-V2.5-GGUF
  base: deepseek-ai/DeepSeek-V2.5
  template: '{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='''') %}{%- for message in messages %}    {%- if message[''role''] == ''system'' %}        {% set ns.system_prompt = message[''content''] %}    {%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}    {%- if message[''role''] == ''user'' %}    {%- set ns.is_tool = false -%}{{''<｜User｜>'' + message[''content'']}}    {%- endif %}    {%- if message[''role''] == ''assistant'' and message[''content''] is none %}        {%- set ns.is_tool = false -%}        {%- for tool in message[''tool_calls'']%}            {%- if not ns.is_first %}{{''<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}            {%- set ns.is_first = true -%}            {%- else %}{{''\n'' + ''<｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{{''<｜tool▁calls▁end｜><｜end▁of▁sentence｜>''}}                   {%- endif %}        {%- endfor %}    {%- endif %}    {%- if message[''role''] == ''assistant'' and message[''content''] is not none %}        {%- if ns.is_tool %}{{''<｜tool▁outputs▁end｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}        {%- set ns.is_tool = false -%}        {%- else %}{{''<｜Assistant｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}        {%- endif %}    {%- endif %}    {%- if message[''role''] == ''tool'' %}        {%- set ns.is_tool = true -%}        {%- if ns.is_output_first %}{{''<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}        {%- set ns.is_output_first = false %}        {%- else %}{{''\n<｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}        {%- endif %}    {%- endif %}{%- endfor -%}{% if ns.is_tool %}{{''<｜tool▁outputs▁end｜>''}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{''<｜Assistant｜>''}}{% endif %}'
- id: lmstudio-community/DeepSeek-Coder-V2-Instruct-0724-GGUF
  base: deepseek-ai/DeepSeek-Coder-V2-Instruct-0724
  template: '{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='''') %}{%- for message in messages %}    {%- if message[''role''] == ''system'' %}        {% set ns.system_prompt = message[''content''] %}    {%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}    {%- if message[''role''] == ''user'' %}    {%- set ns.is_tool = false -%}{{''<｜User｜>'' + message[''content'']}}    {%- endif %}    {%- if message[''role''] == ''assistant'' and message[''content''] is none %}        {%- set ns.is_tool = false -%}        {%- for tool in message[''tool_calls'']%}            {%- if not ns.is_first %}{{''<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}            {%- set ns.is_first = true -%}            {%- else %}{{''\n'' + ''<｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{{''<｜tool▁calls▁end｜><｜end▁of▁sentence｜>''}}                   {%- endif %}        {%- endfor %}    {%- endif %}    {%- if message[''role''] == ''assistant'' and message[''content''] is not none %}        {%- if ns.is_tool %}{{''<｜tool▁outputs▁end｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}        {%- set ns.is_tool = false -%}        {%- else %}{{''<｜Assistant｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}        {%- endif %}    {%- endif %}    {%- if message[''role''] == ''tool'' %}        {%- set ns.is_tool = true -%}        {%- if ns.is_output_first %}{{''<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}        {%- set ns.is_output_first = false %}        {%- else %}{{''\n<｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}        {%- endif %}    {%- endif %}{%- endfor -%}{% if ns.is_tool %}{{''<｜tool▁outputs▁end｜>''}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{''<｜Assistant｜>''}}{% endif %}'
- id: lmstudio-community/datagemma-rag-27b-it-GGUF
  base: google/datagemma-rag-27b-it
  template: |-
    {{ bos_token }}{% if messages[0]['role'] == 'system' %}{{ raise_exception('System role not supported') }}{% endif %}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if (message['role'] == 'assistant') %}{% set role = 'model' %}{% else %}{% set role = message['role'] %}{% endif %}{{ '<start_of_turn>' + role + '
    ' + message['content'] | trim + '<end_of_turn>
    ' }}{% endfor %}{% if add_generation_prompt %}{{'<start_of_turn>model
    '}}{% endif %}
- id: lmstudio-community/datagemma-rig-27b-it-GGUF
  base: google/datagemma-rig-27b-it
  template: |-
    {{ bos_token }}{% if messages[0]['role'] == 'system' %}{{ raise_exception('System role not supported') }}{% endif %}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if (message['role'] == 'assistant') %}{% set role = 'model' %}{% else %}{% set role = message['role'] %}{% endif %}{{ '<start_of_turn>' + role + '
    ' + message['content'] | trim + '<end_of_turn>
    ' }}{% endfor %}{% if add_generation_prompt %}{{'<start_of_turn>model
    '}}{% endif %}
- id: lmstudio-community/Qwen2.5-72B-Instruct-GGUF
  base: Qwen/Qwen2.5-72B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-32B-Instruct-GGUF
  base: Qwen/Qwen2.5-32B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Mistral-Small-Instruct-2409-GGUF
  base: mistralai/Mistral-Small-Instruct-2409
  template: |
    {%- if messages[0]['role'] == 'system' %}
        {%- set system_message = messages[0]['content'] %}
        {%- set loop_messages = messages[1:] %}
    {%- else %}
        {%- set loop_messages = messages %}
    {%- endif %}

    {{- bos_token }}
    {%- for message in loop_messages %}
        {%- if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}
            {{- raise_exception('After the optional system message, conversation roles must alternate user/assistant/user/assistant/...') }}
        {%- endif %}
        {%- if message['role'] == 'user' %}
            {%- if loop.first and system_message is defined %}
                {{- ' [INST] ' + system_message + '\n\n' + message['content'] + ' [/INST]' }}
            {%- else %}
                {{- ' [INST] ' + message['content'] + ' [/INST]' }}
            {%- endif %}
        {%- elif message['role'] == 'assistant' %}
            {{- ' ' + message['content'] + eos_token}}
        {%- else %}
            {{- raise_exception('Only user and assistant roles are supported, with the exception of an initial optional system message!') }}
        {%- endif %}
    {%- endfor %}
- id: lmstudio-community/Qwen2.5-1.5B-Instruct-GGUF
  base: Qwen/Qwen2.5-1.5B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-0.5B-Instruct-GGUF
  base: Qwen/Qwen2.5-0.5B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-Math-7B-Instruct-GGUF
  base: Qwen/Qwen2.5-Math-7B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'Please reason step by step, and put your final answer within \\boxed{}.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nPlease reason step by step, and put your final answer within \\boxed{}.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-Math-72B-Instruct-GGUF
  base: Qwen/Qwen2.5-Math-72B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'Please reason step by step, and put your final answer within \\boxed{}.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nPlease reason step by step, and put your final answer within \\boxed{}.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-Math-1.5B-Instruct-GGUF
  base: Qwen/Qwen2.5-Math-1.5B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'Please reason step by step, and put your final answer within \\boxed{}.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nPlease reason step by step, and put your final answer within \\boxed{}.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-Coder-1.5B-Instruct-GGUF
  base: Qwen/Qwen2.5-Coder-1.5B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Llama-3_1-Nemotron-51B-Instruct-GGUF
  base: nvidia/Llama-3_1-Nemotron-51B-Instruct
  template: |
    {{- bos_token }}
    {%- if custom_tools is defined %}
        {%- set tools = custom_tools %}
    {%- endif %}
    {%- if not tools_in_user_message is defined %}
        {%- set tools_in_user_message = true %}
    {%- endif %}
    {%- if not date_string is defined %}
        {%- set date_string = "26 Jul 2024" %}
    {%- endif %}
    {%- if not tools is defined %}
        {%- set tools = none %}
    {%- endif %}

    {#- This block extracts the system message, so we can slot it into the right place. #}
    {%- if messages[0]['role'] == 'system' %}
        {%- set system_message = messages[0]['content']|trim %}
        {%- set messages = messages[1:] %}
    {%- else %}
        {%- set system_message = "" %}
    {%- endif %}

    {#- System message + builtin tools #}
    {{- "<|start_header_id|>system<|end_header_id|>\n\n" }}
    {%- if builtin_tools is defined or tools is not none %}
        {{- "Environment: ipython\n" }}
    {%- endif %}
    {%- if builtin_tools is defined %}
        {{- "Tools: " + builtin_tools | reject('equalto', 'code_interpreter') | join(", ") + "\n\n"}}
    {%- endif %}
    {{- "Cutting Knowledge Date: December 2023\n" }}
    {{- "Today Date: " + date_string + "\n\n" }}
    {%- if tools is not none and not tools_in_user_message %}
        {{- "You have access to the following functions. To call a function, please respond with JSON for a function call." }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
    {%- endif %}
    {{- system_message }}
    {{- "<|eot_id|>" }}

    {#- Custom tools are passed in a user message with some extra guidance #}
    {%- if tools_in_user_message and not tools is none %}
        {#- Extract the first user message so we can plug it in here #}
        {%- if messages | length != 0 %}
            {%- set first_user_message = messages[0]['content']|trim %}
            {%- set messages = messages[1:] %}
        {%- else %}
            {{- raise_exception("Cannot put tools in the first user message when there's no first user message!") }}
    {%- endif %}
        {{- '<|start_header_id|>user<|end_header_id|>\n\n' -}}
        {{- "Given the following functions, please respond with a JSON for a function call " }}
        {{- "with its proper arguments that best answers the given prompt.\n\n" }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
        {{- first_user_message + "<|eot_id|>"}}
    {%- endif %}

    {%- for message in messages %}
        {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}
            {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\n\n'+ message['content'] | trim + '<|eot_id|>' }}
        {%- elif 'tool_calls' in message %}
            {%- if not message.tool_calls|length == 1 %}
                {{- raise_exception("This model only supports single tool-calls at once!") }}
            {%- endif %}
            {%- set tool_call = message.tool_calls[0].function %}
            {%- if builtin_tools is defined and tool_call.name in builtin_tools %}
                {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
                {{- "<|python_tag|>" + tool_call.name + ".call(" }}
                {%- for arg_name, arg_val in tool_call.arguments | items %}
                    {{- arg_name + '="' + arg_val + '"' }}
                    {%- if not loop.last %}
                        {{- ", " }}
                    {%- endif %}
                    {%- endfor %}
                {{- ")" }}
            {%- else  %}
                {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
                {{- '{"name": "' + tool_call.name + '", ' }}
                {{- '"parameters": ' }}
                {{- tool_call.arguments | tojson }}
                {{- "}" }}
            {%- endif %}
            {%- if builtin_tools is defined %}
                {#- This means we're in ipython mode #}
                {{- "<|eom_id|>" }}
            {%- else %}
                {{- "<|eot_id|>" }}
            {%- endif %}
        {%- elif message.role == "tool" or message.role == "ipython" %}
            {{- "<|start_header_id|>ipython<|end_header_id|>\n\n" }}
            {%- if message.content is mapping or message.content is iterable %}
                {{- message.content | tojson }}
            {%- else %}
                {{- message.content }}
            {%- endif %}
            {{- "<|eot_id|>" }}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' }}
    {%- endif %}
- id: lmstudio-community/NuExtract-v1.5-GGUF
  base: numind/NuExtract-v1.5
  template: |-
    {% for message in messages %}{% if message['role'] == 'system' and message['content'] %}{{'<|system|>
    ' + message['content'] + '<|end|>
    '}}{% elif message['role'] == 'user' %}{{'<|user|>
    ' + message['content'] + '<|end|>
    '}}{% elif message['role'] == 'assistant' %}{{'<|assistant|>
    ' + message['content'] + '<|end|>
    '}}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ '<|assistant|>
    ' }}{% else %}{{ eos_token }}{% endif %}
- id: lmstudio-community/Llama-3.1-Nemotron-70B-Instruct-HF-GGUF
  base: nvidia/Llama-3.1-Nemotron-70B-Instruct-HF
  template: |
    {{- bos_token }}
    {%- if custom_tools is defined %}
        {%- set tools = custom_tools %}
    {%- endif %}
    {%- if not tools_in_user_message is defined %}
        {%- set tools_in_user_message = true %}
    {%- endif %}
    {%- if not date_string is defined %}
        {%- set date_string = "26 Jul 2024" %}
    {%- endif %}
    {%- if not tools is defined %}
        {%- set tools = none %}
    {%- endif %}

    {#- This block extracts the system message, so we can slot it into the right place. #}
    {%- if messages[0]['role'] == 'system' %}
        {%- set system_message = messages[0]['content']|trim %}
        {%- set messages = messages[1:] %}
    {%- else %}
        {%- set system_message = "" %}
    {%- endif %}

    {#- System message + builtin tools #}
    {{- "<|start_header_id|>system<|end_header_id|>\n\n" }}
    {%- if builtin_tools is defined or tools is not none %}
        {{- "Environment: ipython\n" }}
    {%- endif %}
    {%- if builtin_tools is defined %}
        {{- "Tools: " + builtin_tools | reject('equalto', 'code_interpreter') | join(", ") + "\n\n"}}
    {%- endif %}

    {%- if tools is not none and not tools_in_user_message %}
        {{- "You have access to the following functions. To call a function, please respond with JSON for a function call." }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
    {%- endif %}
    {{- system_message }}
    {{- "<|eot_id|>" }}

    {#- Custom tools are passed in a user message with some extra guidance #}
    {%- if tools_in_user_message and not tools is none %}
        {#- Extract the first user message so we can plug it in here #}
        {%- if messages | length != 0 %}
            {%- set first_user_message = messages[0]['content']|trim %}
            {%- set messages = messages[1:] %}
        {%- else %}
            {{- raise_exception("Cannot put tools in the first user message when there's no first user message!") }}
    {%- endif %}
        {{- '<|start_header_id|>user<|end_header_id|>\n\n' -}}
        {{- "Given the following functions, please respond with a JSON for a function call " }}
        {{- "with its proper arguments that best answers the given prompt.\n\n" }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
        {{- first_user_message + "<|eot_id|>"}}
    {%- endif %}

    {%- for message in messages %}
        {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}
            {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\n\n'+ message['content'] | trim + '<|eot_id|>' }}
        {%- elif 'tool_calls' in message %}
            {%- if not message.tool_calls|length == 1 %}
                {{- raise_exception("This model only supports single tool-calls at once!") }}
            {%- endif %}
            {%- set tool_call = message.tool_calls[0].function %}
            {%- if builtin_tools is defined and tool_call.name in builtin_tools %}
                {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
                {{- "<|python_tag|>" + tool_call.name + ".call(" }}
                {%- for arg_name, arg_val in tool_call.arguments | items %}
                    {{- arg_name + '="' + arg_val + '"' }}
                    {%- if not loop.last %}
                        {{- ", " }}
                    {%- endif %}
                    {%- endfor %}
                {{- ")" }}
            {%- else  %}
                {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
                {{- '{"name": "' + tool_call.name + '", ' }}
                {{- '"parameters": ' }}
                {{- tool_call.arguments | tojson }}
                {{- "}" }}
            {%- endif %}
            {%- if builtin_tools is defined %}
                {#- This means we're in ipython mode #}
                {{- "<|eom_id|>" }}
            {%- else %}
                {{- "<|eot_id|>" }}
            {%- endif %}
        {%- elif message.role == "tool" or message.role == "ipython" %}
            {{- "<|start_header_id|>ipython<|end_header_id|>\n\n" }}
            {%- if message.content is mapping or message.content is iterable %}
                {{- message.content | tojson }}
            {%- else %}
                {{- message.content }}
            {%- endif %}
            {{- "<|eot_id|>" }}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' }}
    {%- endif %}
- id: lmstudio-community/gemma-7b-aps-it-GGUF
  base: google/gemma-7b-aps-it
  template: |-
    {{ bos_token }}{% if messages[0]['role'] == 'system' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0]['content'] %}{% else %}{% set loop_messages = messages %}{% set system_message = 'I will provide a passage split into sentences by <s> and </s> markers. For each sentence, generate its list of propositions. Each proposition contains a single fact mentioned in the corresponding sentence written as briefly and clearly as possible.

    Passage: ' %}{% endif %}{{ '<start_of_turn>system
    ' + system_message + '<end_of_turn>
    '}}{% for message in loop_messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{{ '<start_of_turn>' + message['role'] + '
    ' + message['content'] + '<end_of_turn>
    ' }}{% endfor %}{% if add_generation_prompt %}{{ '<start_of_turn>model
    ' }}{% endif %}
- id: lmstudio-community/gemma-2b-aps-it-GGUF
  base: google/gemma-2b-aps-it
  template: |-
    {{ bos_token }}{% if messages[0]['role'] == 'system' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0]['content'] %}{% else %}{% set loop_messages = messages %}{% set system_message = 'I will provide a passage split into sentences by <s> and </s> markers. For each sentence, generate its list of propositions. Each proposition contains a single fact mentioned in the corresponding sentence written as briefly and clearly as possible.

    Passage: ' %}{% endif %}{{ '<start_of_turn>system
    ' + system_message + '<end_of_turn>
    '}}{% for message in loop_messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{{ '<start_of_turn>' + message['role'] + '
    ' + message['content'] + '<end_of_turn>
    ' }}{% endfor %}{% if add_generation_prompt %}{{ '<start_of_turn>model
    ' }}{% endif %}
- id: lmstudio-community/granite-3.0-8b-instruct-GGUF
  base: ibm-granite/granite-3.0-8b-instruct
  template: |-
    {%- if tools %}
        {{- '<|start_of_role|>available_tools<|end_of_role|>
    ' }}
        {%- for tool in tools %}
        {{- tool | tojson(indent=4) }}
        {%- if not loop.last %}
            {{- '

    ' }}
        {%- endif %}
        {%- endfor %}
        {{- '<|end_of_text|>
    ' }}
    {%- endif %}
    {%- for message in messages %}
        {%- if message['role'] == 'system' %}
        {{- '<|start_of_role|>system<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'user' %}
        {{- '<|start_of_role|>user<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'assistant' %}
        {{- '<|start_of_role|>assistant<|end_of_role|>'  + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'assistant_tool_call' %}
        {{- '<|start_of_role|>assistant<|end_of_role|><|tool_call|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'tool_response' %}
        {{- '<|start_of_role|>tool_response<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- endif %}
        {%- if loop.last and add_generation_prompt %}
        {{- '<|start_of_role|>assistant<|end_of_role|>' }}
        {%- endif %}
    {%- endfor %}
- id: lmstudio-community/granite-3.0-2b-instruct-GGUF
  base: ibm-granite/granite-3.0-2b-instruct
  template: |-
    {%- if tools %}
        {{- '<|start_of_role|>available_tools<|end_of_role|>
    ' }}
        {%- for tool in tools %}
        {{- tool | tojson(indent=4) }}
        {%- if not loop.last %}
            {{- '

    ' }}
        {%- endif %}
        {%- endfor %}
        {{- '<|end_of_text|>
    ' }}
    {%- endif %}
    {%- for message in messages %}
        {%- if message['role'] == 'system' %}
        {{- '<|start_of_role|>system<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'user' %}
        {{- '<|start_of_role|>user<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'assistant' %}
        {{- '<|start_of_role|>assistant<|end_of_role|>'  + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'assistant_tool_call' %}
        {{- '<|start_of_role|>assistant<|end_of_role|><|tool_call|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'tool_response' %}
        {{- '<|start_of_role|>tool_response<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- endif %}
        {%- if loop.last and add_generation_prompt %}
        {{- '<|start_of_role|>assistant<|end_of_role|>' }}
        {%- endif %}
    {%- endfor %}
- id: lmstudio-community/granite-3.0-1b-a400m-instruct-GGUF
  base: ibm-granite/granite-3.0-1b-a400m-instruct
  template: |-
    {%- if tools %}
        {{- '<|start_of_role|>available_tools<|end_of_role|>
    ' }}
        {%- for tool in tools %}
        {{- tool | tojson(indent=4) }}
        {%- if not loop.last %}
            {{- '

    ' }}
        {%- endif %}
        {%- endfor %}
        {{- '<|end_of_text|>
    ' }}
    {%- endif %}
    {%- for message in messages %}
        {%- if message['role'] == 'system' %}
        {{- '<|start_of_role|>system<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'user' %}
        {{- '<|start_of_role|>user<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'assistant' %}
        {{- '<|start_of_role|>assistant<|end_of_role|>'  + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'assistant_tool_call' %}
        {{- '<|start_of_role|>assistant<|end_of_role|><|tool_call|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'tool_response' %}
        {{- '<|start_of_role|>tool_response<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- endif %}
        {%- if loop.last and add_generation_prompt %}
        {{- '<|start_of_role|>assistant<|end_of_role|>' }}
        {%- endif %}
    {%- endfor %}
- id: lmstudio-community/granite-3.0-3b-a800m-instruct-GGUF
  base: ibm-granite/granite-3.0-3b-a800m-instruct
  template: |-
    {%- if tools %}
        {{- '<|start_of_role|>available_tools<|end_of_role|>
    ' }}
        {%- for tool in tools %}
        {{- tool | tojson(indent=4) }}
        {%- if not loop.last %}
            {{- '

    ' }}
        {%- endif %}
        {%- endfor %}
        {{- '<|end_of_text|>
    ' }}
    {%- endif %}
    {%- for message in messages %}
        {%- if message['role'] == 'system' %}
        {{- '<|start_of_role|>system<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'user' %}
        {{- '<|start_of_role|>user<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'assistant' %}
        {{- '<|start_of_role|>assistant<|end_of_role|>'  + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'assistant_tool_call' %}
        {{- '<|start_of_role|>assistant<|end_of_role|><|tool_call|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- elif message['role'] == 'tool_response' %}
        {{- '<|start_of_role|>tool_response<|end_of_role|>' + message['content'] + '<|end_of_text|>
    ' }}
        {%- endif %}
        {%- if loop.last and add_generation_prompt %}
        {{- '<|start_of_role|>assistant<|end_of_role|>' }}
        {%- endif %}
    {%- endfor %}
- id: lmstudio-community/aya-expanse-8b-GGUF
  base: CohereForAI/aya-expanse-8b
  template: '{{ bos_token }}{% if messages[0][''role''] == ''system'' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0][''content''] %}{% elif false == true %}{% set loop_messages = messages %}{% set system_message = ''You are Aya, a brilliant, sophisticated, multilingual AI-assistant trained to assist human users by providing thorough responses. You are able to interact and respond to questions in 23 languages and you are powered by a multilingual model built by Cohere For AI.'' %}{% else %}{% set loop_messages = messages %}{% set system_message = false %}{% endif %}{% if system_message != false %}{{ ''<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>'' + system_message + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% for message in loop_messages %}{% if (message[''role''] == ''user'') != (loop.index0 % 2 == 0) %}{{ raise_exception(''Conversation roles must alternate user/assistant/user/assistant/...'') }}{% endif %}{% set content = message[''content''] %}{% if message[''role''] == ''user'' %}{{ ''<|START_OF_TURN_TOKEN|><|USER_TOKEN|>'' + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% elif message[''role''] == ''assistant'' %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>''  + content.strip() + ''<|END_OF_TURN_TOKEN|>'' }}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ ''<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>'' }}{% endif %}'
- id: lmstudio-community/SmolLM2-1.7B-Instruct-GGUF
  base: HuggingFaceTB/SmolLM2-1.7B-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and messages[0]['role'] != 'system' %}{{ '<|im_start|>system
    You are a helpful AI assistant named SmolLM, trained by Hugging Face<|im_end|>
    ' }}{% endif %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/SmolLM2-360M-Instruct-GGUF
  base: HuggingFaceTB/SmolLM2-360M-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and messages[0]['role'] != 'system' %}{{ '<|im_start|>system
    You are a helpful AI assistant named SmolLM, trained by Hugging Face<|im_end|>
    ' }}{% endif %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/SmolLM2-135M-Instruct-GGUF
  base: HuggingFaceTB/SmolLM2-135M-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and messages[0]['role'] != 'system' %}{{ '<|im_start|>system
    You are a helpful AI assistant named SmolLM, trained by Hugging Face<|im_end|>
    ' }}{% endif %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/AMD-OLMo-1B-SFT-DPO-GGUF
  base: amd/AMD-OLMo-1B-SFT-DPO
  template: |-
    {% for message in messages %}
    {% if message['role'] == 'user' %}
    {{ '<|user|>
    ' + message['content'] }}
    {% elif message['role'] == 'system' %}
    {{ '<|system|>
    ' + message['content'] }}
    {% elif message['role'] == 'assistant' %}
    {{ '<|assistant|>
    '  + message['content'] }}
    {% endif %}
    {% if loop.last and add_generation_prompt %}
    {{ '<|assistant|>' }}
    {% endif %}
    {% endfor %}
- id: lmstudio-community/Qwen2.5-Coder-32B-Instruct-GGUF
  base: Qwen/Qwen2.5-Coder-32B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-Coder-14B-Instruct-GGUF
  base: Qwen/Qwen2.5-Coder-14B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-Coder-0.5B-Instruct-GGUF
  base: Qwen/Qwen2.5-Coder-0.5B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-Coder-3B-Instruct-GGUF
  base: Qwen/Qwen2.5-Coder-3B-Instruct
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/OpenCoder-8B-Instruct-GGUF
  base: infly/OpenCoder-8B-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and messages[0]['role'] != 'system' %}{{ '<|im_start|>system
    You are OpenCoder, created by OpenCoder Team.<|im_end|>
    ' }}{% endif %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/OpenCoder-1.5B-Instruct-GGUF
  base: infly/OpenCoder-1.5B-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and messages[0]['role'] != 'system' %}{{ '<|im_start|>system
    You are OpenCoder, created by OpenCoder Team.<|im_end|>
    ' }}{% endif %}{{'<|im_start|>' + message['role'] + '
    ' + message['content'] + '<|im_end|>' + '
    '}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
    ' }}{% endif %}
- id: lmstudio-community/Qwen2.5-Coder-0.5B-GGUF
  base: Qwen/Qwen2.5-Coder-0.5B
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-Coder-3B-GGUF
  base: Qwen/Qwen2.5-Coder-3B
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-Coder-14B-GGUF
  base: Qwen/Qwen2.5-Coder-14B
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Qwen2.5-Coder-32B-GGUF
  base: Qwen/Qwen2.5-Coder-32B
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Athene-V2-Chat-GGUF
  base: Nexusflow/Athene-V2-Chat
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Athene-V2-Agent-GGUF
  base: Nexusflow/Athene-V2-Agent
  template: |
    {%- if tools %}
        {{- '<|im_start|>system\n' }}
        {%- if messages[0]['role'] == 'system' %}
            {{- messages[0]['content'] }}
        {%- else %}
            {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}
        {%- endif %}
        {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
        {%- for tool in tools %}
            {{- "\n" }}
            {{- tool | tojson }}
        {%- endfor %}
        {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
    {%- else %}
        {%- if messages[0]['role'] == 'system' %}
            {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
        {%- else %}
            {{- '<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
    {%- for message in messages %}
        {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
            {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
        {%- elif message.role == "assistant" %}
            {{- '<|im_start|>' + message.role }}
            {%- if message.content %}
                {{- '\n' + message.content }}
            {%- endif %}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function is defined %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '\n<tool_call>\n{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {{- tool_call.arguments | tojson }}
                {{- '}\n</tool_call>' }}
            {%- endfor %}
            {{- '<|im_end|>\n' }}
        {%- elif message.role == "tool" %}
            {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
                {{- '<|im_start|>user' }}
            {%- endif %}
            {{- '\n<tool_response>\n' }}
            {{- message.content }}
            {{- '\n</tool_response>' }}
            {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
                {{- '<|im_end|>\n' }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|im_start|>assistant\n' }}
    {%- endif %}
- id: lmstudio-community/Mistral-Large-Instruct-2411-GGUF
  base: mistralai/Mistral-Large-Instruct-2411
  template: '{{ bos_token }}{% for message in messages %}{% if message[''role''] == ''user'' %}{{ ''[INST] '' + message[''content''] + ''[/INST]'' }}{% elif message[''role''] == ''system'' %}{{ ''[SYSTEM_PROMPT] '' + message[''content''] + ''[/SYSTEM_PROMPT]'' }}{% elif message[''role''] == ''assistant'' %}{{ '' '' + message[''content''] + eos_token }}{% else %}{{ raise_exception(''Only user, system and assistant roles are supported!'') }}{% endif %}{% endfor %}'
- id: lmstudio-community/Llama-3.1-Tulu-3-8B-GGUF
  base: allenai/Llama-3.1-Tulu-3-8B
  template: |-
    {% for message in messages %}{% if message['role'] == 'system' %}{{ '<|system|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'user' %}{{ '<|user|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'assistant' %}{% if not loop.last %}{{ '<|assistant|>
    '  + message['content'] + eos_token + '
    ' }}{% else %}{{ '<|assistant|>
    '  + message['content'] + eos_token }}{% endif %}{% endif %}{% if loop.last and add_generation_prompt %}{{ '<|assistant|>
    ' }}{% endif %}{% endfor %}
- id: lmstudio-community/Llama-3.1-Tulu-3-70B-GGUF
  base: allenai/Llama-3.1-Tulu-3-70B
  template: |-
    {% for message in messages %}{% if message['role'] == 'system' %}{{ '<|system|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'user' %}{{ '<|user|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'assistant' %}{% if not loop.last %}{{ '<|assistant|>
    '  + message['content'] + eos_token + '
    ' }}{% else %}{{ '<|assistant|>
    '  + message['content'] + eos_token }}{% endif %}{% endif %}{% if loop.last and add_generation_prompt %}{{ '<|assistant|>
    ' }}{% endif %}{% endfor %}
- id: lmstudio-community/INTELLECT-1-Instruct-GGUF
  base: PrimeIntellect/INTELLECT-1-Instruct
  template: |-
    {% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '<|start_header_id|>' + message['role'] + '<|end_header_id|>

    '+ message['content'] | trim + '<|eot_id|>' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{% if add_generation_prompt %}{{ '<|start_header_id|>assistant<|end_header_id|>

    ' }}{% endif %}
- id: lmstudio-community/EuroLLM-9B-Instruct-GGUF
  base: utter-project/EuroLLM-9B-Instruct
  template: |-
    {% for message in messages %}{% if message['role'] == 'assistant' %}{% set role = 'assistant' %}{% else %}{% set role = message['role'] %}{% endif %}<|im_start|>{{ role }}
    {{ message['content'] | trim }}<|im_end|>
    {% endfor %}{% if add_generation_prompt %}{{'<|im_start|>assistant
    '}}{% endif %}
- id: lmstudio-community/EXAONE-3.5-2.4B-Instruct-GGUF
  base: LGAI-EXAONE/EXAONE-3.5-2.4B-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and message['role'] != 'system' %}{{ '[|system|][|endofturn|]
    ' }}{% endif %}{{ '[|' + message['role'] + '|]' + message['content'] }}{% if message['role'] == 'user' %}{{ '
    ' }}{% else %}{{ '[|endofturn|]
    ' }}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ '[|assistant|]' }}{% endif %}
- id: lmstudio-community/EXAONE-3.5-7.8B-Instruct-GGUF
  base: LGAI-EXAONE/EXAONE-3.5-7.8B-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and message['role'] != 'system' %}{{ '[|system|][|endofturn|]
    ' }}{% endif %}{{ '[|' + message['role'] + '|]' + message['content'] }}{% if message['role'] == 'user' %}{{ '
    ' }}{% else %}{{ '[|endofturn|]
    ' }}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ '[|assistant|]' }}{% endif %}
- id: lmstudio-community/EXAONE-3.5-32B-Instruct-GGUF
  base: LGAI-EXAONE/EXAONE-3.5-32B-Instruct
  template: |-
    {% for message in messages %}{% if loop.first and message['role'] != 'system' %}{{ '[|system|][|endofturn|]
    ' }}{% endif %}{{ '[|' + message['role'] + '|]' + message['content'] }}{% if message['role'] == 'user' %}{{ '
    ' }}{% else %}{{ '[|endofturn|]
    ' }}{% endif %}{% endfor %}{% if add_generation_prompt %}{{ '[|assistant|]' }}{% endif %}
- id: lmstudio-community/DeepSeek-V2.5-1210-GGUF
  base: deepseek-ai/DeepSeek-V2.5-1210
  template: '{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='''') %}{%- for message in messages %}    {%- if message[''role''] == ''system'' %}        {% set ns.system_prompt = message[''content''] %}    {%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}    {%- if message[''role''] == ''user'' %}    {%- set ns.is_tool = false -%}{{''<｜User｜>'' + message[''content'']}}    {%- endif %}    {%- if message[''role''] == ''assistant'' and message[''content''] is none %}        {%- set ns.is_tool = false -%}        {%- for tool in message[''tool_calls'']%}            {%- if not ns.is_first %}{{''<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}            {%- set ns.is_first = true -%}            {%- else %}{{''\n'' + ''<｜tool▁call▁begin｜>'' + tool[''type''] + ''<｜tool▁sep｜>'' + tool[''function''][''name''] + ''\n'' + ''```json'' + ''\n'' + tool[''function''][''arguments''] + ''\n'' + ''```'' + ''<｜tool▁call▁end｜>''}}{{''<｜tool▁calls▁end｜><｜end▁of▁sentence｜>''}}                   {%- endif %}        {%- endfor %}    {%- endif %}    {%- if message[''role''] == ''assistant'' and message[''content''] is not none %}        {%- if ns.is_tool %}{{''<｜tool▁outputs▁end｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}        {%- set ns.is_tool = false -%}        {%- else %}{{''<｜Assistant｜>'' + message[''content''] + ''<｜end▁of▁sentence｜>''}}        {%- endif %}    {%- endif %}    {%- if message[''role''] == ''tool'' %}        {%- set ns.is_tool = true -%}        {%- if ns.is_output_first %}{{''<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}        {%- set ns.is_output_first = false %}        {%- else %}{{''\n<｜tool▁output▁begin｜>'' + message[''content''] + ''<｜tool▁output▁end｜>''}}        {%- endif %}    {%- endif %}{%- endfor -%}{% if ns.is_tool %}{{''<｜tool▁outputs▁end｜>''}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{''<｜Assistant｜>''}}{% endif %}'
- id: lmstudio-community/Qwen2-VL-72B-Instruct-GGUF
  base: Qwen/Qwen2-VL-72B-Instruct
  template: |-
    {% set image_count = namespace(value=0) %}{% set video_count = namespace(value=0) %}{% for message in messages %}{% if loop.first and message['role'] != 'system' %}<|im_start|>system
    You are a helpful assistant.<|im_end|>
    {% endif %}<|im_start|>{{ message['role'] }}
    {% if message['content'] is string %}{{ message['content'] }}<|im_end|>
    {% else %}{% for content in message['content'] %}{% if content['type'] == 'image' or 'image' in content or 'image_url' in content %}{% set image_count.value = image_count.value + 1 %}{% if add_vision_id %}Picture {{ image_count.value }}: {% endif %}<|vision_start|><|image_pad|><|vision_end|>{% elif content['type'] == 'video' or 'video' in content %}{% set video_count.value = video_count.value + 1 %}{% if add_vision_id %}Video {{ video_count.value }}: {% endif %}<|vision_start|><|video_pad|><|vision_end|>{% elif 'text' in content %}{{ content['text'] }}{% endif %}{% endfor %}<|im_end|>
    {% endif %}{% endfor %}{% if add_generation_prompt %}<|im_start|>assistant
    {% endif %}
- id: lmstudio-community/Falcon3-1B-Instruct-GGUF
  base: tiiuae/Falcon3-1B-Instruct
  template: |-
    {% if tools %}{% for message in messages %}{% if message['role'] == 'system' %}{{ '<|system|>
    ' + message['content'] + '
    You are an expert in composing functions. You are given a question and a set of possible functions. 
    Based on the question, you will need to make one or more function/tool calls to achieve the purpose. 
    If none of the functions can be used, point it out and refuse to answer. 
    If the given question lacks the parameters required by the function, also point it out.

     You have access to the following tools:
    <tools>'  + tools|tojson + '</tools>

    The output MUST strictly adhere to the following format, and NO other text MUST be included.
    The example format is as follows. Please make sure the parameter type is correct. If no function call is needed, please make the tool calls an empty list [].
    <tool_call>[
    {"name": "function_name1", "arguments": {"argument1": "value1", "argument2": "value2"}},
    ... (more tool calls as required)
    ]</tool_call>' }}{% elif message['role'] == 'user' %}{{ '<|user|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'assistant' %}{% if not loop.last %}{{ '<|assistant|>
    ' + message['content'] + eos_token + '
    ' }}{% else %}{{ '<|assistant|>
    ' + message['content'] + eos_token }}{% endif %}{% endif %}{% if loop.last and add_generation_prompt %}{{ '<|assistant|>
    ' }}{% endif %}{% endfor %}{% else %}{% for message in messages %}{% if message['role'] == 'system' %}{{ '<|system|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'user' %}{{ '<|user|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'assistant' %}{% if not loop.last %}{{ '<|assistant|>
    ' + message['content'] + eos_token + '
    ' }}{% else %}{{ '<|assistant|>
    ' + message['content'] + eos_token }}{% endif %}{% endif %}{% if loop.last and add_generation_prompt %}{{ '<|assistant|>
    ' }}{% endif %}{% endfor %}{% endif %}
- id: lmstudio-community/Falcon3-3B-Instruct-GGUF
  base: tiiuae/Falcon3-3B-Instruct
  template: |-
    {% if tools %}{% for message in messages %}{% if message['role'] == 'system' %}{{ '<|system|>
    ' + message['content'] + '
    You are an expert in composing functions. You are given a question and a set of possible functions. 
    Based on the question, you will need to make one or more function/tool calls to achieve the purpose. 
    If none of the functions can be used, point it out and refuse to answer. 
    If the given question lacks the parameters required by the function, also point it out.

     You have access to the following tools:
    <tools>'  + tools|tojson + '</tools>

    The output MUST strictly adhere to the following format, and NO other text MUST be included.
    The example format is as follows. Please make sure the parameter type is correct. If no function call is needed, please make the tool calls an empty list [].
    <tool_call>[
    {"name": "function_name1", "arguments": {"argument1": "value1", "argument2": "value2"}},
    ... (more tool calls as required)
    ]</tool_call>' }}{% elif message['role'] == 'user' %}{{ '<|user|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'assistant' %}{% if not loop.last %}{{ '<|assistant|>
    ' + message['content'] + eos_token + '
    ' }}{% else %}{{ '<|assistant|>
    ' + message['content'] + eos_token }}{% endif %}{% endif %}{% if loop.last and add_generation_prompt %}{{ '<|assistant|>
    ' }}{% endif %}{% endfor %}{% else %}{% for message in messages %}{% if message['role'] == 'system' %}{{ '<|system|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'user' %}{{ '<|user|>
    ' + message['content'] + '
    ' }}{% elif message['role'] == 'assistant' %}{% if not loop.last %}{{ '<|assistant|>
    ' + message['content'] + eos_token + '
    ' }}{% else %}{{ '<|assistant|>
    ' + message['content'] + eos_token }}{% endif %}{% endif %}{% if loop.last and add_generation_prompt %}{{ '<|assistant|>
    ' }}{% endif %}{% endfor %}{% endif %}
- id: lmstudio-community/granite-3.1-2b-instruct-GGUF
  base: ibm-granite/granite-3.1-2b-instruct
  template: '{%- if messages[0][''role''] == ''system'' %}{%- set system_message = messages[0][''content''] %}{%- set loop_messages = messages[1:] %}{%- else %}{%- set system_message = "Knowledge Cutoff Date: April 2024. You are Granite, developed by IBM." %}{%- if tools and documents %}{%- set system_message = system_message + " You are a helpful AI assistant with access to the following tools. When a tool is required to answer the user''s query, respond with <|tool_call|> followed by a JSON list of tools used. If a tool does not exist in the provided list of tools, notify the user that you do not have the ability to fulfill the request. Write the response to the user''s input by strictly aligning with the facts in the provided documents. If the information needed to answer the question is not available in the documents, inform the user that the question cannot be answered based on the available data." %}{%- elif tools %}{%- set system_message = system_message + " You are a helpful AI assistant with access to the following tools. When a tool is required to answer the user''s query, respond with <|tool_call|> followed by a JSON list of tools used. If a tool does not exist in the provided list of tools, notify the user that you do not have the ability to fulfill the request." %}{%- elif documents %}{%- set system_message = system_message + " Write the response to the user''s input by strictly aligning with the facts in the provided documents. If the information needed to answer the question is not available in the documents, inform the user that the question cannot be answered based on the available data." %}{%- else %}{%- set system_message = system_message + " You are a helpful AI assistant." %}{%- endif %}{%- if controls and ''citations'' in controls and documents %}{%- set system_message = system_message + '' In your response, use the symbols <co> and </co> to indicate when a fact comes from a document in the search result, e.g <co>0</co> for a fact from document 0. Afterwards, list all the citations with their corresponding documents in an ordered list.'' %}{%- endif %}{%- if controls and ''hallucinations'' in controls and documents %}{%- set system_message = system_message + '' Finally, after the response is written, include a numbered list of sentences from the response that are potentially hallucinated and not based in the documents.'' %}{%- endif %}{%- set loop_messages = messages %}{%- endif %}{{- ''<|start_of_role|>system<|end_of_role|>'' + system_message + ''<|end_of_text|> '' }}{%- if tools %}{{- ''<|start_of_role|>tools<|end_of_role|>'' }}{{- tools | tojson(indent=4) }}{{- ''<|end_of_text|> '' }}{%- endif %}{%- if documents %}{{- ''<|start_of_role|>documents<|end_of_role|>'' }}{%- for document in documents %}{{- ''Document '' + loop.index0 | string + '' '' }}{{- document[''text''] }}{%- if not loop.last %}{{- '' ''}}{%- endif%}{%- endfor %}{{- ''<|end_of_text|> '' }}{%- endif %}{%- for message in loop_messages %}{{- ''<|start_of_role|>'' + message[''role''] + ''<|end_of_role|>'' + message[''content''] + ''<|end_of_text|> '' }}{%- if loop.last and add_generation_prompt %}{{- ''<|start_of_role|>assistant'' }}{%- if controls %}{{- '' '' + controls | tojson()}}{%- endif %}{{- ''<|end_of_role|>'' }}{%- endif %}{%- endfor %}'
- id: lmstudio-community/granite-3.1-3b-a800m-instruct-GGUF
  base: ibm-granite/granite-3.1-3b-a800m-instruct
  template: '{%- if messages[0][''role''] == ''system'' %}{%- set system_message = messages[0][''content''] %}{%- set loop_messages = messages[1:] %}{%- else %}{%- set system_message = "Knowledge Cutoff Date: April 2024. You are Granite, developed by IBM." %}{%- if tools and documents %}{%- set system_message = system_message + " You are a helpful AI assistant with access to the following tools. When a tool is required to answer the user''s query, respond with <|tool_call|> followed by a JSON list of tools used. If a tool does not exist in the provided list of tools, notify the user that you do not have the ability to fulfill the request. Write the response to the user''s input by strictly aligning with the facts in the provided documents. If the information needed to answer the question is not available in the documents, inform the user that the question cannot be answered based on the available data." %}{%- elif tools %}{%- set system_message = system_message + " You are a helpful AI assistant with access to the following tools. When a tool is required to answer the user''s query, respond with <|tool_call|> followed by a JSON list of tools used. If a tool does not exist in the provided list of tools, notify the user that you do not have the ability to fulfill the request." %}{%- elif documents %}{%- set system_message = system_message + " Write the response to the user''s input by strictly aligning with the facts in the provided documents. If the information needed to answer the question is not available in the documents, inform the user that the question cannot be answered based on the available data." %}{%- else %}{%- set system_message = system_message + " You are a helpful AI assistant." %}{%- endif %}{%- if controls and ''citations'' in controls and documents %}{%- set system_message = system_message + '' In your response, use the symbols <co> and </co> to indicate when a fact comes from a document in the search result, e.g <co>0</co> for a fact from document 0. Afterwards, list all the citations with their corresponding documents in an ordered list.'' %}{%- endif %}{%- if controls and ''hallucinations'' in controls and documents %}{%- set system_message = system_message + '' Finally, after the response is written, include a numbered list of sentences from the response that are potentially hallucinated and not based in the documents.'' %}{%- endif %}{%- set loop_messages = messages %}{%- endif %}{{- ''<|start_of_role|>system<|end_of_role|>'' + system_message + ''<|end_of_text|> '' }}{%- if tools %}{{- ''<|start_of_role|>tools<|end_of_role|>'' }}{{- tools | tojson(indent=4) }}{{- ''<|end_of_text|> '' }}{%- endif %}{%- if documents %}{{- ''<|start_of_role|>documents<|end_of_role|>'' }}{%- for document in documents %}{{- ''Document '' + loop.index0 | string + '' '' }}{{- document[''text''] }}{%- if not loop.last %}{{- '' ''}}{%- endif%}{%- endfor %}{{- ''<|end_of_text|> '' }}{%- endif %}{%- for message in loop_messages %}{{- ''<|start_of_role|>'' + message[''role''] + ''<|end_of_role|>'' + message[''content''] + ''<|end_of_text|> '' }}{%- if loop.last and add_generation_prompt %}{{- ''<|start_of_role|>assistant'' }}{%- if controls %}{{- '' '' + controls | tojson()}}{%- endif %}{{- ''<|end_of_role|>'' }}{%- endif %}{%- endfor %}'
- id: lmstudio-community/granite-3.1-1b-a400m-instruct-GGUF
  base: ibm-granite/granite-3.1-1b-a400m-instruct
  template: '{%- if messages[0][''role''] == ''system'' %}{%- set system_message = messages[0][''content''] %}{%- set loop_messages = messages[1:] %}{%- else %}{%- set system_message = "Knowledge Cutoff Date: April 2024. You are Granite, developed by IBM." %}{%- if tools and documents %}{%- set system_message = system_message + " You are a helpful AI assistant with access to the following tools. When a tool is required to answer the user''s query, respond with <|tool_call|> followed by a JSON list of tools used. If a tool does not exist in the provided list of tools, notify the user that you do not have the ability to fulfill the request. Write the response to the user''s input by strictly aligning with the facts in the provided documents. If the information needed to answer the question is not available in the documents, inform the user that the question cannot be answered based on the available data." %}{%- elif tools %}{%- set system_message = system_message + " You are a helpful AI assistant with access to the following tools. When a tool is required to answer the user''s query, respond with <|tool_call|> followed by a JSON list of tools used. If a tool does not exist in the provided list of tools, notify the user that you do not have the ability to fulfill the request." %}{%- elif documents %}{%- set system_message = system_message + " Write the response to the user''s input by strictly aligning with the facts in the provided documents. If the information needed to answer the question is not available in the documents, inform the user that the question cannot be answered based on the available data." %}{%- else %}{%- set system_message = system_message + " You are a helpful AI assistant." %}{%- endif %}{%- if controls and ''citations'' in controls and documents %}{%- set system_message = system_message + '' In your response, use the symbols <co> and </co> to indicate when a fact comes from a document in the search result, e.g <co>0</co> for a fact from document 0. Afterwards, list all the citations with their corresponding documents in an ordered list.'' %}{%- endif %}{%- if controls and ''hallucinations'' in controls and documents %}{%- set system_message = system_message + '' Finally, after the response is written, include a numbered list of sentences from the response that are potentially hallucinated and not based in the documents.'' %}{%- endif %}{%- set loop_messages = messages %}{%- endif %}{{- ''<|start_of_role|>system<|end_of_role|>'' + system_message + ''<|end_of_text|> '' }}{%- if tools %}{{- ''<|start_of_role|>tools<|end_of_role|>'' }}{{- tools | tojson(indent=4) }}{{- ''<|end_of_text|> '' }}{%- endif %}{%- if documents %}{{- ''<|start_of_role|>documents<|end_of_role|>'' }}{%- for document in documents %}{{- ''Document '' + loop.index0 | string + '' '' }}{{- document[''text''] }}{%- if not loop.last %}{{- '' ''}}{%- endif%}{%- endfor %}{{- ''<|end_of_text|> '' }}{%- endif %}{%- for message in loop_messages %}{{- ''<|start_of_role|>'' + message[''role''] + ''<|end_of_role|>'' + message[''content''] + ''<|end_of_text|> '' }}{%- if loop.last and add_generation_prompt %}{{- ''<|start_of_role|>assistant'' }}{%- if controls %}{{- '' '' + controls | tojson()}}{%- endif %}{{- ''<|end_of_role|>'' }}{%- endif %}{%- endfor %}'
